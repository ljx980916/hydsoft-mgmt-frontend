{"version":3,"file":"js/empStatistics.6a05f3f4.js","mappings":"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","sources":["webpack://oms-frontend/./src/api/empStatistics.js","webpack://oms-frontend/./src/views/staffStatistics/empStatistics.vue","webpack://oms-frontend/./src/views/staffStatistics/empStatistics.vue?e9a3"],"sourcesContent":["import request from '@/utils/request'\n\nexport function exportEmpExcel(parameter) {\n    return request({\n        url: '/empStatistics/exportEmpExcel',\n        method: 'get',\n        params:parameter,\n        responseType : 'blob'\n    })\n}\n\nexport function queryDeptCostDetail (parameter) {\n    return request({\n        url: '/empStatistics/queryDeptCostDetail',\n        method: 'get',\n        params: parameter\n    })\n}\nexport function queryDeptsCostData (parameter) {\n    return request({\n        url: '/empStatistics/queryDeptsCostData',\n        method: 'get',\n        params: parameter\n    })\n}\n","<template>\n    <div class=\"defaultPadding\">\n        <div v-show=\"currentLevel === 'level1'\">\n            <div class=\"m-b-20\">\n                <span>月份 :  &nbsp;&nbsp;</span>\n                <a-month-picker\n                    style=\"width: 130px;\" \n                    v-model:model-value=\"monthVal\" \n                    class=\"m-r-20\" \n                    value-format=\"YYYYMM\"\n                    :allow-clear=\"false\"\n                    :disabledDate=\"getDisabledTime\"\n                    @change=\"monthChange\" \n                />\n                <span>展开至 : &nbsp;&nbsp;</span>\n                <a-radio-group type=\"button\" v-model:model-value=\"expandTabs\" @change=\"handleExpandTabsChange\">\n                    <a-radio value=\"level1\">一级部门</a-radio>\n                    <a-radio value=\"level2\">二级部门</a-radio>\n                    <a-radio value=\"all\">末级部门</a-radio>\n                </a-radio-group>\n            </div>\n            <a-table\n                :columns=\"level1TableInfo.columns\"\n                :data=\"level1TableInfo.data\"\n                :bordered=\"{cell:true}\"\n                column-resizable\n                :scroll=\"{ maxHeight: level1TableInfo.maxHeight }\"\n                :scrollbar=\"false\"\n                :pagination=\"false\"\n                :expanded-keys=\"level1TableInfo.defaultExpandedKeys\"\n                :loading=\"level1TableInfo.loading\"\n                ref=\"level1TableRef\"\n                @expanded-change=\"expandedChange\"\n            >\n                <template #deptName=\"{record}\">\n                    <a href=\"javaScript:void(0)\" style=\"color: #165dff\" @click=\"jump('level2', record)\">\n                        {{ record.deptName }}\n                    </a>\n                </template>\n            </a-table>\n        </div>\n        <div v-show=\"currentLevel === 'level2'\">\n            <div class=\"m-b-20\">\n                <span>成本类型 :  &nbsp;&nbsp;</span>\n                <a-radio-group type=\"button\" v-model:model-value=\"costType\" @change=\"handleCostTypeChange\">\n                    <a-radio value=\"ALL\">ALL</a-radio>\n                    <a-radio value=\"G\">G</a-radio>\n                    <a-radio value=\"C2\">C2</a-radio>\n                    <a-radio value=\"S\">S</a-radio>\n                    <a-radio value=\"R\">R</a-radio>\n                </a-radio-group>\n                <div style=\"float:right\">\n                    <a-popconfirm content=\"你确定要导出吗?\" @ok=\"handleExport\">\n                        <a-button type=\"primary\" :loading=\"exportLoading\" style=\"border-radius: 4px\">\n                        <template #icon>\n                            <icon-download />\n                        </template>\n                        <template #default>导出</template>\n                        </a-button>\n                    </a-popconfirm>\n                </div>\n            </div>\n            <a-table\n                :columns=\"level2TableInfo.columns\"\n                :data=\"level2TableInfo.data\"\n                :bordered=\"{cell:true}\"\n                column-resizable\n                :scroll=\"{ maxHeight: level2TableInfo.maxHeight }\"\n                :scrollbar=\"false\"\n                :pagination=\"false\"\n                :loading=\"level2TableInfo.loading\"\n                ref=\"level2TableRef\"\n                @expanded-change=\"expandedChange\"\n            >\n                <template #empName=\"{ record }\">\n                    {{ record.empName }}\n                    <a-tag \n                        color=\"#5370FF\" \n                        v-if=\"record.isDeptHead\" \n                        bordered\n                        :style=\"{background:'#E6F7FF',fonSize:'12px',color:'#5370FF',marginLeft:'10px'}\"\n                    >\n                        部门负责人\n                    </a-tag>\n                </template>\n            </a-table>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { onBeforeMount, onMounted, reactive, ref, nextTick, watchEffect,onUnmounted } from 'vue'\nimport { exportEmpExcel, queryDeptCostDetail,queryDeptsCostData } from '@/api/empStatistics'\nimport { dataAddKey,toInteger } from '@/utils/util'\nimport { Message } from '@arco-design/web-vue'\nimport moment from 'moment'\nimport { getCurrentInstance } from \"@vue/runtime-core\";\nlet $bus = getCurrentInstance().appContext.config.globalProperties.$bus;\n\n\nconst monthVal = ref(new Date())\nconst monthChange = ()=>{\n    getDeptsCostData()\n}\n//禁选日期\nconst getDisabledTime = current => {\n  return current.valueOf() < moment(\"2023-01-01 00:00:00\").valueOf();\n};\nconst currentLevel = ref('level1')\nconst expandTabs = ref('level1')\nconst handleExpandTabsChange = val=>{\n    expandTabs.value = val\n    level1TableInfo.defaultExpandedKeys = filterLevelkeys(sourceData,val)\n}\nconst filterLevelkeys = (arr,key)=>{\n    if(arr.length){\n        let expandKeys = []\n        switch (key) {\n            case 'all':\n                function getKeys(arr){\n                    arr.forEach(item=>{\n                        expandKeys.push(item.key)\n                        if(item?.children?.length){\n                            getKeys(item.children)\n                        }\n                    })\n                }\n                getKeys(arr)\n                break;\n            case 'level1' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                })\n                break;\n            case 'level2' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                    if(item?.children?.length){\n                       item.children.forEach(jtem=>{\n                        expandKeys.push(jtem.key)\n                       })\n                    }\n                })\n                break;\n            default:\n                expandKeys = []\n                break;\n        }\n        return expandKeys\n    }\n}\nconst level1TableInfo = reactive({\n    columns : [\n        {\n            title: '部门名称',\n            dataIndex: 'deptName',\n            key: 'deptName',\n            fixed : 'left',\n            width : 230,\n            slotName : 'deptName'\n        },\n        {\n            title: 'G+C2人数',\n            dataIndex: 'GC2Number',\n            key: 'GC2Number',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val) && val === 0){\n                    return '-'\n                }\n                return val\n            }    \n        },\n        {\n            title: 'G+C2人数占比',\n            dataIndex: 'GC2Rate',\n            key: 'GC2Rate',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val)){\n                    return (val*100).toFixed(2) + '%'\n                }\n                return val\n            }    \n        },\n        {\n            title: 'S人数',\n            dataIndex: 'SNumber',\n            key: 'SNumber',\n            width : 90,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val) && val === 0){\n                    return '-'\n                }\n                return val\n            }    \n        },\n        {\n            title: 'S人数占比',\n            dataIndex: 'SRate',\n            key: 'SRate',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val)){\n                    return (val*100).toFixed(2) + '%'\n                }\n                return val\n            }    \n        },\n        {\n            title: 'R人数',\n            dataIndex: 'RNumber',\n            key: 'RNumber',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val) && val === 0){\n                    return '-'\n                }\n                return val\n            }    \n        },\n        {\n            title: 'R人数占比',\n            dataIndex: 'RRate',\n            key: 'RRate',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = +record[column.dataIndex]\n                if(!isNaN(val)){\n                    return (val*100).toFixed(2) + '%'\n                }\n                return val\n            }    \n        }\n    ],\n    data : [],\n    maxHeight : '600px',\n    loading :false,\n    defaultExpandedKeys : []\n})\nconst expandedChange = keys =>{\n    level1TableInfo.defaultExpandedKeys = keys\n}\nconst level2TableRef = ref(null);\nlet selectDept = ''\nconst jump = (val,record) =>{\n    selectDept = record.deptName\n    currentLevel.value = val\n    if(val === 'level2'){\n        getDeptCostDetail()\n        let breadList = [\n            { \n                type: \"button\",\n                color: \"#333\",\n                msg: `${moment(monthVal.value).format(\"YYYY年MM月\")}`,\n                params: \"level1\",\n            },\n            {\n                type: \"text\",\n                color: \"#333\",\n                msg: record.deptName,\n            },\n        ];\n        $bus.emit(\"updateStructure\", breadList);\n        if( level2TableInfo.maxHeight === '600px' && level2TableRef.value){\n            nextTick(() => {\n                let head = level2TableRef.value.$el;\n                let innerHeight = window.innerHeight;\n                let elHeight = head.getBoundingClientRect().top;\n                level2TableInfo.maxHeight = innerHeight>900?innerHeight+130+'px':innerHeight - elHeight - 32 + \"px\";\n            });\n        }\n    }\n}\nlet sourceData = []\nconst getDeptsCostData = ()=>{\n    let params = {\n        month : moment(monthVal.value).format('YYYYMM')\n    }\n    level1TableInfo.loading = true\n    queryDeptsCostData(params).then(res=>{\n        if(res.code === '200'){\n            dataAddKey(res.data,\"key\",\"id\")\n            let expandKeys = []\n            res.data.forEach(item=>{\n                expandKeys.push(item.key)\n            })\n            level1TableInfo.data = res.data\n            level1TableInfo.defaultExpandedKeys = expandKeys\n            sourceData = res.data\n        }else {\n            Message.error(res.message || '请求失败')\n        }\n    }).catch(err=>{\n        Message.error(err.message || '请求失败')\n    }).finally(()=>{\n        level1TableInfo.loading = false\n    })\n}\nonBeforeMount(()=>{\n    getDeptsCostData()\n})\nconst level1TableRef = ref(null);\nonMounted(() => {\n  if (level1TableRef.value) {\n    let head = level1TableRef.value.$el;\n    nextTick(() => {\n      let innerHeight = window.innerHeight;\n      let elHeight = head.getBoundingClientRect().top;\n      level1TableInfo.maxHeight = innerHeight - elHeight - 32 + \"px\";\n    });\n  }\n    $bus.on(\"goBack\", val => {\n        currentLevel.value = val;\n        switch (val) {\n            case \"level1\":\n            let breadList1 = [\n                { type: \"text\", color: \"#333\", msg: `${moment(monthVal.value).format(\"YYYY年MM月\")}` },\n            ];\n            $bus.emit(\"updateStructure\", breadList1);\n            break;\n            default:\n            break;\n        }\n    });\n});\n\nconst costType = ref('ALL')\nconst handleCostTypeChange = val =>{\n    costType.value = val\n    getDeptCostDetail()\n}\nconst exportLoading = ref(false)\nconst handleExport = ()=>{\n    exportLoading.value = true\n    let deptName = selectDept\n    let params = {\n        costCenterName : '',\n        deptName,\n        month : moment(monthVal.value).format('YYYYMM')\n    }\n    exportEmpExcel(params).then(res=>{\n        const blob = new Blob([res]);\n        const fileReader = new FileReader();\n            fileReader.readAsText(res, 'utf-8');\n            fileReader.onerror = function () {\n            Message.error('导出文件失败')\n            return;\n            };\n        const fileName = `${moment(monthVal.value).format('YYYYMM')}_${deptName}招管销人员明细.xlsx`;\n        const link = document.createElement(\"a\");\n        link.download = fileName;\n        link.style.display = \"none\";\n        link.href = URL.createObjectURL(blob);\n        document.body.appendChild(link);\n        link.click();\n        URL.revokeObjectURL(link.href);\n        document.body.removeChild(link);\n    }).catch(() => {\n      Message.error(\"导出失败\");\n    })\n    .finally(() => {\n        exportLoading.value = false\n    });\n}\nconst level2TableInfo = reactive({\n    columns : [\n        {\n            title: '部门',\n            dataIndex: 'deptName',\n            key: 'deptName',\n            fixed : 'left',\n            width : 190,\n        },\n        {\n            title: '姓名',\n            dataIndex: 'empName',\n            key: 'empName',\n            width : 170,\n            slotName : 'empName'\n        },\n        {\n            title: '成本类型',\n            dataIndex: 'costCenterName',\n            key: 'costCenterName',\n            width : 100,\n        },\n        {\n            title: '上级领导',\n            dataIndex: 'deptManager',\n            key: 'deptManager',\n            width : 110,\n        },\n        {\n            title: '城市',\n            dataIndex: 'workPlace',\n            key: 'workPlace',\n            width : 100,\n        },\n        {\n            title: '入职日期',\n            dataIndex: 'hireDate',\n            key: 'hireDate',\n            width : 130,\n        },\n        {\n            title: '管理团队人数',\n            dataIndex: 'teamCount',\n            key: 'teamCount',\n            width : 120,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = record[column.dataIndex]\n                if(typeof(val) === 'number'){\n                    return <span innerHTML={toInteger(val, 0, false)}></span>\n                }\n                return val\n            }    \n        }\n    ],\n    data : [],\n    maxHeight : '600px',\n    loading :false\n})\n\nconst getDeptCostDetail = ()=>{\n    level2TableInfo.loading = true\n    let params = {\n        costCenterName : costType.value === 'ALL'?'':costType.value,\n        deptName : selectDept,\n        month : moment(monthVal.value).format('YYYYMM')\n    }\n    queryDeptCostDetail(params).then(res=>{\n        if(res.code === '200'){\n            level2TableInfo.data = res.data\n        }else {\n            level2TableInfo.data = []\n            Message.error(res.message || '请求失败')\n        }\n    }).catch(err=>{\n        level2TableInfo.data = []\n        Message.error(err.message || '请求失败')\n    }).finally(()=>{\n        level2TableInfo.loading = false\n    })\n}\nwatchEffect(() => {\n  $bus.emit(\"updateStructure\", [\n    { type: \"text\", color: \"#333\", msg: `${moment(monthVal.value).format(\"YYYY年MM月\")}` },\n  ]);\n});\nonUnmounted(() => {\n  $bus.off(\"goBack\");\n});\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>","import script from \"./empStatistics.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./empStatistics.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["exportEmpExcel","parameter","request","url","method","params","responseType","queryDeptCostDetail","queryDeptsCostData","$bus","getCurrentInstance","appContext","config","globalProperties","monthVal","ref","Date","monthChange","getDeptsCostData","getDisabledTime","current","valueOf","moment","currentLevel","expandTabs","handleExpandTabsChange","val","value","level1TableInfo","defaultExpandedKeys","filterLevelkeys","sourceData","arr","key","length","expandKeys","getKeys","forEach","item","push","children","jtem","reactive","columns","title","dataIndex","fixed","width","slotName","cellStyle","render","record","column","isNaN","toFixed","data","maxHeight","loading","expandedChange","keys","level2TableRef","selectDept","jump","deptName","getDeptCostDetail","breadList","type","color","msg","format","emit","level2TableInfo","nextTick","head","$el","innerHeight","window","elHeight","getBoundingClientRect","top","month","then","res","code","dataAddKey","Message","error","message","catch","err","finally","onBeforeMount","level1TableRef","onMounted","on","breadList1","costType","handleCostTypeChange","exportLoading","handleExport","costCenterName","blob","Blob","fileReader","FileReader","readAsText","onerror","fileName","link","document","createElement","download","style","display","href","URL","createObjectURL","body","appendChild","click","revokeObjectURL","removeChild","toInteger","watchEffect","onUnmounted","off","__exports__"],"sourceRoot":""}