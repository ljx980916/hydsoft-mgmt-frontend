{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport \"core-js/modules/es.array.push.js\";\nimport { useCssVars as _useCssVars, unref as _unref } from 'vue';\nimport { onMounted, reactive, ref, nextTick, shallowRef, computed } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree';\nimport IndentedTree from './IndentedTree.vue';\nimport { dataAddKey, toInteger } from '../../utils/util';\nexport default {\n  __name: 'organizationalStructure',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    _useCssVars(_ctx => ({\n      \"8f8b2a42-rootNodeStyleWidth\": _unref(rootNodeStyleWidth),\n      \"8f8b2a42-rootNodeStyleHeigt\": _unref(rootNodeStyleHeigt),\n      \"8f8b2a42-rootNodeStyleFontSize\": _unref(rootNodeStyleFontSize)\n    }));\n    const treeContainerRef = ref(null);\n    const tableRef = ref(null);\n    const treeRoot = {\n      id: 1,\n      label: \"慧博云通\",\n      isSubdivision: false,\n      style: {\n        \"color\": \"#FFFFFF\",\n        \"background\": \"#5370FF\",\n        width: \"190px\",\n        \"letter-spacing\": \".2em\",\n        'font-size': \"13px\",\n        height: \"30px\",\n        \"line-height\": \"10px\"\n      },\n      children: []\n    };\n    const depTreeInfo = reactive({\n      data: {},\n      width: 304,\n      scale: 1\n    });\n    const currentPage = ref('tree');\n    const handleRadioChange = val => {\n      currentPage.value = val;\n      let tree = treeContainerRef.value;\n      if (val === 'list') {\n        nextTick(() => {\n          if (tableRef.value && tableInfo.maxHeight === '600px') {\n            let head = tableRef.value.$el;\n            let innerHeight = window.innerHeight;\n            let elHeight = head.getBoundingClientRect().top;\n            tableInfo.maxHeight = innerHeight - elHeight - 30 + \"px\";\n          }\n        });\n      }\n    };\n    const listTabs = ref('all');\n    const handleListTabsChange = val => {\n      listTabs.value = val;\n      tableInfo.data = filterData(sourceData.value, val);\n    };\n    const labelClassNameFn = record => {\n      if (record.id === 1) return 'rootNode';\n    };\n    const expandTabs = ref('level1');\n    const handleExpandTabsChange = val => {\n      expandTabs.value = val;\n      tableInfo.defaultExpandedKeys = filterLevelkeys(sourceData.value, val);\n    };\n    const tableInfo = reactive({\n      columns: [{\n        title: '部门名称',\n        dataIndex: 'deptName',\n        key: 'deptName',\n        width: 270\n      }, {\n        title: '总裁室分管执行副总裁',\n        dataIndex: 'evpName',\n        key: 'evpName',\n        width: 206\n      }, {\n        title: '业务主管副总裁',\n        dataIndex: 'bgName',\n        key: 'bgName',\n        width: 156\n      }, {\n        title: '部门负责人',\n        dataIndex: 'empName',\n        key: 'empName',\n        width: 170\n      }, {\n        title: '部门总人数',\n        dataIndex: 'deptTotal',\n        key: 'deptTotal',\n        width: 110,\n        cellStyle: {\n          \"text-align\": \"right\"\n        },\n        render: ({\n          record,\n          column\n        }) => {\n          let val = record[column.dataIndex];\n          if (typeof val === 'number') {\n            if (val === 0) {\n              return '-';\n            }\n            return _createVNode(\"span\", {\n              \"innerHTML\": toInteger(val, 0, false)\n            }, null);\n          }\n          return val;\n        }\n      }, {\n        title: '部门创建日期',\n        dataIndex: 'createTime',\n        key: 'createTime',\n        width: 258\n      }],\n      data: [],\n      maxHeight: '600px',\n      loading: false,\n      defaultExpandedKeys: []\n    });\n    const expandedChange = rowKeys => {\n      tableInfo.defaultExpandedKeys = rowKeys;\n    };\n    let sourceData = shallowRef([]);\n    //树根节点样式\n    let rootNodeStyleWidth = ref('190px'),\n      rootNodeStyleFontSize = ref('13px'),\n      rootNodeStyleHeigt = ref('30px'),\n      rootNodeStyleLineHeight = ref('10px');\n    const treeLoading = ref(false);\n    const asyncDrawGraph = async () => {\n      treeLoading.value = true;\n      let depTreeData = await getDeptTree();\n      if (depTreeData.code === '200') {\n        let filterData = depTreeData.data.filter(item => ('' + item.deptName).startsWith('BG'));\n        let expandedKeys = [];\n        filterData.forEach((item, index) => {\n          treeRoot.children.push({\n            id: item.deptName,\n            label: item.deptName,\n            isSubdivision: true,\n            dept: item.deptName\n          });\n          item.id = index;\n          expandedKeys.push(item.id);\n        });\n        sourceData.value = filterData;\n        dataAddKey(filterData, \"key\", \"id\");\n        tableInfo.data = filterData;\n        tableInfo.defaultExpandedKeys = expandedKeys;\n        let tree = treeContainerRef.value;\n        let getContentWidth = tree && parseInt(getComputedStyle(tree).width);\n        if (filterData.length > 2) {\n          let constrain = Math.floor(getContentWidth / filterData.length);\n          depTreeInfo.width = constrain - 20;\n          let scale = +(depTreeInfo.width / 242).toFixed(2);\n          depTreeInfo.scale = scale;\n          //设置树根节点跟随放大比例放大\n          rootNodeStyleWidth.value = Math.ceil(190 * scale) + 'px';\n          rootNodeStyleFontSize.value = Math.ceil(13 * scale) + 'px';\n          rootNodeStyleHeigt.value = Math.ceil(30 * scale) + 'px';\n          rootNodeStyleLineHeight.value = Math.ceil(10 * scale) + 'px';\n        }\n        depTreeInfo.data = treeRoot;\n      }\n      treeLoading.value = false;\n    };\n    onMounted(() => {\n      asyncDrawGraph();\n    });\n    const filterData = (arr, key) => {\n      if (arr.length) {\n        if (key === 'all') {\n          return arr;\n        } else {\n          return arr.filter(item => item.deptName === key);\n        }\n      }\n    };\n    const filterLevelkeys = (arr, key) => {\n      if (arr.length) {\n        let expandKeys = [];\n        switch (key) {\n          case 'all':\n            function getKeys(arr) {\n              arr.forEach(item => {\n                expandKeys.push(item.key);\n                if (item?.children?.length) {\n                  getKeys(item.children);\n                }\n              });\n            }\n            getKeys(arr);\n            break;\n          case 'level1':\n            arr.forEach(item => {\n              expandKeys.push(item.key);\n            });\n            break;\n          case 'level2':\n            arr.forEach(item => {\n              expandKeys.push(item.key);\n              if (item?.children?.length) {\n                item.children.forEach(jtem => {\n                  expandKeys.push(jtem.key);\n                });\n              }\n            });\n            break;\n          default:\n            expandKeys = [];\n            break;\n        }\n        return expandKeys;\n      }\n    };\n    const __returned__ = {\n      treeContainerRef,\n      tableRef,\n      treeRoot,\n      depTreeInfo,\n      currentPage,\n      handleRadioChange,\n      listTabs,\n      handleListTabsChange,\n      labelClassNameFn,\n      expandTabs,\n      handleExpandTabsChange,\n      tableInfo,\n      expandedChange,\n      get sourceData() {\n        return sourceData;\n      },\n      set sourceData(v) {\n        sourceData = v;\n      },\n      get rootNodeStyleWidth() {\n        return rootNodeStyleWidth;\n      },\n      set rootNodeStyleWidth(v) {\n        rootNodeStyleWidth = v;\n      },\n      get rootNodeStyleFontSize() {\n        return rootNodeStyleFontSize;\n      },\n      set rootNodeStyleFontSize(v) {\n        rootNodeStyleFontSize = v;\n      },\n      get rootNodeStyleHeigt() {\n        return rootNodeStyleHeigt;\n      },\n      set rootNodeStyleHeigt(v) {\n        rootNodeStyleHeigt = v;\n      },\n      get rootNodeStyleLineHeight() {\n        return rootNodeStyleLineHeight;\n      },\n      set rootNodeStyleLineHeight(v) {\n        rootNodeStyleLineHeight = v;\n      },\n      treeLoading,\n      asyncDrawGraph,\n      filterData,\n      filterLevelkeys,\n      onMounted,\n      reactive,\n      ref,\n      nextTick,\n      shallowRef,\n      computed,\n      get getDeptTree() {\n        return getDeptTree;\n      },\n      IndentedTree,\n      get dataAddKey() {\n        return dataAddKey;\n      },\n      get toInteger() {\n        return toInteger;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","ref","nextTick","shallowRef","computed","getDeptTree","IndentedTree","dataAddKey","toInteger","treeContainerRef","tableRef","treeRoot","id","label","isSubdivision","style","width","height","children","depTreeInfo","data","scale","currentPage","handleRadioChange","val","value","tree","tableInfo","maxHeight","head","$el","innerHeight","window","elHeight","getBoundingClientRect","top","listTabs","handleListTabsChange","filterData","sourceData","labelClassNameFn","record","expandTabs","handleExpandTabsChange","defaultExpandedKeys","filterLevelkeys","columns","title","dataIndex","key","cellStyle","render","column","loading","expandedChange","rowKeys","rootNodeStyleWidth","rootNodeStyleFontSize","rootNodeStyleHeigt","rootNodeStyleLineHeight","treeLoading","asyncDrawGraph","depTreeData","code","filter","item","deptName","startsWith","expandedKeys","forEach","index","push","dept","getContentWidth","parseInt","getComputedStyle","length","constrain","Math","floor","toFixed","ceil","arr","expandKeys","getKeys","jtem"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/staffStatistics/organizationalStructure.vue"],"sourcesContent":["<template>\n    <div class=\"defaultPadding relative\" ref=\"treeContainerRef\">\n        <div class=\"radio-group-absolute\">\n            <a-radio-group type=\"button\" v-show=\"sourceData.length\" v-model:model-value=\"currentPage\" @change=\"handleRadioChange\">\n                <a-radio value=\"tree\">树状</a-radio>\n                <a-radio value=\"list\">列表</a-radio>\n            </a-radio-group>\n        </div>\n        <div v-show=\"currentPage === 'tree'\" :class=\"['treeBox',treeLoading && 'flex-center-h100']\">\n            <a-spin v-if=\"treeLoading\" :loading=\"treeLoading\" dot tip=\"数据正在加载中...\" class=\"spin\">\n            </a-spin>\n            <vue3-tree-org\n                v-else\n                :data=\"depTreeInfo.data\"\n                :collapsable=\"false\"\n                :horizontal=\"false\"\n                :scalable=\"false\"\n                :draggable=\"false\"\n                :define-menus=\"null\"\n                :node-draggable=\"false\"\n                :default-expand-level=\"Infinity\"\n                :label-class-name=\"labelClassNameFn\"\n                :toolBar=\"{ scale: false, restore: false, expand: false, zoom: false, fullscreen: false }\"\n            >\n                <!-- 自定义节点内容 -->\n                <template v-slot=\"{node}\">\n                    <div v-if=\"node.$$data.isSubdivision\">\n                        <indented-tree \n                            :treeData=\"sourceData.filter(item=>item.deptName === node.$$data.dept)[0]\" \n                            nodeName=\"deptName\"\n                            :width=\"depTreeInfo.width\"\n                            :scale=\"depTreeInfo.scale\" \n                        />\n                    </div>\n                    <div class=\"tree-org-node__text node-label\" v-else>\n                        {{ node.label }}\n                    </div>\n                </template>\n            </vue3-tree-org>\n        </div>\n        <div v-show=\"currentPage === 'list'\">\n            <div class=\"m-b-20\">\n                <span>BG筛选 :  &nbsp;&nbsp;</span>\n                <a-radio-group type=\"button\" class=\"m-r-70\" v-model:model-value=\"listTabs\" @change=\"handleListTabsChange\">\n                    <a-radio value=\"all\">全部</a-radio>\n                    <a-radio v-for=\"(item,i) of sourceData\" :value=\"item.deptName\">{{ item.deptName }}</a-radio>\n                </a-radio-group>\n                <span>展开至 : &nbsp;&nbsp;</span>\n                <a-radio-group type=\"button\" v-model:model-value=\"expandTabs\" @change=\"handleExpandTabsChange\">\n                    <a-radio value=\"level1\">一级部门</a-radio>\n                    <a-radio value=\"level2\">二级部门</a-radio>\n                    <a-radio value=\"all\">末级部门</a-radio>\n                </a-radio-group>\n            </div>\n            <a-table\n                :columns=\"tableInfo.columns\"\n                :data=\"tableInfo.data\"\n                :bordered=\"{cell:true}\"\n                column-resizable\n                :scroll=\"{ maxHeight: tableInfo.maxHeight }\"\n                :scrollbar=\"false\"\n                :pagination=\"false\"\n                :expanded-keys=\"tableInfo.defaultExpandedKeys\"\n                :loading=\"tableInfo.loading\"\n                ref=\"tableRef\"\n                @expanded-change=\"expandedChange\"\n                >\n            </a-table>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref, nextTick, shallowRef, computed } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree'\nimport IndentedTree from './IndentedTree.vue'\nimport { dataAddKey,toInteger } from '../../utils/util'\n\nconst treeContainerRef = ref(null)\nconst tableRef = ref(null);\nconst treeRoot = {\n  id:1,\n  label:\"慧博云通\",\n  isSubdivision : false,\n  style:{\n    \"color\":\"#FFFFFF\",\n    \"background\":\"#5370FF\",\n    width:\"190px\",\n    \"letter-spacing\":\".2em\",\n    'font-size':\"13px\",\n    height : \"30px\",\n    \"line-height\": \"10px\"\n },\n  children : []\n}\nconst depTreeInfo = reactive({\n    data : {},\n    width : 304,\n    scale : 1\n})\nconst currentPage = ref('tree')\nconst handleRadioChange = val=>{\n    currentPage.value = val\n    let tree = treeContainerRef.value\n    if(val === 'list'){\n        nextTick(()=>{\n            if(tableRef.value && tableInfo.maxHeight === '600px'){\n                let head = tableRef.value.$el;\n                let innerHeight = window.innerHeight;\n                let elHeight = head.getBoundingClientRect().top;\n                tableInfo.maxHeight = innerHeight - elHeight - 30 + \"px\";\n            }\n        })\n    }\n}\nconst listTabs = ref('all')\nconst handleListTabsChange = val=>{\n    listTabs.value = val\n    tableInfo.data = filterData(sourceData.value,val)\n}\nconst labelClassNameFn = (record)=>{\n    if(record.id === 1)return 'rootNode'\n}\nconst expandTabs = ref('level1')\nconst handleExpandTabsChange = val=>{\n    expandTabs.value = val\n    tableInfo.defaultExpandedKeys = filterLevelkeys(sourceData.value,val)\n}\nconst tableInfo = reactive({\n    columns : [\n        {\n            title: '部门名称',\n            dataIndex: 'deptName',\n            key: 'deptName',\n            width : 270    \n        },\n        {\n            title: '总裁室分管执行副总裁',\n            dataIndex: 'evpName',\n            key: 'evpName',\n            width : 206\n        },\n        {\n            title: '业务主管副总裁',\n            dataIndex: 'bgName',\n            key: 'bgName',\n            width : 156\n        },\n        {\n            title: '部门负责人',\n            dataIndex: 'empName',\n            key: 'empName',\n            width : 170\n        },\n        {\n            title: '部门总人数',\n            dataIndex: 'deptTotal',\n            key: 'deptTotal',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = record[column.dataIndex]\n                if(typeof(val) === 'number'){\n                    if(val === 0){\n                        return '-'\n                    }\n                    return <span innerHTML={toInteger(val, 0, false)}></span>\n                }\n                return val\n            }    \n        },\n        {\n            title: '部门创建日期',\n            dataIndex: 'createTime',\n            key: 'createTime',\n            width : 258\n        }\n    ],\n    data : [],\n    maxHeight : '600px',\n    loading :false,\n    defaultExpandedKeys : []\n})\n\nconst expandedChange = rowKeys => {\n  tableInfo.defaultExpandedKeys = rowKeys;\n};\nlet sourceData = shallowRef([])\n//树根节点样式\nlet rootNodeStyleWidth=ref('190px'),\n    rootNodeStyleFontSize=ref('13px'),\n    rootNodeStyleHeigt=ref('30px'),\n    rootNodeStyleLineHeight=ref('10px')\n\nconst treeLoading = ref(false)\nconst asyncDrawGraph = async() => {\n  treeLoading.value = true\n  let depTreeData = await getDeptTree()\n  if(depTreeData.code === '200'){\n    let filterData = depTreeData.data.filter(item=>(''+item.deptName).startsWith('BG'))\n    let expandedKeys = []\n    filterData.forEach((item,index)=>{\n      treeRoot.children.push({\n        id: item.deptName,\n        label:item.deptName, \n        isSubdivision : true,\n        dept : item.deptName,\n      })\n      item.id=index\n      expandedKeys.push(item.id)\n    })\n    sourceData.value = filterData\n    dataAddKey(filterData,\"key\",\"id\") \n    tableInfo.data = filterData\n    tableInfo.defaultExpandedKeys = expandedKeys\n    let tree = treeContainerRef.value\n    let getContentWidth = tree && parseInt(getComputedStyle(tree).width)\n    if(filterData.length >2){\n        let constrain = Math.floor(getContentWidth/filterData.length)\n        depTreeInfo.width = constrain - 20\n        let scale = +(depTreeInfo.width/242).toFixed(2)\n        depTreeInfo.scale = scale\n        //设置树根节点跟随放大比例放大\n        rootNodeStyleWidth.value = Math.ceil(190*scale)+'px'\n        rootNodeStyleFontSize.value= Math.ceil(13*scale)+'px'\n        rootNodeStyleHeigt.value = Math.ceil(30*scale)+'px'\n        rootNodeStyleLineHeight.value = Math.ceil(10*scale)+'px'\n    }\n    depTreeInfo.data = treeRoot\n  }\n  treeLoading.value = false\n}\nonMounted(()=>{\n    asyncDrawGraph()\n})\n\nconst filterData = (arr,key)=>{\n    if(arr.length){\n        if(key === 'all'){\n            return arr\n        }else {\n            return arr.filter(item=>item.deptName === key)\n        }\n    }\n}\n\nconst filterLevelkeys = (arr,key)=>{\n    if(arr.length){\n        let expandKeys = []\n        switch (key) {\n            case 'all':\n                function getKeys(arr){\n                    arr.forEach(item=>{\n                        expandKeys.push(item.key)\n                        if(item?.children?.length){\n                            getKeys(item.children)\n                        }\n                    })\n                }\n                getKeys(arr)\n                break;\n            case 'level1' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                })\n                break;\n            case 'level2' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                    if(item?.children?.length){\n                       item.children.forEach(jtem=>{\n                        expandKeys.push(jtem.key)\n                       })\n                    }\n                })\n                break;\n            default:\n                expandKeys = []\n                break;\n        }\n        return expandKeys\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.relative{\n    position: relative;\n    height: 90%;\n}\n.spin{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.radio-group-absolute{\n    position: absolute;\n    top: 26px;\n    right: 30px;\n    z-index: 1;\n}\n.radio-group-fixed{\n    position: fixed;\n    right: 60px;\n    z-index: 1;\n}\n.flex-center-h100{\n    display: flex;\n    justify-content: center; \n    align-items: center; \n    height: 100%;\n}\n.treeBox {\n  :deep(.zm-tree-org .zoom-container){\n    overflow: visible;\n  }\n  :deep(.zm-tree-org .zm-draggable) {\n    position: static;\n    transform: translateY(0) !important;\n  }\n  :deep(.tree-org-node__children .tree-org-node .tree-org-node__content){\n    left: -10%;\n  }\n  :deep(.tree-org-node.is-leaf .tree-org-node__content .tree-org-node__inner){ \n    box-shadow: none;\n  }\n  :deep(.tree-org-node__children:before){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:not(:first-child):before, .tree-org-node:not(:last-child):after){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:after){\n    border-color: #E0E6F1;\n  }\n  :deep(.rootNode){\n    width : v-bind(rootNodeStyleWidth) !important;\n    height : v-bind(rootNodeStyleHeigt) !important;\n    font-size : v-bind(rootNodeStyleFontSize) !important;\n    display : flex;\n    justify-content:center;\n    align-items : center;\n  }\n  :deep(.tree-org-node:after){\n    left: 0;\n    width: 100%;\n  }\n  :deep(.tree-org-node__children .tree-org-node:last-child){\n    position: absolute;\n    right: 0;\n    transform: translateX(100%);\n  }\n  :deep(.tree-org-node__children .tree-org-node:last-child:before){\n    width: 0;\n  }\n  \n}\n.m-r-70{\n    margin-right: 70px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}