{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\nvar _util = require(\"./util\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n    nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n        previousNode = _a.previous;\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n  if (include === void 0) {\n    include = true;\n  }\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n          cyclePath.push(p);\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n          if (cycleValid) {\n            var cycle = {};\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n            allCycles.push(cycle);\n          }\n          used[neighborId].add(curNode);\n        }\n      };\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n    while (stack.length > 0) {\n      var node = stack.pop();\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n      if (neighbor === start) {\n        var cycle = {};\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n    path.pop();\n    return closed;\n  };\n  var _a = graphData.nodes,\n    nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n    var component = components[minCompIdx];\n    var adjList = [];\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n          return component.map(function (c) {\n            return c.id;\n          }).indexOf(n) > -1;\n        }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n  var nodeIdx = 0;\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n      adjList = scc.adjList,\n      component = scc.component;\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","detectAllUndirectedCycle","detectAllDirectedCycle","detectAllCycles","default","_dfs","_interopRequireDefault","require","_connectedComponent","_interopRequireWildcard","_util","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","detectDirectedCycle","graphData","cycle","_a","nodes","dfsParentMap","unvisitedSet","visitingSet","visitedSet","forEach","node","id","callbacks","enter","currentNode","current","previousNode","previous","currentCycleNode","previousCycleNode","leave","allowTraversal","nextNode","next","keys","length","firsetUnVisitedKey","nodeIds","include","_b","allCycles","components","_i","components_1","component","root","rootId","stack","parent_1","used","Set","curNode","pop","curNodeId","neighbors","getNeighbors","edges","_loop_1","i","_c","neighborId","neighbor","find","push","cycleValid","cyclePath","p","size","findIndex","indexOf","index","add","path","blocked","B","idx2Node","node2Idx","unblock","thisNode","delete","n","clear","circuit","start","adjList","closed","nodeId","_loop_2","getMinComponentAdj","minCompIdx","minIdx","Infinity","comp","j","nodeIdx_1","filter","map","c","nodeIdx","subgraphNodes","sccs","detectStrongConnectComponents","scc","startNode","directed","_default"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/node_modules/@antv/algorithm/lib/detect-cycle.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\n\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\n\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\n\nvar _util = require(\"./util\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\n\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\n\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}