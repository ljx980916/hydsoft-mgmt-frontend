{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Layouts = exports.Layout = void 0;\nvar registy_1 = require(\"../registy\");\nvar grid_1 = require(\"./grid\");\nvar random_1 = require(\"./random\");\nvar force2_1 = require(\"./force2\");\nvar gForce_1 = require(\"./gForce\");\nvar force_1 = require(\"./force\");\nvar circular_1 = require(\"./circular\");\nvar dagre_1 = require(\"./dagre\");\nvar radial_1 = require(\"./radial\");\nvar concentric_1 = require(\"./concentric\");\nvar mds_1 = require(\"./mds\");\nvar fruchterman_1 = require(\"./fruchterman\");\nvar fruchterman_2 = require(\"./gpu/fruchterman\");\nvar gForce_2 = require(\"./gpu/gForce\");\nvar comboForce_1 = require(\"./comboForce\");\nvar comboCombined_1 = require(\"./comboCombined\");\nvar forceAtlas2_1 = require(\"./forceAtlas2\");\nvar er_1 = require(\"./er\");\nvar dagreCompound_1 = require(\"./dagreCompound\");\nvar util_1 = require(\"../util\");\nvar Layout = /** @class */function () {\n  function Layout(options) {\n    var layoutClass = (0, registy_1.getLayoutByName)(options.type);\n    this.layoutInstance = new layoutClass(options);\n  }\n  Layout.prototype.layout = function (data) {\n    return this.layoutInstance.layout(data);\n  };\n  Layout.prototype.updateCfg = function (cfg) {\n    this.layoutInstance.updateCfg(cfg);\n  };\n  Layout.prototype.init = function (data) {\n    this.correctLayers(data.nodes);\n    this.layoutInstance.init(data);\n  };\n  /**\n   * correcting the layers on the node data\n   * if min(layer) <= 0, layers should begin from abs(min(layer)) + 1\n   * @param nodes\n   * @returns\n   */\n  Layout.prototype.correctLayers = function (nodes) {\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return;\n    var minLayer = Infinity;\n    var hasLayerNodes = [];\n    nodes.forEach(function (node) {\n      if ((0, util_1.isString)(node.layer)) {\n        node.layer = parseInt(node.layer, 10);\n      }\n      // keep node.layer === undefined for TS problem\n      if (node.layer === undefined || isNaN(node.layer)) return;\n      hasLayerNodes.push(node);\n      if (node.layer < minLayer) minLayer = node.layer;\n    });\n    if (minLayer <= 0) {\n      var layerOffset_1 = Math.abs(minLayer) + 1;\n      // @ts-ignore\n      hasLayerNodes.forEach(function (node) {\n        return node.layer += layerOffset_1;\n      });\n    }\n  };\n  Layout.prototype.execute = function () {\n    this.layoutInstance.execute();\n  };\n  Layout.prototype.getDefaultCfg = function () {\n    return this.layoutInstance.getDefaultCfg();\n  };\n  Layout.prototype.destroy = function () {\n    return this.layoutInstance.destroy();\n  };\n  return Layout;\n}();\nexports.Layout = Layout;\n// FIXME\n// FOR G6\n// tslint:disable-next-line\nexports.Layouts = {\n  force: force_1.ForceLayout,\n  fruchterman: fruchterman_1.FruchtermanLayout,\n  forceAtlas2: forceAtlas2_1.ForceAtlas2Layout,\n  gForce: gForce_1.GForceLayout,\n  force2: force2_1.Force2Layout,\n  dagre: dagre_1.DagreLayout,\n  dagreCompound: dagreCompound_1.DagreCompoundLayout,\n  circular: circular_1.CircularLayout,\n  radial: radial_1.RadialLayout,\n  concentric: concentric_1.ConcentricLayout,\n  grid: grid_1.GridLayout,\n  mds: mds_1.MDSLayout,\n  comboForce: comboForce_1.ComboForceLayout,\n  comboCombined: comboCombined_1.ComboCombinedLayout,\n  random: random_1.RandomLayout,\n  'gForce-gpu': gForce_2.GForceGPULayout,\n  'fruchterman-gpu': fruchterman_2.FruchtermanGPULayout,\n  er: er_1.ERLayout\n};","map":{"version":3,"mappings":"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","names":["options","layoutClass","type","layoutInstance","Layout","data","layout","cfg","updateCfg","correctLayers","nodes","init","length","minLayer","Infinity","hasLayerNodes","forEach","node","layer","parseInt","undefined","isNaN","push","layerOffset_1","Math","abs","execute","getDefaultCfg","destroy","exports","force","force_1","fruchterman","fruchterman_1","forceAtlas2","forceAtlas2_1","gForce","gForce_1","force2","force2_1","dagre","dagre_1","dagreCompound","dagreCompound_1","circular","circular_1","radial","radial_1","concentric","concentric_1","grid","grid_1","mds","mds_1","comboForce","comboForce_1","comboCombined","comboCombined_1","random","random_1","gForce_2","fruchterman_2","er","er_1"],"sourceRoot":"","sources":["../../src/layout/layout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}