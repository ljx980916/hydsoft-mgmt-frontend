{"ast":null,"code":"\"use strict\";\n\n/**\n * @fileOverview concentric layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nrequire(\"core-js/modules/es.array.push.js\");\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConcentricLayout = void 0;\nvar util_1 = require(\"../util\");\nvar base_1 = require(\"./base\");\n/**\n * 同心圆布局\n */\nvar ConcentricLayout = /** @class */function (_super) {\n  __extends(ConcentricLayout, _super);\n  function ConcentricLayout(options) {\n    var _this = _super.call(this) || this;\n    _this.nodeSize = 30;\n    /** min spacing between outside of nodes (used for radius adjustment) */\n    _this.minNodeSpacing = 10;\n    /** same as minNodeSpacing. min spacing between outside of nodes (used for radius adjustment) */\n    _this.nodeSpacing = 10;\n    /** prevents node overlap, may overflow boundingBox if not enough space */\n    _this.preventOverlap = false;\n    /** whether levels have an equal radial distance betwen them, may cause bounding box overflow */\n    _this.equidistant = false;\n    /** where nodes start in radians */\n    _this.startAngle = 3 / 2 * Math.PI;\n    /** whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false) */\n    _this.clockwise = true;\n    /** 根据 sortBy 指定的属性进行排布，数值高的放在中心，如果是 sortBy 则会计算节点度数，度数最高的放在中心 */\n    _this.sortBy = \"degree\";\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    /** 迭代结束的回调函数 */\n    _this.onLayoutEnd = function () {};\n    _this.updateCfg(options);\n    return _this;\n  }\n  ConcentricLayout.prototype.getDefaultCfg = function () {\n    return {\n      nodeSize: 30,\n      minNodeSpacing: 10,\n      nodeSpacing: 10,\n      preventOverlap: false,\n      sweep: undefined,\n      equidistant: false,\n      startAngle: 3 / 2 * Math.PI,\n      clockwise: true,\n      maxLevelDiff: undefined,\n      sortBy: \"degree\"\n    };\n  };\n  /**\n   * 执行布局\n   */\n  ConcentricLayout.prototype.execute = function () {\n    var _a, _b;\n    var self = this;\n    var nodes = self.nodes,\n      edges = self.edges;\n    var n = nodes.length;\n    if (n === 0) {\n      (_a = self.onLayoutEnd) === null || _a === void 0 ? void 0 : _a.call(self);\n      return;\n    }\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    if (!self.center) {\n      self.center = [self.width / 2, self.height / 2];\n    }\n    var center = self.center;\n    if (n === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      (_b = self.onLayoutEnd) === null || _b === void 0 ? void 0 : _b.call(self);\n      return;\n    }\n    var nodeSize = self.nodeSize,\n      nodeSpacing = self.nodeSpacing;\n    var layoutNodes = [];\n    var maxNodeSize;\n    var maxNodeSpacing = 0;\n    if ((0, util_1.isArray)(nodeSize)) {\n      maxNodeSize = Math.max(nodeSize[0], nodeSize[1]);\n    } else {\n      maxNodeSize = nodeSize;\n    }\n    if ((0, util_1.isArray)(nodeSpacing)) {\n      maxNodeSpacing = Math.max(nodeSpacing[0], nodeSpacing[1]);\n    } else if ((0, util_1.isNumber)(nodeSpacing)) {\n      maxNodeSpacing = nodeSpacing;\n    }\n    nodes.forEach(function (node) {\n      layoutNodes.push(node);\n      var nodeSize = maxNodeSize;\n      if ((0, util_1.isArray)(node.size)) {\n        nodeSize = Math.max(node.size[0], node.size[1]);\n      } else if ((0, util_1.isNumber)(node.size)) {\n        nodeSize = node.size;\n      } else if ((0, util_1.isObject)(node.size)) {\n        nodeSize = Math.max(node.size.width, node.size.height);\n      }\n      maxNodeSize = Math.max(maxNodeSize, nodeSize);\n      if ((0, util_1.isFunction)(nodeSpacing)) {\n        maxNodeSpacing = Math.max(nodeSpacing(node), maxNodeSpacing);\n      }\n    });\n    self.clockwise = self.counterclockwise !== undefined ? !self.counterclockwise : self.clockwise;\n    // layout\n    var nodeMap = {};\n    var indexMap = {};\n    layoutNodes.forEach(function (node, i) {\n      nodeMap[node.id] = node;\n      indexMap[node.id] = i;\n    });\n    // get the node degrees\n    if (self.sortBy === \"degree\" || !(0, util_1.isString)(self.sortBy) || layoutNodes[0][self.sortBy] === undefined) {\n      self.sortBy = \"degree\";\n      if (!(0, util_1.isNumber)(nodes[0].degree)) {\n        var values_1 = (0, util_1.getDegree)(nodes.length, indexMap, edges);\n        layoutNodes.forEach(function (node, i) {\n          node.degree = values_1[i].all;\n        });\n      }\n    }\n    // sort nodes by value\n    layoutNodes.sort(function (n1, n2) {\n      return n2[self.sortBy] - n1[self.sortBy];\n    });\n    self.maxValueNode = layoutNodes[0];\n    self.maxLevelDiff = self.maxLevelDiff || self.maxValueNode[self.sortBy] / 4;\n    // put the values into levels\n    var levels = [[]];\n    var currentLevel = levels[0];\n    layoutNodes.forEach(function (node) {\n      if (currentLevel.length > 0) {\n        var diff = Math.abs(currentLevel[0][self.sortBy] - node[self.sortBy]);\n        if (self.maxLevelDiff && diff >= self.maxLevelDiff) {\n          currentLevel = [];\n          levels.push(currentLevel);\n        }\n      }\n      currentLevel.push(node);\n    });\n    // create positions for levels\n    var minDist = maxNodeSize + (maxNodeSpacing || self.minNodeSpacing); // min dist between nodes\n    if (!self.preventOverlap) {\n      // then strictly constrain to bb\n      var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;\n      var maxR = Math.min(self.width, self.height) / 2 - minDist;\n      var rStep = maxR / (levels.length + (firstLvlHasMulti ? 1 : 0));\n      minDist = Math.min(minDist, rStep);\n    }\n    // find the metrics for each level\n    var r = 0;\n    levels.forEach(function (level) {\n      var sweep = self.sweep;\n      if (sweep === undefined) {\n        sweep = 2 * Math.PI - 2 * Math.PI / level.length;\n      }\n      var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);\n      // calculate the radius\n      if (level.length > 1 && self.preventOverlap) {\n        // but only if more than one node (can't overlap)\n        var dcos = Math.cos(dTheta) - Math.cos(0);\n        var dsin = Math.sin(dTheta) - Math.sin(0);\n        var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n        r = Math.max(rMin, r);\n      }\n      level.r = r;\n      r += minDist;\n    });\n    if (self.equidistant) {\n      var rDeltaMax_1 = 0;\n      var rr_1 = 0;\n      for (var i = 0; i < levels.length; i++) {\n        var level = levels[i];\n        var rDelta = level.r - rr_1;\n        rDeltaMax_1 = Math.max(rDeltaMax_1, rDelta);\n      }\n      rr_1 = 0;\n      levels.forEach(function (level, i) {\n        if (i === 0) {\n          rr_1 = level.r;\n        }\n        level.r = rr_1;\n        rr_1 += rDeltaMax_1;\n      });\n    }\n    // calculate the node positions\n    levels.forEach(function (level) {\n      var dTheta = level.dTheta;\n      var rr = level.r;\n      level.forEach(function (node, j) {\n        var theta = self.startAngle + (self.clockwise ? 1 : -1) * dTheta * j;\n        node.x = center[0] + rr * Math.cos(theta);\n        node.y = center[1] + rr * Math.sin(theta);\n      });\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n  ConcentricLayout.prototype.getType = function () {\n    return \"concentric\";\n  };\n  return ConcentricLayout;\n}(base_1.Base);\nexports.ConcentricLayout = ConcentricLayout;","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","Math","PI","updateCfg","ConcentricLayout","nodeSize","minNodeSpacing","nodeSpacing","preventOverlap","sweep","undefined","equidistant","startAngle","clockwise","maxLevelDiff","sortBy","self","edges","n","nodes","length","onLayoutEnd","width","window","innerWidth","height","innerHeight","center","x","y","layoutNodes","maxNodeSize","maxNodeSpacing","max","forEach","node","push","size","counterclockwise","nodeMap","indexMap","i","id","degree","values_1","all","sort","n1","n2","maxValueNode","levels","currentLevel","diff","abs","minDist","firstLvlHasMulti","maxR","min","rStep","r","level","dTheta","dcos","cos","dsin","sin","rMin","sqrt","rDeltaMax_1","rr_1","rDelta","rr","j","theta","base_1","exports"],"sourceRoot":"","sources":["../../src/layout/concentric.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}