{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\nvar ShapeBase = /** @class */function (_super) {\n  __extends(ShapeBase, _super);\n  function ShapeBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    // 设置默认值\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  };\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  ShapeBase.prototype.calculateBBox = function () {\n    var type = this.get('type');\n    var lineWidth = this.getHitLineWidth();\n    // const attrs = this.attr();\n    var bboxMethod = getBBoxMethod(type);\n    var box = bboxMethod(this);\n    var halfLineWidth = lineWidth / 2;\n    var minX = box.x - halfLineWidth;\n    var minY = box.y - halfLineWidth;\n    var maxX = box.x + box.width + halfLineWidth;\n    var maxY = box.y + box.height + halfLineWidth;\n    return {\n      x: minX,\n      minX: minX,\n      y: minY,\n      minY: minY,\n      width: box.width + lineWidth,\n      height: box.height + lineWidth,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n  ShapeBase.prototype.isFill = function () {\n    return !!this.attrs['fill'] || this.isClipShape();\n  };\n  ShapeBase.prototype.isStroke = function () {\n    return !!this.attrs['stroke'];\n  };\n  // 同 shape 中的方法重复了\n  ShapeBase.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save();\n      // 将 clip 的属性挂载到 context 上\n      applyAttrsToContext(context, clip);\n      // 绘制 clip 路径\n      clip.createPath(context);\n      context.restore();\n      // 裁剪\n      context.clip();\n      clip._afterDraw();\n    }\n  };\n  // 绘制图形时需要考虑 region 限制\n  ShapeBase.prototype.draw = function (context, region) {\n    var clip = this.cfg.clipShape;\n    // 如果指定了 region，同时不允许刷新时，直接返回\n    if (region) {\n      if (this.cfg.refresh === false) {\n        // this._afterDraw();\n        this.set('hasChanged', false);\n        return;\n      }\n      // 是否相交需要考虑 clip 的包围盒\n      var bbox = this.getCanvasBBox();\n      if (!intersectRect(region, bbox)) {\n        // 图形的包围盒与重绘区域不相交时，也需要清除标记\n        this.set('hasChanged', false);\n        // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n        // 1. 之前图形在视窗内，但是现在不再视窗内\n        // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n        if (this.cfg.isInView) {\n          this._afterDraw();\n        }\n        return;\n      }\n    }\n    context.save();\n    // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n    applyAttrsToContext(context, this);\n    this._applyClip(context, clip);\n    this.drawPath(context);\n    context.restore();\n    this._afterDraw();\n  };\n  ShapeBase.prototype.getCanvasViewBox = function () {\n    var canvas = this.cfg.canvas;\n    if (canvas) {\n      // @ts-ignore\n      return canvas.getViewRange();\n    }\n    return null;\n  };\n  ShapeBase.prototype.cacheCanvasBBox = function () {\n    var canvasBBox = this.getCanvasViewBox();\n    // 绘制的时候缓存包围盒\n    if (canvasBBox) {\n      var bbox = this.getCanvasBBox();\n      var isInView = intersectRect(bbox, canvasBBox);\n      this.set('isInView', isInView);\n      // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n      // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n      // 父元素 cacheCanvasBBox 计算的时候也不计算\n      if (isInView) {\n        this.set('cacheCanvasBBox', bbox);\n      } else {\n        this.set('cacheCanvasBBox', null);\n      }\n    }\n  };\n  ShapeBase.prototype._afterDraw = function () {\n    this.cacheCanvasBBox();\n    // 绘制后消除标记\n    this.set('hasChanged', false);\n    this.set('refresh', null);\n  };\n  ShapeBase.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('isInView', null);\n    this.set('hasChanged', false);\n  };\n  /**\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.drawPath = function (context) {\n    this.createPath(context);\n    this.strokeAndFill(context);\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 填充图形\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.fill = function (context) {\n    context.fill();\n  };\n  /**\n   * @protected\n   * 绘制图形边框\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.stroke = function (context) {\n    context.stroke();\n  };\n  // 绘制或者填充\n  ShapeBase.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n      lineWidth = _a.lineWidth,\n      opacity = _a.opacity,\n      strokeOpacity = _a.strokeOpacity,\n      fillOpacity = _a.fillOpacity;\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n        this.stroke(context);\n      }\n    }\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.createPath = function (context) {};\n  /**\n   * 绘制完成 path 后的操作\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.afterDrawPath = function (context) {};\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    // return HitUtil.isHitShape(this, refX, refY);\n    var isStroke = this.isStroke();\n    var isFill = this.isFill();\n    var lineWidth = this.getHitLineWidth();\n    return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n  };\n  // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n  ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n  ShapeBase.prototype.getHitLineWidth = function () {\n    if (!this.isStroke()) {\n      return 0;\n    }\n    var attrs = this.attrs;\n    return attrs['lineWidth'] + attrs['lineAppendWidth'];\n  };\n  return ShapeBase;\n}(AbstractShape);\nexport default ShapeBase;","map":{"version":3,"mappings":"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","names":["AbstractShape","isNil","intersectRect","applyAttrsToContext","refreshElement","getBBoxMethod","Shape","Group","__extends","ShapeBase","attrs","_super","getDefaultAttrs","lineWidth","lineAppendWidth","strokeOpacity","fillOpacity","changeType","type","get","getHitLineWidth","bboxMethod","box","halfLineWidth","minX","x","minY","y","maxX","width","maxY","height","isClipShape","context","clip","save","createPath","restore","_afterDraw","region","cfg","clipShape","refresh","set","bbox","getCanvasBBox","isInView","_applyClip","drawPath","canvas","getViewRange","canvasBBox","getCanvasViewBox","cacheCanvasBBox","strokeAndFill","afterDrawPath","fill","stroke","opacity","isFill","globalAlpha","isStroke","refX","refY","isInStrokeOrPath"],"sourceRoot":"","sources":["../../src/shape/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}