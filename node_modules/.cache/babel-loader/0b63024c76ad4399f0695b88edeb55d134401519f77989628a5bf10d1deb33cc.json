{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject, result } from '../util/util.mjs';\nfunction toArray(obj) {\n  if (!obj) return [];\n  if (Array.isArray(obj)) return obj;\n  return [obj];\n}\nexport const HighlighterView = mvc.View.extend({\n  tagName: 'g',\n  svgElement: true,\n  className: 'highlight',\n  HIGHLIGHT_FLAG: 1,\n  UPDATE_PRIORITY: 3,\n  DETACHABLE: false,\n  UPDATABLE: true,\n  MOUNTABLE: true,\n  cellView: null,\n  nodeSelector: null,\n  node: null,\n  updateRequested: false,\n  postponedUpdate: false,\n  transformGroup: null,\n  detachedTransformGroup: null,\n  requestUpdate(cellView, nodeSelector) {\n    const {\n      paper\n    } = cellView;\n    this.cellView = cellView;\n    this.nodeSelector = nodeSelector;\n    if (paper) {\n      this.updateRequested = true;\n      paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n    }\n  },\n  confirmUpdate() {\n    // The cellView is now rendered/updated since it has a higher update priority.\n    this.updateRequested = false;\n    const {\n      cellView,\n      nodeSelector\n    } = this;\n    if (!cellView.isMounted()) {\n      this.postponedUpdate = true;\n      return 0;\n    }\n    this.update(cellView, nodeSelector);\n    this.mount();\n    this.transform();\n    return 0;\n  },\n  findNode(cellView, nodeSelector = null) {\n    let el;\n    if (typeof nodeSelector === 'string') {\n      [el] = cellView.findBySelector(nodeSelector);\n    } else if (isPlainObject(nodeSelector)) {\n      const isLink = cellView.model.isLink();\n      const {\n        label = null,\n        port,\n        selector\n      } = nodeSelector;\n      if (isLink && label !== null) {\n        // Link Label Selector\n        el = cellView.findLabelNode(label, selector);\n      } else if (!isLink && port) {\n        // Element Port Selector\n        el = cellView.findPortNode(port, selector);\n      } else {\n        // Cell Selector\n        [el] = cellView.findBySelector(selector);\n      }\n    } else if (nodeSelector) {\n      el = V.toNode(nodeSelector);\n      if (!(el instanceof SVGElement)) el = null;\n    }\n    return el ? el : null;\n  },\n  getNodeMatrix(cellView, node) {\n    const {\n      options\n    } = this;\n    const {\n      layer\n    } = options;\n    const {\n      rotatableNode\n    } = cellView;\n    const nodeMatrix = cellView.getNodeMatrix(node);\n    if (rotatableNode) {\n      if (layer) {\n        if (rotatableNode.contains(node)) {\n          return nodeMatrix;\n        }\n        // The node is outside of the rotatable group.\n        // Compensate the rotation set by transformGroup.\n        return cellView.getRootRotateMatrix().inverse().multiply(nodeMatrix);\n      } else {\n        return cellView.getNodeRotateMatrix(node).multiply(nodeMatrix);\n      }\n    }\n    return nodeMatrix;\n  },\n  mount() {\n    const {\n      MOUNTABLE,\n      cellView,\n      el,\n      options,\n      transformGroup,\n      detachedTransformGroup,\n      postponedUpdate,\n      nodeSelector\n    } = this;\n    if (!MOUNTABLE || transformGroup) return;\n    if (postponedUpdate) {\n      // The cellView was not mounted when the update was requested.\n      // The update was postponed until the cellView is mounted.\n      this.update(cellView, nodeSelector);\n      this.transform();\n      return;\n    }\n    const {\n      vel: cellViewRoot,\n      paper\n    } = cellView;\n    const {\n      layer: layerName\n    } = options;\n    if (layerName) {\n      let vGroup;\n      if (detachedTransformGroup) {\n        vGroup = detachedTransformGroup;\n        this.detachedTransformGroup = null;\n      } else {\n        vGroup = V('g').addClass('highlight-transform').append(el);\n      }\n      this.transformGroup = vGroup;\n      paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);\n    } else {\n      // TODO: prepend vs append\n      if (!el.parentNode || el.nextSibling) {\n        // Not appended yet or not the last child\n        cellViewRoot.append(el);\n      }\n    }\n  },\n  unmount() {\n    const {\n      MOUNTABLE,\n      transformGroup,\n      vel\n    } = this;\n    if (!MOUNTABLE) return;\n    if (transformGroup) {\n      this.transformGroup = null;\n      this.detachedTransformGroup = transformGroup;\n      transformGroup.remove();\n    } else {\n      vel.remove();\n    }\n  },\n  transform() {\n    const {\n      transformGroup,\n      cellView,\n      updateRequested\n    } = this;\n    if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n    const translateMatrix = cellView.getRootTranslateMatrix();\n    const rotateMatrix = cellView.getRootRotateMatrix();\n    const transformMatrix = translateMatrix.multiply(rotateMatrix);\n    transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n  },\n  update() {\n    const {\n      node: prevNode,\n      cellView,\n      nodeSelector,\n      updateRequested,\n      id\n    } = this;\n    if (updateRequested) return;\n    this.postponedUpdate = false;\n    const node = this.node = this.findNode(cellView, nodeSelector);\n    if (prevNode) {\n      this.unhighlight(cellView, prevNode);\n    }\n    if (node) {\n      this.highlight(cellView, node);\n      this.mount();\n    } else {\n      this.unmount();\n      cellView.notify('cell:highlight:invalid', id, this);\n    }\n  },\n  onRemove() {\n    const {\n      node,\n      cellView,\n      id,\n      constructor\n    } = this;\n    if (node) {\n      this.unhighlight(cellView, node);\n    }\n    this.unmount();\n    constructor._removeRef(cellView, id);\n  },\n  highlight(_cellView, _node) {\n    // to be overridden\n  },\n  unhighlight(_cellView, _node) {\n    // to be overridden\n  },\n  // Update Attributes\n\n  listenToUpdateAttributes(cellView) {\n    const attributes = result(this, 'UPDATE_ATTRIBUTES');\n    if (!Array.isArray(attributes) || attributes.length === 0) return;\n    this.listenTo(cellView.model, 'change', this.onCellAttributeChange);\n  },\n  onCellAttributeChange() {\n    const {\n      cellView\n    } = this;\n    if (!cellView) return;\n    const {\n      model,\n      paper\n    } = cellView;\n    const attributes = result(this, 'UPDATE_ATTRIBUTES');\n    if (!attributes.some(attribute => model.hasChanged(attribute))) return;\n    paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n  }\n}, {\n  _views: {},\n  // Used internally by CellView highlight()\n  highlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.add(cellView, node, id, opt);\n  },\n  // Used internally by CellView unhighlight()\n  unhighlight: function (cellView, node, opt) {\n    const id = this.uniqueId(node, opt);\n    this.remove(cellView, id);\n  },\n  get(cellView, id = null) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n    if (id === null) {\n      // all highlighters\n      const views = [];\n      if (!refs) return views;\n      for (let hid in refs) {\n        const ref = refs[hid];\n        if (ref instanceof this) {\n          views.push(ref);\n        }\n      }\n      return views;\n    } else {\n      // single highlighter\n      if (!refs) return null;\n      if (id in refs) {\n        const ref = refs[id];\n        if (ref instanceof this) return ref;\n      }\n      return null;\n    }\n  },\n  add(cellView, nodeSelector, id, opt = {}) {\n    if (!id) throw new Error('dia.HighlighterView: An ID required.');\n    // Search the existing view amongst all the highlighters\n    const previousView = HighlighterView.get(cellView, id);\n    if (previousView) previousView.remove();\n    const view = new this(opt);\n    view.id = id;\n    this._addRef(cellView, id, view);\n    view.requestUpdate(cellView, nodeSelector);\n    view.listenToUpdateAttributes(cellView);\n    return view;\n  },\n  _addRef(cellView, id, view) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    let refs = _views[cid];\n    if (!refs) refs = _views[cid] = {};\n    refs[id] = view;\n  },\n  _removeRef(cellView, id) {\n    const {\n      cid\n    } = cellView;\n    const {\n      _views\n    } = this;\n    const refs = _views[cid];\n    if (!refs) return;\n    if (id) delete refs[id];\n    for (let _ in refs) return;\n    delete _views[cid];\n  },\n  remove(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      view.remove();\n    });\n  },\n  removeAll(paper, id = null) {\n    const {\n      _views\n    } = this;\n    for (let cid in _views) {\n      for (let hid in _views[cid]) {\n        const view = _views[cid][hid];\n        if (view.cellView.paper === paper && view instanceof this && (id === null || hid === id)) {\n          view.remove();\n        }\n      }\n    }\n  },\n  update(cellView, id = null, dirty = false) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (dirty || view.UPDATABLE) view.update();\n    });\n  },\n  transform(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => {\n      if (view.UPDATABLE) view.transform();\n    });\n  },\n  unmount(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => view.unmount());\n  },\n  mount(cellView, id = null) {\n    toArray(this.get(cellView, id)).forEach(view => view.mount());\n  },\n  uniqueId(node, opt = '') {\n    return V.ensureId(node) + JSON.stringify(opt);\n  }\n});","map":{"version":3,"names":["mvc","V","isPlainObject","result","toArray","obj","Array","isArray","HighlighterView","View","extend","tagName","svgElement","className","HIGHLIGHT_FLAG","UPDATE_PRIORITY","DETACHABLE","UPDATABLE","MOUNTABLE","cellView","nodeSelector","node","updateRequested","postponedUpdate","transformGroup","detachedTransformGroup","requestUpdate","paper","requestViewUpdate","confirmUpdate","isMounted","update","mount","transform","findNode","el","findBySelector","isLink","model","label","port","selector","findLabelNode","findPortNode","toNode","SVGElement","getNodeMatrix","options","layer","rotatableNode","nodeMatrix","contains","getRootRotateMatrix","inverse","multiply","getNodeRotateMatrix","vel","cellViewRoot","layerName","vGroup","addClass","append","getLayerView","insertSortedNode","z","parentNode","nextSibling","unmount","remove","translateMatrix","getRootTranslateMatrix","rotateMatrix","transformMatrix","attr","matrixToTransformString","prevNode","id","unhighlight","highlight","notify","onRemove","constructor","_removeRef","_cellView","_node","listenToUpdateAttributes","attributes","length","listenTo","onCellAttributeChange","some","attribute","hasChanged","_views","opt","uniqueId","add","get","cid","refs","views","hid","ref","push","Error","previousView","view","_addRef","_","forEach","removeAll","dirty","ensureId","JSON","stringify"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-mgmt-frontend/node_modules/jointjs/src/dia/HighlighterView.mjs"],"sourcesContent":["import * as mvc from '../mvc/index.mjs';\nimport V from '../V/index.mjs';\nimport { isPlainObject, result } from '../util/util.mjs';\n\nfunction toArray(obj) {\n    if (!obj) return [];\n    if (Array.isArray(obj)) return obj;\n    return [obj];\n}\n\nexport const HighlighterView = mvc.View.extend({\n\n    tagName: 'g',\n    svgElement: true,\n    className: 'highlight',\n\n    HIGHLIGHT_FLAG: 1,\n    UPDATE_PRIORITY: 3,\n    DETACHABLE: false,\n    UPDATABLE: true,\n    MOUNTABLE: true,\n\n    cellView: null,\n    nodeSelector: null,\n    node: null,\n    updateRequested: false,\n    postponedUpdate: false,\n    transformGroup: null,\n    detachedTransformGroup: null,\n\n    requestUpdate(cellView, nodeSelector) {\n        const { paper } = cellView;\n        this.cellView = cellView;\n        this.nodeSelector = nodeSelector;\n        if (paper) {\n            this.updateRequested = true;\n            paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n        }\n    },\n\n    confirmUpdate() {\n        // The cellView is now rendered/updated since it has a higher update priority.\n        this.updateRequested = false;\n        const { cellView, nodeSelector } = this;\n        if (!cellView.isMounted()) {\n            this.postponedUpdate = true;\n            return 0;\n        }\n        this.update(cellView, nodeSelector);\n        this.mount();\n        this.transform();\n        return 0;\n    },\n\n    findNode(cellView, nodeSelector = null) {\n        let el;\n        if (typeof nodeSelector === 'string') {\n            [el] = cellView.findBySelector(nodeSelector);\n        } else if (isPlainObject(nodeSelector)) {\n            const isLink = cellView.model.isLink();\n            const { label = null, port, selector } = nodeSelector;\n            if (isLink && label !== null) {\n                // Link Label Selector\n                el = cellView.findLabelNode(label, selector);\n            } else if (!isLink && port) {\n                // Element Port Selector\n                el = cellView.findPortNode(port, selector);\n            } else {\n                // Cell Selector\n                [el] = cellView.findBySelector(selector);\n            }\n        } else if (nodeSelector) {\n            el = V.toNode(nodeSelector);\n            if (!(el instanceof SVGElement)) el = null;\n        }\n        return el ? el : null;\n    },\n\n    getNodeMatrix(cellView, node) {\n        const { options } = this;\n        const { layer } = options;\n        const { rotatableNode } = cellView;\n        const nodeMatrix = cellView.getNodeMatrix(node);\n        if (rotatableNode) {\n            if (layer) {\n                if (rotatableNode.contains(node)) {\n                    return nodeMatrix;\n                }\n                // The node is outside of the rotatable group.\n                // Compensate the rotation set by transformGroup.\n                return cellView.getRootRotateMatrix().inverse().multiply(nodeMatrix);\n            } else {\n                return cellView.getNodeRotateMatrix(node).multiply(nodeMatrix);\n            }\n        }\n        return nodeMatrix;\n    },\n\n    mount() {\n        const { MOUNTABLE, cellView, el, options, transformGroup, detachedTransformGroup, postponedUpdate, nodeSelector } = this;\n        if (!MOUNTABLE || transformGroup) return;\n        if (postponedUpdate) {\n            // The cellView was not mounted when the update was requested.\n            // The update was postponed until the cellView is mounted.\n            this.update(cellView, nodeSelector);\n            this.transform();\n            return;\n        }\n        const { vel: cellViewRoot, paper } = cellView;\n        const { layer: layerName } = options;\n        if (layerName) {\n            let vGroup;\n            if (detachedTransformGroup) {\n                vGroup = detachedTransformGroup;\n                this.detachedTransformGroup = null;\n            } else {\n                vGroup = V('g').addClass('highlight-transform').append(el);\n            }\n            this.transformGroup = vGroup;\n            paper.getLayerView(layerName).insertSortedNode(vGroup.node, options.z);\n        } else {\n            // TODO: prepend vs append\n            if (!el.parentNode || el.nextSibling) {\n                // Not appended yet or not the last child\n                cellViewRoot.append(el);\n            }\n        }\n    },\n\n    unmount() {\n        const { MOUNTABLE, transformGroup, vel } = this;\n        if (!MOUNTABLE) return;\n        if (transformGroup) {\n            this.transformGroup = null;\n            this.detachedTransformGroup = transformGroup;\n            transformGroup.remove();\n        } else {\n            vel.remove();\n        }\n    },\n\n    transform() {\n        const { transformGroup, cellView, updateRequested } = this;\n        if (!transformGroup || cellView.model.isLink() || updateRequested) return;\n        const translateMatrix = cellView.getRootTranslateMatrix();\n        const rotateMatrix = cellView.getRootRotateMatrix();\n        const transformMatrix = translateMatrix.multiply(rotateMatrix);\n        transformGroup.attr('transform', V.matrixToTransformString(transformMatrix));\n    },\n\n    update() {\n        const { node: prevNode, cellView, nodeSelector, updateRequested, id } = this;\n        if (updateRequested) return;\n        this.postponedUpdate = false;\n        const node = this.node = this.findNode(cellView, nodeSelector);\n        if (prevNode) {\n            this.unhighlight(cellView, prevNode);\n        }\n        if (node) {\n            this.highlight(cellView, node);\n            this.mount();\n        } else {\n            this.unmount();\n            cellView.notify('cell:highlight:invalid', id, this);\n        }\n    },\n\n    onRemove() {\n        const { node, cellView, id, constructor } = this;\n        if (node) {\n            this.unhighlight(cellView, node);\n        }\n        this.unmount();\n        constructor._removeRef(cellView, id);\n    },\n\n    highlight(_cellView, _node) {\n        // to be overridden\n    },\n\n    unhighlight(_cellView, _node) {\n        // to be overridden\n    },\n\n    // Update Attributes\n\n    listenToUpdateAttributes(cellView) {\n        const attributes = result(this, 'UPDATE_ATTRIBUTES');\n        if (!Array.isArray(attributes) || attributes.length === 0) return;\n        this.listenTo(cellView.model, 'change', this.onCellAttributeChange);\n    },\n\n    onCellAttributeChange() {\n        const { cellView } = this;\n        if (!cellView) return;\n        const { model, paper } = cellView;\n        const attributes = result(this, 'UPDATE_ATTRIBUTES');\n        if (!attributes.some(attribute => model.hasChanged(attribute))) return;\n        paper.requestViewUpdate(this, this.HIGHLIGHT_FLAG, this.UPDATE_PRIORITY);\n    }\n\n}, {\n\n    _views: {},\n\n    // Used internally by CellView highlight()\n    highlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.add(cellView, node, id, opt);\n    },\n\n    // Used internally by CellView unhighlight()\n    unhighlight: function(cellView, node, opt) {\n        const id = this.uniqueId(node, opt);\n        this.remove(cellView, id);\n    },\n\n    get(cellView, id = null) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (id === null) {\n            // all highlighters\n            const views = [];\n            if (!refs) return views;\n            for (let hid in refs) {\n                const ref = refs[hid];\n                if (ref instanceof this) {\n                    views.push(ref);\n                }\n            }\n            return views;\n        } else {\n            // single highlighter\n            if (!refs) return null;\n            if (id in refs) {\n                const ref = refs[id];\n                if (ref instanceof this) return ref;\n            }\n            return null;\n        }\n    },\n\n    add(cellView, nodeSelector, id, opt = {}) {\n        if (!id) throw new Error('dia.HighlighterView: An ID required.');\n        // Search the existing view amongst all the highlighters\n        const previousView = HighlighterView.get(cellView, id);\n        if (previousView) previousView.remove();\n        const view = new this(opt);\n        view.id = id;\n        this._addRef(cellView, id, view);\n        view.requestUpdate(cellView, nodeSelector);\n        view.listenToUpdateAttributes(cellView);\n        return view;\n    },\n\n    _addRef(cellView, id, view) {\n        const { cid } = cellView;\n        const { _views } = this;\n        let refs = _views[cid];\n        if (!refs) refs = _views[cid] = {};\n        refs[id] = view;\n    },\n\n    _removeRef(cellView, id) {\n        const { cid } = cellView;\n        const { _views } = this;\n        const refs = _views[cid];\n        if (!refs) return;\n        if (id) delete refs[id];\n        for (let _ in refs) return;\n        delete _views[cid];\n    },\n\n    remove(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            view.remove();\n        });\n    },\n\n    removeAll(paper, id = null) {\n        const { _views } = this;\n\n        for (let cid in _views) {\n            for (let hid in _views[cid]) {\n                const view = _views[cid][hid];\n\n                if (view.cellView.paper === paper && view instanceof this && (id === null || hid === id)) {\n                    view.remove();\n                }\n            }\n        }\n    },\n\n    update(cellView, id = null, dirty = false) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (dirty || view.UPDATABLE) view.update();\n        });\n    },\n\n    transform(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => {\n            if (view.UPDATABLE) view.transform();\n        });\n    },\n\n    unmount(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => view.unmount());\n    },\n\n    mount(cellView, id = null) {\n        toArray(this.get(cellView, id)).forEach(view => view.mount());\n    },\n\n    uniqueId(node, opt = '') {\n        return V.ensureId(node) + JSON.stringify(opt);\n    }\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}