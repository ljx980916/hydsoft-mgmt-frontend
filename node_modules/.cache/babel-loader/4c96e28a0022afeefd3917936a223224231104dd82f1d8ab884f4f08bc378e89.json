{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from \"vue\";\nconst useSpan = ({\n  spanMethod,\n  data,\n  columns\n}) => {\n  const flattenTableSpan = (tableData, span) => {\n    tableData == null ? void 0 : tableData.forEach((record, rowIndex) => {\n      var _a;\n      if (record.hasSubtree && ((_a = record.children) == null ? void 0 : _a.length)) {\n        flattenTableSpan(record.children || [], span);\n      }\n      columns.value.forEach((column, columnIndex) => {\n        var _a2, _b;\n        const {\n          rowspan = 1,\n          colspan = 1\n        } = (_b = (_a2 = spanMethod.value) == null ? void 0 : _a2.call(spanMethod, {\n          record: record.raw,\n          column,\n          rowIndex,\n          columnIndex\n        })) != null ? _b : {};\n        if (rowspan > 1 || colspan > 1) {\n          span[`${rowIndex}-${columnIndex}-${record.key}`] = [rowspan, colspan];\n          Array.from({\n            length: rowspan\n          }).forEach((_, r) => {\n            const key = tableData == null ? void 0 : tableData[rowIndex + r].key;\n            Array.from({\n              length: colspan\n            }).forEach((_2, c) => {\n              if (`${rowIndex}-${columnIndex}-${record.key}` !== `${rowIndex + r}-${columnIndex + c}-${key}`) {\n                spanzero.value[`${rowIndex + r}-${columnIndex + c}-${key}`] = [0, 0];\n              }\n            });\n          });\n        }\n      });\n    });\n  };\n  let spanzero = ref({});\n  const tableSpan = computed(() => {\n    const span = {};\n    spanzero.value = {};\n    if (spanMethod.value) {\n      flattenTableSpan(data.value, span);\n    }\n    return span;\n  });\n  const removedCells = computed(() => {\n    const data2 = [];\n    for (const indexKey of Object.keys(spanzero.value)) {\n      data2.push(indexKey);\n    }\n    return data2;\n  });\n  return {\n    tableSpan,\n    removedCells\n  };\n};\nexport { useSpan };","map":{"version":3,"names":["ref","computed","useSpan","spanMethod","data","columns","flattenTableSpan","tableData","span","forEach","record","rowIndex","_a","hasSubtree","children","length","value","column","columnIndex","_a2","_b","rowspan","colspan","call","raw","key","Array","from","_","r","_2","c","spanzero","tableSpan","removedCells","data2","indexKey","Object","keys","push"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/node_modules/@arco-design/web-vue/es/table/hooks/use-span.js"],"sourcesContent":["import { ref, computed } from \"vue\";\nconst useSpan = ({\n  spanMethod,\n  data,\n  columns\n}) => {\n  const flattenTableSpan = (tableData, span) => {\n    tableData == null ? void 0 : tableData.forEach((record, rowIndex) => {\n      var _a;\n      if (record.hasSubtree && ((_a = record.children) == null ? void 0 : _a.length)) {\n        flattenTableSpan(record.children || [], span);\n      }\n      columns.value.forEach((column, columnIndex) => {\n        var _a2, _b;\n        const { rowspan = 1, colspan = 1 } = (_b = (_a2 = spanMethod.value) == null ? void 0 : _a2.call(spanMethod, {\n          record: record.raw,\n          column,\n          rowIndex,\n          columnIndex\n        })) != null ? _b : {};\n        if (rowspan > 1 || colspan > 1) {\n          span[`${rowIndex}-${columnIndex}-${record.key}`] = [rowspan, colspan];\n          Array.from({ length: rowspan }).forEach((_, r) => {\n            const key = tableData == null ? void 0 : tableData[rowIndex + r].key;\n            Array.from({ length: colspan }).forEach((_2, c) => {\n              if (`${rowIndex}-${columnIndex}-${record.key}` !== `${rowIndex + r}-${columnIndex + c}-${key}`) {\n                spanzero.value[`${rowIndex + r}-${columnIndex + c}-${key}`] = [\n                  0,\n                  0\n                ];\n              }\n            });\n          });\n        }\n      });\n    });\n  };\n  let spanzero = ref({});\n  const tableSpan = computed(() => {\n    const span = {};\n    spanzero.value = {};\n    if (spanMethod.value) {\n      flattenTableSpan(data.value, span);\n    }\n    return span;\n  });\n  const removedCells = computed(() => {\n    const data2 = [];\n    for (const indexKey of Object.keys(spanzero.value)) {\n      data2.push(indexKey);\n    }\n    return data2;\n  });\n  return {\n    tableSpan,\n    removedCells\n  };\n};\nexport { useSpan };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}