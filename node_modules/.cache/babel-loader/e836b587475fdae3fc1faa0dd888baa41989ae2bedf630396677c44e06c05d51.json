{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-8f8b2a42\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"defaultPadding relative\",\n  ref: \"treeContainerRef\"\n};\nconst _hoisted_2 = {\n  class: \"treeBox\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"tree-org-node__text node-label\"\n};\nconst _hoisted_5 = {\n  class: \"m-b-20\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"BG筛选 :   \", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"展开至 :   \", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_radio = _resolveComponent(\"a-radio\");\n  const _component_a_radio_group = _resolveComponent(\"a-radio-group\");\n  const _component_vue3_tree_org = _resolveComponent(\"vue3-tree-org\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", {\n    class: \"radio-group-absolute\",\n    style: _normalizeStyle({\n      right: $setup.currentPage === 'tree' ? $setup.currentSYS === 'mac' ? '19px' : '17px' : '30px'\n    })\n  }, [_withDirectives(_createVNode(_component_a_radio_group, {\n    type: \"button\",\n    \"model-value\": $setup.currentPage,\n    \"onUpdate:model-value\": _cache[0] || (_cache[0] = $event => $setup.currentPage = $event),\n    onChange: $setup.handleRadioChange\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_radio, {\n      value: \"tree\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"树状\")]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_a_radio, {\n      value: \"list\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"列表\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model-value\"]), [[_vShow, $setup.sourceData.length]])], 4 /* STYLE */), _withDirectives(_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_vue3_tree_org, {\n    data: $setup.depTreeInfo.data,\n    collapsable: false,\n    horizontal: false,\n    scalable: false,\n    draggable: false,\n    \"define-menus\": null,\n    \"node-draggable\": false,\n    \"default-expand-level\": Infinity,\n    \"label-class-name\": $setup.labelClassNameFn,\n    toolBar: {\n      scale: false,\n      restore: false,\n      expand: false,\n      zoom: false,\n      fullscreen: false\n    }\n  }, {\n    default: _withCtx(({\n      node\n    }) => [node.$$data.isSubdivision ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode($setup[\"IndentedTree\"], {\n      treeData: $setup.sourceData.filter(item => item.deptName === node.$$data.dept)[0],\n      nodeName: \"deptName\",\n      width: $setup.depTreeInfo.width,\n      scale: $setup.depTreeInfo.scale,\n      class: \"treeComponent\"\n    }, null, 8 /* PROPS */, [\"treeData\", \"width\", \"scale\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString(node.label), 1 /* TEXT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"])], 512 /* NEED_PATCH */), [[_vShow, $setup.currentPage === 'tree']]), _withDirectives(_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createVNode(_component_a_radio_group, {\n    type: \"button\",\n    class: \"m-r-70\",\n    \"model-value\": $setup.listTabs,\n    \"onUpdate:model-value\": _cache[1] || (_cache[1] = $event => $setup.listTabs = $event),\n    onChange: $setup.handleListTabsChange\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_radio, {\n      value: \"all\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"全部\")]),\n      _: 1 /* STABLE */\n    }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.sourceData, (item, i) => {\n      return _openBlock(), _createBlock(_component_a_radio, {\n        value: item.deptName\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(item.deptName), 1 /* TEXT */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"value\"]);\n    }), 256 /* UNKEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model-value\"]), _hoisted_7, _createVNode(_component_a_radio_group, {\n    type: \"button\",\n    \"model-value\": $setup.expandTabs,\n    \"onUpdate:model-value\": _cache[2] || (_cache[2] = $event => $setup.expandTabs = $event),\n    onChange: $setup.handleExpandTabsChange\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_radio, {\n      value: \"level1\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"一级部门\")]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_a_radio, {\n      value: \"level2\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"二级部门\")]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_a_radio, {\n      value: \"all\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"末级部门\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"model-value\"])]), _createVNode(_component_a_table, {\n    columns: $setup.tableInfo.columns,\n    data: $setup.tableInfo.data,\n    bordered: {\n      cell: true\n    },\n    \"column-resizable\": \"\",\n    scroll: {\n      maxHeight: $setup.tableInfo.maxHeight\n    },\n    scrollbar: false,\n    pagination: false,\n    \"expanded-keys\": $setup.tableInfo.defaultExpandedKeys,\n    loading: $setup.tableInfo.loading,\n    ref: \"tableRef\",\n    onExpandedChange: $setup.expandedChange\n  }, null, 8 /* PROPS */, [\"columns\", \"data\", \"scroll\", \"expanded-keys\", \"loading\"])], 512 /* NEED_PATCH */), [[_vShow, $setup.currentPage === 'list']])])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":"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","names":["class","ref","_createElementVNode","_createElementBlock","_hoisted_1","style","right","$setup","_createVNode","_component_a_radio_group","type","onChange","_component_a_radio","value","length","_hoisted_2","_component_vue3_tree_org","data","collapsable","horizontal","scalable","draggable","Infinity","toolBar","scale","restore","expand","zoom","fullscreen","node","$$data","isSubdivision","treeData","filter","item","deptName","dept","nodeName","width","_hoisted_4","label","_hoisted_5","_hoisted_6","_Fragment","i","_createBlock","_hoisted_7","_component_a_table","columns","bordered","cell","scroll","maxHeight","scrollbar","pagination","defaultExpandedKeys","loading","onExpandedChange"],"sourceRoot":"","sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/staffStatistics/organizationalStructure.vue"],"sourcesContent":["<template>\n    <div class=\"defaultPadding relative\" ref=\"treeContainerRef\">\n        <div>\n            <div class=\"radio-group-absolute\" :style=\"{right:currentPage==='tree'?(currentSYS==='mac'?'19px':'17px'):'30px'}\">\n                <a-radio-group type=\"button\" v-show=\"sourceData.length\" v-model:model-value=\"currentPage\" @change=\"handleRadioChange\">\n                    <a-radio value=\"tree\">树状</a-radio>\n                    <a-radio value=\"list\">列表</a-radio>\n                </a-radio-group>\n            </div>\n            <div v-show=\"currentPage === 'tree'\" class=\"treeBox\">\n                <vue3-tree-org\n                    :data=\"depTreeInfo.data\"\n                    :collapsable=\"false\"\n                    :horizontal=\"false\"\n                    :scalable=\"false\"\n                    :draggable=\"false\"\n                    :define-menus=\"null\"\n                    :node-draggable=\"false\"\n                    :default-expand-level=\"Infinity\"\n                    :label-class-name=\"labelClassNameFn\"\n                    :toolBar=\"{ scale: false, restore: false, expand: false, zoom: false, fullscreen: false }\"\n                >\n                    <!-- 自定义节点内容 -->\n                    <template v-slot=\"{node}\">\n                        <div v-if=\"node.$$data.isSubdivision\">\n                            <indented-tree \n                                :treeData=\"sourceData.filter(item=>item.deptName === node.$$data.dept)[0]\" \n                                nodeName=\"deptName\"\n                                :width=\"depTreeInfo.width\"\n                                :scale=\"depTreeInfo.scale\" \n                                class=\"treeComponent\"\n                            />\n                        </div>\n                        <div class=\"tree-org-node__text node-label\" v-else>\n                            {{ node.label }}\n                        </div>\n                    </template>\n                </vue3-tree-org>\n            </div>\n            <div v-show=\"currentPage === 'list'\">\n                <div class=\"m-b-20\">\n                    <span>BG筛选 :  &nbsp;&nbsp;</span>\n                    <a-radio-group type=\"button\" class=\"m-r-70\" v-model:model-value=\"listTabs\" @change=\"handleListTabsChange\">\n                        <a-radio value=\"all\">全部</a-radio>\n                        <a-radio v-for=\"(item,i) of sourceData\" :value=\"item.deptName\">{{ item.deptName }}</a-radio>\n                    </a-radio-group>\n                    <span>展开至 : &nbsp;&nbsp;</span>\n                    <a-radio-group type=\"button\" v-model:model-value=\"expandTabs\" @change=\"handleExpandTabsChange\">\n                        <a-radio value=\"level1\">一级部门</a-radio>\n                        <a-radio value=\"level2\">二级部门</a-radio>\n                        <a-radio value=\"all\">末级部门</a-radio>\n                    </a-radio-group>\n                </div>\n                <a-table\n                    :columns=\"tableInfo.columns\"\n                    :data=\"tableInfo.data\"\n                    :bordered=\"{cell:true}\"\n                    column-resizable\n                    :scroll=\"{ maxHeight: tableInfo.maxHeight }\"\n                    :scrollbar=\"false\"\n                    :pagination=\"false\"\n                    :expanded-keys=\"tableInfo.defaultExpandedKeys\"\n                    :loading=\"tableInfo.loading\"\n                    ref=\"tableRef\"\n                    @expanded-change=\"expandedChange\"\n                    >\n                </a-table>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref, nextTick, shallowRef, computed } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree'\nimport IndentedTree from './IndentedTree.vue'\nimport { dataAddKey,getPosType,toInteger } from '../../utils/util'\n\nconst currentSYS = getPosType()\nconst treeContainerRef = ref(null)\nconst tableRef = ref(null);\nconst treeRoot = {\n  id:1,\n  label:\"慧博云通\",\n  isSubdivision : false,\n  style:{\n    \"color\":\"#FFFFFF\",\n    \"background\":\"#5370FF\",\n    width:\"190px\",\n    \"letter-spacing\":\".2em\",\n    'font-size':\"13px\",\n    height : \"30px\",\n    \"line-height\": \"10px\"\n },\n  children : []\n}\nconst depTreeInfo = reactive({\n    data : {},\n    width : 304,\n    scale : 1\n})\nconst currentPage = ref('tree')\nconst handleRadioChange = val=>{\n    currentPage.value = val\n    let tree = treeContainerRef.value\n    if(val === 'list'){\n        if(tree){\n            tree.style.width = 'auto'\n        }\n        nextTick(()=>{\n            if(tableRef.value && tableInfo.maxHeight === '600px'){\n                let head = tableRef.value.$el;\n                let innerHeight = window.innerHeight;\n                let elHeight = head.getBoundingClientRect().top;\n                tableInfo.maxHeight = innerHeight - elHeight - 32 + \"px\";\n            }\n        })\n    }else{\n        tree.style.width = 'max-content'\n    }\n}\nconst listTabs = ref('all')\nconst handleListTabsChange = val=>{\n    listTabs.value = val\n    tableInfo.data = filterData(sourceData.value,val)\n}\nconst labelClassNameFn = (record)=>{\n    if(record.id === 1)return 'rootNode'\n}\nconst expandTabs = ref('level1')\nconst handleExpandTabsChange = val=>{\n    expandTabs.value = val\n    tableInfo.defaultExpandedKeys = filterLevelkeys(sourceData.value,val)\n}\nconst tableInfo = reactive({\n    columns : [\n        {\n            title: '部门名称',\n            dataIndex: 'deptName',\n            key: 'deptName',\n            width : 270    \n        },\n        {\n            title: '总裁室分管执行副总裁',\n            dataIndex: 'evpName',\n            key: 'evpName',\n            width : 206\n        },\n        {\n            title: '业务主管副总裁',\n            dataIndex: 'bgName',\n            key: 'bgName',\n            width : 156\n        },\n        {\n            title: '部门负责人',\n            dataIndex: 'empName',\n            key: 'empName',\n            width : 170\n        },\n        {\n            title: '部门总人数',\n            dataIndex: 'deptTotal',\n            key: 'deptTotal',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = record[column.dataIndex]\n                if(typeof(val) === 'number'){\n                    if(val === 0){\n                        return '-'\n                    }\n                    return <span innerHTML={toInteger(val, 0, false)}></span>\n                }\n                return val\n            }    \n        },\n        {\n            title: '部门创建日期',\n            dataIndex: 'createTime',\n            key: 'createTime',\n            width : 258\n        }\n    ],\n    data : [],\n    maxHeight : '600px',\n    loading :false,\n    defaultExpandedKeys : []\n})\n\nconst expandedChange = rowKeys => {\n  tableInfo.defaultExpandedKeys = rowKeys;\n};\nlet sourceData = shallowRef([])\n//树根节点样式\nlet rootNodeStyleWidth=ref('190px'),\n    rootNodeStyleFontSize=ref('13px'),\n    rootNodeStyleHeigt=ref('30px'),\n    rootNodeStyleLineHeight=ref('10px')\n\nconst asyncDrawGraph = async() => {\n  let depTreeData = await getDeptTree()\n  if(depTreeData.code === '200'){\n    let filterData = depTreeData.data.filter(item=>!((''+item.deptName).startsWith('FG')))\n    let expandedKeys = []\n    filterData.forEach((item,index)=>{\n      treeRoot.children.push({\n        id: item.deptName,\n        label:item.deptName, \n        isSubdivision : true,\n        dept : item.deptName,\n      })\n      item.id=index\n      expandedKeys.push(item.id)\n    })\n    sourceData.value = filterData\n    dataAddKey(filterData,\"key\",\"id\") \n    tableInfo.data = filterData\n    tableInfo.defaultExpandedKeys = expandedKeys\n    let tree = treeContainerRef.value\n    let getContentWidth = tree && parseInt(getComputedStyle(tree).width)\n    if(getContentWidth >= 1200){\n        let extendWidth = Math.ceil(getContentWidth * 0.03 /filterData.length)\n        let constrain = Math.floor(getContentWidth/filterData.length)\n        depTreeInfo.width = constrain + extendWidth\n        let scale = +(depTreeInfo.width/300).toFixed(2)\n        depTreeInfo.scale = scale\n        //设置树根节点跟随放大比例放大\n        rootNodeStyleWidth.value = Math.ceil(190*scale)+'px'\n        rootNodeStyleFontSize.value= Math.ceil(13*scale)+'px'\n        rootNodeStyleHeigt.value = Math.ceil(30*scale)+'px'\n        rootNodeStyleLineHeight.value = Math.ceil(10*scale)+'px'\n    }else {\n        tree.style.width='max-content'\n    }\n    depTreeInfo.data = treeRoot\n  }\n}\nonMounted(()=>{\n    asyncDrawGraph()\n})\n\nconst filterData = (arr,key)=>{\n    if(arr.length){\n        if(key === 'all'){\n            return arr\n        }else {\n            return arr.filter(item=>item.deptName === key)\n        }\n    }\n}\n\nconst filterLevelkeys = (arr,key)=>{\n    if(arr.length){\n        let expandKeys = []\n        switch (key) {\n            case 'all':\n                function getKeys(arr){\n                    arr.forEach(item=>{\n                        expandKeys.push(item.key)\n                        if(item?.children?.length){\n                            getKeys(item.children)\n                        }\n                    })\n                }\n                getKeys(arr)\n                break;\n            case 'level1' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                })\n                break;\n            case 'level2' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                    if(item?.children?.length){\n                       item.children.forEach(jtem=>{\n                        expandKeys.push(jtem.key)\n                       })\n                    }\n                })\n                break;\n            default:\n                expandKeys = []\n                break;\n        }\n        return expandKeys\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.treeComponent {\n    transform: translate(43%,0);\n}\n.relative{\n    position: relative;\n}\n.radio-group-absolute{\n    position: absolute;\n    top: 26px;\n    right: 30px;\n    z-index: 1;\n}\n.radio-group-fixed{\n    position: fixed;\n    right: 60px;\n    z-index: 1;\n}\n.treeBox {\n  height: 100%;\n  display: flex;\n  margin: 0 0 0 -160px;\n  :deep(.zm-tree-org .zm-draggable) {\n    position: static;\n    transform: translateY(0) !important;\n  }\n  :deep(.tree-org-node.is-leaf .tree-org-node__content .tree-org-node__inner){ \n    box-shadow: none;\n  }\n  :deep(.tree-org-node__children:before){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:not(:first-child):before, .tree-org-node:not(:last-child):after){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:after){\n    border-color: #E0E6F1;\n  }\n  :deep(.rootNode){\n    width : v-bind(rootNodeStyleWidth) !important;\n    height : v-bind(rootNodeStyleHeigt) !important;\n    font-size : v-bind(rootNodeStyleFontSize) !important;\n    display : flex;\n    justify-content:center;\n    align-items : center;\n  }\n}\n.m-r-70{\n    margin-right: 70px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}