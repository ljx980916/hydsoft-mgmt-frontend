{"ast":null,"code":"import { defineComponent } from 'vue';\nconst bgColorMap = new Map([[1, '#6587F6'], [2, '#E8ECFF'], [3, '#F6F8FC'], [4, '#FFFFFF']]);\nexport default defineComponent({\n  name: 'IndentedTree',\n  props: {\n    treeData: {\n      type: Object,\n      required: true\n    },\n    width: {\n      type: Number,\n      default: 300\n    },\n    scale: {\n      type: Number,\n      default: 1\n    },\n    nodeName: {\n      type: String,\n      default: 'name'\n    }\n  },\n  mounted() {\n    this.createTree();\n  },\n  updated() {\n    this.createTree();\n  },\n  methods: {\n    createTree() {\n      let _this = this;\n      // 禁用拖拽行为\n      var ElementView = joint.dia.ElementView.extend({\n        pointerdown: function () {},\n        pointermove: function () {},\n        pointerup: function () {}\n      });\n      var LinkView = joint.dia.LinkView.extend({\n        addVertex: function (evt, x, y) {},\n        removeVertex: function (endType) {},\n        pointerdown: function (evt, x, y) {}\n      });\n      const graph = new joint.dia.Graph();\n      let currentY = 0;\n      function calculatePosition(node, level = 0) {\n        let divideLen = ('' + node[_this.nodeName]).split(/-/gi).length;\n        let x = 0;\n        x = level * 14 + 8 * (divideLen - 1);\n\n        // if(divideLen === 2){\n        //   x = level * 41\n        // }else if(divideLen===3 ){\n        //   x = level * 51\n        // }else if(divideLen===4 ){\n        //   x = level * 61\n        // }else{\n        //  x = level * 50 + ((divideLen===3?15:20) * (divideLen-1))\n        // }\n        node.x = x;\n        node.y = currentY;\n        currentY += 40;\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            calculatePosition(node.children[i], level + 1);\n          }\n        }\n      }\n      // Clone the tree data to avoid modifying the original data\n      const clonedTree = JSON.parse(JSON.stringify(this.treeData));\n\n      // Calculate positions for each node in the tree\n      calculatePosition(clonedTree, 0, 0);\n      const paper = new joint.dia.Paper({\n        el: this.$refs.treeContainer,\n        model: graph,\n        width: this.width,\n        height: currentY * this.scale,\n        gridSize: 1,\n        elementView: ElementView,\n        linkView: LinkView\n      });\n      paper.scale(this.scale);\n      function createNode(node) {\n        let divideLen = ('' + node[_this.nodeName]).split(/-/gi).length;\n        const rect = new joint.shapes.standard.Rectangle({\n          position: {\n            x: node.x,\n            y: node.y\n          },\n          size: {\n            width: 60 + (divideLen - 1) * 38,\n            height: 32\n          },\n          attrs: {\n            body: {\n              fill: bgColorMap.get(divideLen) || 'lightblue',\n              stroke: '#E0E6F1',\n              //边框颜色\n              'stroke-width': 1 //边框大小 \n            },\n\n            label: {\n              text: node[_this.nodeName],\n              fill: divideLen === 1 ? \"#F5ECFE\" : \"#778092\",\n              'font-size': 12,\n              textVerticalAnchor: '0.4em'\n            }\n          }\n        });\n        graph.addCell(rect);\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            const child = createNode(node.children[i]);\n            const link = new joint.shapes.standard.Link({\n              source: {\n                id: rect.id\n              },\n              target: {\n                id: child.id\n              },\n              router: {\n                name: 'manhattan'\n              }\n            });\n            link.source(rect, {\n              selector: 'body',\n              anchor: {\n                name: 'bottomLeft',\n                args: {\n                  dx: 10,\n                  dy: 0\n                }\n              }\n            });\n            link.attr({\n              line: {\n                stroke: '#E0E6F1',\n                strokeWidth: 1,\n                sourceMarker: {\n                  'type': 'path',\n                  'stroke': 'transparent',\n                  'fill': 'transparent',\n                  'd': 'M 10 -5 0 0 10 5 Z'\n                },\n                targetMarker: {\n                  'type': 'path',\n                  'stroke': 'transparent',\n                  'fill': 'transparent',\n                  'd': 'M 10 -5 0 0 10 5 Z'\n                }\n              }\n            });\n            graph.addCell(link);\n          }\n        }\n        return rect;\n      }\n      createNode(clonedTree);\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","bgColorMap","Map","name","props","treeData","type","Object","required","width","Number","default","scale","nodeName","String","mounted","createTree","updated","methods","_this","ElementView","joint","dia","extend","pointerdown","pointermove","pointerup","LinkView","addVertex","evt","x","y","removeVertex","endType","graph","Graph","currentY","calculatePosition","node","level","divideLen","split","length","children","i","clonedTree","JSON","parse","stringify","paper","Paper","el","$refs","treeContainer","model","height","gridSize","elementView","linkView","createNode","rect","shapes","standard","Rectangle","position","size","attrs","body","fill","get","stroke","label","text","textVerticalAnchor","addCell","child","link","Link","source","id","target","router","selector","anchor","args","dx","dy","attr","line","strokeWidth","sourceMarker","targetMarker"],"sourceRoot":"","sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/staffStatistics/IndentedTree.vue"],"sourcesContent":["<template>\n  <div class=\"relative\">\n    <div ref=\"treeContainer\">\n    </div>\n    <div class=\"mask\"></div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nconst bgColorMap = new Map([\n  [1 , '#6587F6'],\n  [2 , '#E8ECFF'],\n  [3 , '#F6F8FC'],\n  [4 , '#FFFFFF']\n])\n\nexport default defineComponent({\n  name: 'IndentedTree',\n  props: {\n    treeData: {\n      type: Object,\n      required: true\n    },\n    width : {\n      type : Number,\n      default : 300\n    },\n    scale : {\n      type : Number,\n      default : 1\n    },\n    nodeName : {\n      type : String,\n      default : 'name'\n    }\n  },\n  mounted() {\n    this.createTree();\n  },\n  updated(){\n    this.createTree();\n  },\n  methods: {\n    createTree() {\n      let _this=this\n      // 禁用拖拽行为\n      var ElementView = joint.dia.ElementView.extend({\n        pointerdown: function () { },\n        pointermove: function () { },\n        pointerup: function () { }\n    });\n    var LinkView = joint.dia.LinkView.extend({\n        addVertex: function (evt, x, y) { },\n        removeVertex: function (endType) { },\n        pointerdown: function (evt, x, y) { }\n    });\n      const graph = new joint.dia.Graph();\n      \n      let currentY = 0;\n\n      function calculatePosition(node, level=0) {\n        let divideLen = (''+node[_this.nodeName]).split(/-/gi).length\n        let x = 0\n        x = level * 14 + (8* (divideLen-1))\n\n        // if(divideLen === 2){\n        //   x = level * 41\n        // }else if(divideLen===3 ){\n        //   x = level * 51\n        // }else if(divideLen===4 ){\n        //   x = level * 61\n        // }else{\n        //  x = level * 50 + ((divideLen===3?15:20) * (divideLen-1))\n        // }\n        node.x = x\n        node.y = currentY;\n        currentY += 40;\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            calculatePosition(\n              node.children[i],\n              level + 1\n            );\n          }\n        }\n      }\n      // Clone the tree data to avoid modifying the original data\n      const clonedTree = JSON.parse(JSON.stringify(this.treeData));\n\n      // Calculate positions for each node in the tree\n      calculatePosition(clonedTree, 0, 0);\n      const paper = new joint.dia.Paper({\n        el: this.$refs.treeContainer,\n        model: graph,\n        width: this.width,\n        height: currentY*this.scale,\n        gridSize: 1,\n        elementView: ElementView,\n        linkView: LinkView\n      });\n      paper.scale(this.scale)\n      function createNode(node) {\n        let divideLen = (''+node[_this.nodeName]).split(/-/gi).length\n        const rect = new joint.shapes.standard.Rectangle({\n          position: { x: node.x, y: node.y },\n          size: { width: 60+((divideLen-1)*38), height: 32 },\n          attrs: {\n            body: { \n                    fill: bgColorMap.get(divideLen) || 'lightblue', \n                    stroke: '#E0E6F1',//边框颜色\n                    'stroke-width': 1,//边框大小 \n                  },\n            label: { text: node[_this.nodeName],fill : divideLen===1?\"#F5ECFE\":\"#778092\",'font-size': 12,textVerticalAnchor: '0.4em' },\n          }\n        });\n        graph.addCell(rect);\n\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            const child = createNode(node.children[i]);\n\n            const link = new joint.shapes.standard.Link({\n              source: { id: rect.id },\n              target: { id: child.id },\n              router: { name: 'manhattan' }\n            });\n            link.source(rect, {\n                selector: 'body',\n                anchor: {\n                    name: 'bottomLeft',\n                    args: {\n                        dx: 10,\n                        dy: 0\n                    }\n                }\n            });\n            link.attr({\n                line: {\n                    stroke: '#E0E6F1',\n                    strokeWidth: 1,\n                    sourceMarker: {\n                        'type': 'path',\n                        'stroke': 'transparent',\n                        'fill': 'transparent',\n                        'd': 'M 10 -5 0 0 10 5 Z'\n                    },\n                    targetMarker: {\n                        'type': 'path',\n                        'stroke': 'transparent',\n                        'fill': 'transparent',\n                        'd': 'M 10 -5 0 0 10 5 Z'\n                    }\n                }\n            });\n            graph.addCell(link);\n          }\n        }\n\n        return rect;\n      }\n\n      createNode(clonedTree);\n    }\n  }\n})\n</script>\n\n<style scoped>\n.relative{\n  position: relative;\n}\n.mask {\n  position:absolute;\n  left: 0;\n  top:0;\n  right:0;\n  bottom:0;\n  z-index: 1;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}