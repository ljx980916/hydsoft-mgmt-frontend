{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport * as echarts from \"echarts\";\nimport { onMounted, ref } from \"vue\";\nexport default {\n  __name: 'echartsContainer',\n  props: {\n    // 折线路径数据\n    route: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 20\n    },\n    width: {\n      type: Number,\n      default: 50\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const echartContainer = ref(null);\n    onMounted(() => {\n      var chartDom = echartContainer.value;\n      var myChart = echarts.init(chartDom);\n      var option;\n      option = {\n        xAxis: {\n          type: \"category\",\n          show: false\n        },\n        yAxis: {\n          type: \"value\",\n          show: false\n        },\n        tooltip: {\n          trigger: 'item',\n          position: 'top',\n          formatter: params => {\n            return params.data?.name?.replaceAll('-', '<br/>');\n          },\n          appendToBody: true\n        },\n        series: [{\n          type: \"line\",\n          symbol: \"emptyCircle\",\n          symbolSize: 3,\n          itemStyle: {\n            color: \"#0770FF\"\n          },\n          areaStyle: {\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: \"rgba(58,77,233,0.8)\"\n            }, {\n              offset: 1,\n              color: \"rgba(58,77,233,0.3)\"\n            }])\n          },\n          data: props.route\n        }]\n      };\n      option && myChart.setOption(option);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        ref_key: \"echartContainer\",\n        ref: echartContainer,\n        style: _normalizeStyle({\n          width: __props.width + 'px',\n          height: __props.height + 'px',\n          margin: '4px 0 -6px 0'\n        })\n      }, null, 4);\n    };\n  }\n};","map":{"version":3,"mappings":";AAKA,OAAO,KAAKA,OAAO,MAAM,SAAS;AAClC,SAASC,SAAS,EAAEC,GAAG,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;IAgBpC,MAAMC,eAAe,GAAGD,GAAG,CAAC,IAAI,CAAC;IACjCD,SAAS,CAAC,MAAM;MACd,IAAIG,QAAQ,GAAGD,eAAe,CAACE,KAAK;MACpC,IAAIC,OAAO,GAAGN,OAAO,CAACO,IAAI,CAACH,QAAQ,CAAC;MACpC,IAAII,MAAM;MACVA,MAAM,GAAG;QACPC,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAChBC,IAAI,EAAE;QACR,CAAC;QACDC,KAAK,EAAE;UACLF,IAAI,EAAE,OAAO;UACbC,IAAI,EAAE;QACR,CAAC;QACDE,OAAO,EAAE;UACPC,OAAO,EAAE,MAAM;UACfC,QAAQ,EAAG,KAAK;UAChBC,SAAS,EAAEC,MAAM,IAAE;YACjB,OAAOA,MAAM,CAACC,IAAI,EAAEC,IAAI,EAAEC,UAAU,CAAC,GAAG,EAAC,OAAO,CAAC;UACnD,CAAC;UACDC,YAAY,EAAE;QAChB,CAAC;QACDC,MAAM,EAAE,CACN;UACEZ,IAAI,EAAE,MAAM;UACZa,MAAM,EAAE,aAAa;UACrBC,UAAU,EAAE,CAAC;UACbC,SAAS,EAAE;YACTC,KAAK,EAAE;UACT,CAAC;UACDC,SAAS,EAAE;YACTD,KAAK,EAAE,IAAI1B,OAAO,CAAC4B,OAAO,CAACC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CACpD;cACEC,MAAM,EAAE,CAAC;cACTJ,KAAK,EAAE;YACT,CAAC,EACD;cACEI,MAAM,EAAE,CAAC;cACTJ,KAAK,EAAE;YACT,CAAC,CACF;UACH,CAAC;UACDR,IAAI,EAAEa,KAAK,CAACC;QACd,CAAC;MAEL,CAAC;MAEDxB,MAAM,IAAIF,OAAO,CAAC2B,SAAS,CAACzB,MAAM,CAAC;IACrC,CAAC,CAAC","names":["echarts","onMounted","ref","echartContainer","chartDom","value","myChart","init","option","xAxis","type","show","yAxis","tooltip","trigger","position","formatter","params","data","name","replaceAll","appendToBody","series","symbol","symbolSize","itemStyle","color","areaStyle","graphic","LinearGradient","offset","props","route","setOption"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/components/echartsContainer.vue"],"sourcesContent":["<template>\n  <div ref=\"echartContainer\" :style=\"{ width: width + 'px', height: height + 'px', margin : '4px 0 -6px 0' }\"></div>\n</template>\n\n<script setup>\nimport * as echarts from \"echarts\";\nimport { onMounted, ref } from \"vue\";\nconst props = defineProps({\n  // 折线路径数据\n  route: {\n    type: Array,\n    default: () => [],\n  },\n  height: {\n    type: Number,\n    default: 20,\n  },\n  width: {\n    type: Number,\n    default: 50,\n  },\n});\nconst echartContainer = ref(null);\nonMounted(() => {\n  var chartDom = echartContainer.value;\n  var myChart = echarts.init(chartDom);\n  var option;\n  option = {\n    xAxis: {\n      type: \"category\",\n      show: false,\n    },\n    yAxis: {\n      type: \"value\",\n      show: false,\n    },\n    tooltip: {\n      trigger: 'item',\n      position : 'top',\n      formatter: params=>{\n        return params.data?.name?.replaceAll('-','<br/>')\n      },\n      appendToBody: true\n    },\n    series: [\n      {\n        type: \"line\",\n        symbol: \"emptyCircle\",\n        symbolSize: 3,\n        itemStyle: {\n          color: \"#0770FF\",\n        },\n        areaStyle: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n            {\n              offset: 0,\n              color: \"rgba(58,77,233,0.8)\",\n            },\n            {\n              offset: 1,\n              color: \"rgba(58,77,233,0.3)\",\n            },\n          ]),\n        },\n        data: props.route,\n      },\n    ],\n  };\n\n  option && myChart.setOption(option);\n});\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}