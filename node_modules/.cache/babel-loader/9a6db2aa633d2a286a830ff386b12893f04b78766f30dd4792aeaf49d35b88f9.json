{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-148214a2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"treeBox\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"dept\"];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"tree-org-node__text node-label\"\n};\nimport { onMounted, reactive, nextTick } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree';\nimport { drawGraph } from './g6';\nexport default {\n  __name: 'organizationDemo',\n  setup(__props) {\n    const treeRoot = {\n      id: 1,\n      label: \"慧博云通科技股份有限公司\",\n      isSubdivision: false,\n      children: []\n    };\n    let data = [];\n    const treeData = reactive({\n      data: {}\n    });\n    function setDataProperty(arr) {\n      arr.forEach(item => {\n        item.label = item.deptName;\n        if (item.children && Array.isArray(item.children)) {\n          setDataProperty(item.children);\n        }\n        if (item.parentId === null) {\n          item.isRoot = true;\n        }\n      });\n    }\n    const asyncDrawGraph = async () => {\n      let depTreeData = await getDeptTree();\n      if (depTreeData.code === '200') {\n        let filterData = depTreeData.data.filter(item => !('' + item.deptName).startsWith('FG'));\n        filterData.forEach(({\n          deptName\n        }) => {\n          treeRoot.children.push({\n            id: deptName,\n            label: deptName,\n            isSubdivision: true,\n            dept: deptName\n          });\n        });\n        setDataProperty(filterData);\n        data = depTreeData.data;\n        treeData.data = treeRoot;\n      }\n      nextTick(() => {\n        let nodes = document.getElementsByName('g6Container');\n        nodes.forEach(dom => {\n          let dept = dom.getAttribute('dept');\n          let deptData = data.filter(item => item.label === dept);\n          drawGraph(dom, deptData[0]);\n        });\n      });\n    };\n    const setNodeData = () => {\n      nextTick(() => {\n        let nodes = document.getElementsByName('g6Container');\n        nodes.forEach(dom => {\n          let dept = dom.getAttribute('dept');\n          let deptData = data.filter(item => item.label === dept);\n          drawGraph(dom, deptData[0]);\n        });\n      });\n    };\n    onMounted(() => {\n      asyncDrawGraph();\n    });\n    const onExpand = (e, data) => {\n      setNodeData();\n    };\n    return (_ctx, _cache) => {\n      const _component_vue3_tree_org = _resolveComponent(\"vue3-tree-org\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_vue3_tree_org, {\n        data: treeData.data,\n        collapsable: true,\n        horizontal: false,\n        scalable: false,\n        draggable: false,\n        \"define-menus\": null,\n        \"default-expand-level\": Infinity,\n        toolBar: {\n          scale: false,\n          restore: false,\n          expand: false,\n          zoom: false,\n          fullscreen: false\n        },\n        onOnExpand: onExpand\n      }, {\n        default: _withCtx(({\n          node\n        }) => [node.$$data.isSubdivision ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n          name: \"g6Container\",\n          dept: node.$$data.dept,\n          class: \"g6Container\"\n        }, null, 8, _hoisted_3)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString(node.label), 1))]),\n        _: 1\n      }, 8, [\"data\"])]);\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","nextTick","getDeptTree","drawGraph","treeRoot","id","label","isSubdivision","children","data","treeData","setDataProperty","arr","forEach","item","deptName","Array","isArray","parentId","isRoot","asyncDrawGraph","depTreeData","code","filterData","filter","startsWith","push","dept","nodes","document","getElementsByName","dom","getAttribute","deptData","setNodeData","onExpand","e"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/demo/organizationDemo.vue"],"sourcesContent":["<template>\n    <div class=\"treeBox\">\n        <vue3-tree-org\n            :data=\"treeData.data\"\n            :collapsable=\"true\"\n            :horizontal=\"false\"\n            :scalable=\"false\"\n            :draggable=\"false\"\n            :define-menus=\"null\"\n            :default-expand-level=\"Infinity\"\n            :toolBar=\"{ scale: false, restore: false, expand: false, zoom: false, fullscreen: false }\"\n            @on-expand=\"onExpand\"\n        >\n            <!-- 自定义节点内容 -->\n            <template v-slot=\"{node}\">\n                <div v-if=\"node.$$data.isSubdivision\">\n                    <div name=\"g6Container\" :dept=\"node.$$data.dept\" class=\"g6Container\"></div>\n                </div>\n                <div class=\"tree-org-node__text node-label\" v-else>\n                    {{ node.label }}\n                </div>\n            </template>\n        </vue3-tree-org>\n   </div>\n</template>\n\n<script setup>\nimport { onMounted, reactive,nextTick } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree'\nimport { drawGraph } from './g6'\n\nconst treeRoot = {\n  id:1,\n  label:\"慧博云通科技股份有限公司\",\n  isSubdivision : false,\n  children : []\n}\nlet data = []\nconst treeData = reactive({\n    data : {\n      }\n})\n\nfunction setDataProperty(arr){\n  arr.forEach(item=>{\n    item.label = item.deptName\n    if(item.children && Array.isArray(item.children)){\n      setDataProperty(item.children)\n    }\n    if(item.parentId === null){\n      item.isRoot = true\n    }\n  })\n}\n\nconst asyncDrawGraph = async() => {\n  let depTreeData = await getDeptTree()\n  if(depTreeData.code === '200'){\n    let filterData = depTreeData.data.filter(item=>!((''+item.deptName).startsWith('FG')))\n    filterData.forEach(({ deptName })=>{\n      treeRoot.children.push({\n        id: deptName,\n        label:deptName, \n        isSubdivision : true,\n        dept : deptName\n      })\n    })\n    setDataProperty(filterData)\n    data = depTreeData.data\n    treeData.data = treeRoot\n  }\n \n  nextTick(()=>{\n        let nodes = document.getElementsByName('g6Container')\n        nodes.forEach(dom=>{\n            let dept = dom.getAttribute('dept')\n            let deptData = data.filter(item=>item.label===dept)\n            drawGraph(dom,deptData[0])\n        })\n    })\n}\nconst setNodeData = ()=>{\n  nextTick(()=>{\n        let nodes = document.getElementsByName('g6Container')\n        nodes.forEach(dom=>{\n            let dept = dom.getAttribute('dept')\n            let deptData = data.filter(item=>item.label===dept)\n            drawGraph(dom,deptData[0])\n        })\n    })\n}\nonMounted(()=>{\n  asyncDrawGraph()\n})\nconst onExpand = (e, data)=> {\n        setNodeData()\n    }\n\n</script>\n\n<style lang=\"scss\" scoped>\n.treeBox {\n  height: 100%;\n  display: flex;\n  :deep(.zm-tree-org .zm-draggable) {\n    position: static;\n    transform: translateY(0) !important;\n  }\n  :deep(.tree-org-node.is-leaf .tree-org-node__content .tree-org-node__inner){ \n    box-shadow: none;\n  }\n}\n.g6Container{\n    transform: translate(35%,-1.6%);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}