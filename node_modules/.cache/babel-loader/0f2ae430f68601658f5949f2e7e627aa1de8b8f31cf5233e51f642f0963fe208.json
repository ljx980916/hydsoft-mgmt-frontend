{"ast":null,"code":"import { createVNode as _createVNode2 } from \"vue\";\nimport \"core-js/modules/es.array.push.js\";\nimport { useCssVars as _useCssVars } from 'vue';\nimport { unref as _unref, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-04540368\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"treeBox\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"tree-org-node__text node-label\"\n};\nconst _hoisted_4 = {\n  class: \"m-b-20\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"BG筛选 :   \", -1));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, \"展开至 :   \", -1));\nimport { onMounted, reactive, ref, nextTick, shallowRef, computed } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree';\nimport IndentedTree from './IndentedTree.vue';\nimport { dataAddKey, getPosType, toInteger } from '../../utils/util';\nexport default {\n  __name: 'organizationalStructure',\n  setup(__props) {\n    _useCssVars(_ctx => ({\n      \"790fe457\": _unref(rootNodeStyleWidth),\n      \"783ac38a\": _unref(rootNodeStyleHeigt),\n      \"ee51d682\": _unref(rootNodeStyleFontSize)\n    }));\n    const currentSYS = getPosType();\n    const treeContainerRef = ref(null);\n    const tableRef = ref(null);\n    const treeRoot = {\n      id: 1,\n      label: \"慧博云通\",\n      isSubdivision: false,\n      style: {\n        \"color\": \"#FFFFFF\",\n        \"background\": \"#5370FF\",\n        width: \"190px\",\n        \"letter-spacing\": \".2em\",\n        'font-size': \"13px\",\n        height: \"30px\",\n        \"line-height\": \"10px\"\n      },\n      children: []\n    };\n    const depTreeInfo = reactive({\n      data: {},\n      width: 304,\n      scale: 1\n    });\n    const currentPage = ref('tree');\n    const handleRadioChange = val => {\n      currentPage.value = val;\n      let tree = treeContainerRef.value;\n      if (val === 'list') {\n        if (tree) {\n          tree.style.width = 'auto';\n        }\n        nextTick(() => {\n          if (tableRef.value && tableInfo.maxHeight === '600px') {\n            let head = tableRef.value.$el;\n            let innerHeight = window.innerHeight;\n            let elHeight = head.getBoundingClientRect().top;\n            tableInfo.maxHeight = innerHeight - elHeight - 32 + \"px\";\n          }\n        });\n      } else {\n        tree.style.width = 'max-content';\n      }\n    };\n    const listTabs = ref('all');\n    const handleListTabsChange = val => {\n      listTabs.value = val;\n      tableInfo.data = filterData(sourceData.value, val);\n    };\n    const labelClassNameFn = record => {\n      if (record.id === 1) return 'rootNode';\n    };\n    const expandTabs = ref('level1');\n    const handleExpandTabsChange = val => {\n      expandTabs.value = val;\n      tableInfo.defaultExpandedKeys = filterLevelkeys(sourceData.value, val);\n    };\n    const tableInfo = reactive({\n      columns: [{\n        title: '部门名称',\n        dataIndex: 'deptName',\n        key: 'deptName',\n        width: 270\n      }, {\n        title: '总裁室分管执行副总裁',\n        dataIndex: 'evpName',\n        key: 'evpName',\n        width: 206\n      }, {\n        title: '业务主管副总裁',\n        dataIndex: 'bgName',\n        key: 'bgName',\n        width: 156\n      }, {\n        title: '部门负责人',\n        dataIndex: 'empName',\n        key: 'empName',\n        width: 170\n      }, {\n        title: '部门总人数',\n        dataIndex: 'deptTotal',\n        key: 'deptTotal',\n        width: 110,\n        cellStyle: {\n          \"text-align\": \"right\"\n        },\n        render: ({\n          record,\n          column\n        }) => {\n          let val = record[column.dataIndex];\n          if (typeof val === 'number') {\n            if (val === 0) {\n              return '-';\n            }\n            return _createVNode2(\"span\", {\n              \"innerHTML\": toInteger(val, 0, false)\n            }, null);\n          }\n          return val;\n        }\n      }, {\n        title: '部门创建日期',\n        dataIndex: 'createTime',\n        key: 'createTime',\n        width: 258\n      }],\n      data: [],\n      maxHeight: '600px',\n      loading: false,\n      defaultExpandedKeys: []\n    });\n    const expandedChange = rowKeys => {\n      tableInfo.defaultExpandedKeys = rowKeys;\n    };\n    let sourceData = shallowRef([]);\n    //树根节点样式\n    let rootNodeStyleWidth = ref('190px'),\n      rootNodeStyleFontSize = ref('13px'),\n      rootNodeStyleHeigt = ref('30px'),\n      rootNodeStyleLineHeight = ref('10px');\n    const asyncDrawGraph = async () => {\n      let depTreeData = await getDeptTree();\n      if (depTreeData.code === '200') {\n        let filterData = depTreeData.data.filter(item => !('' + item.deptName).startsWith('FG'));\n        let expandedKeys = [];\n        filterData.forEach((item, index) => {\n          treeRoot.children.push({\n            id: item.deptName,\n            label: item.deptName,\n            isSubdivision: true,\n            dept: item.deptName\n          });\n          item.id = index;\n          expandedKeys.push(item.id);\n        });\n        sourceData.value = filterData;\n        dataAddKey(filterData, \"key\", \"id\");\n        tableInfo.data = filterData;\n        tableInfo.defaultExpandedKeys = expandedKeys;\n        let tree = treeContainerRef.value;\n        let getContentWidth = tree && parseInt(getComputedStyle(tree).width);\n        if (getContentWidth >= 1200) {\n          let extendWidth = Math.ceil(getContentWidth * 0.03 / filterData.length);\n          let constrain = Math.floor(getContentWidth / filterData.length);\n          depTreeInfo.width = constrain + extendWidth;\n          let scale = +(depTreeInfo.width / 300).toFixed(2);\n          depTreeInfo.scale = scale;\n          //设置树根节点跟随放大比例放大\n          rootNodeStyleWidth.value = Math.ceil(190 * scale) + 'px';\n          rootNodeStyleFontSize.value = Math.ceil(13 * scale) + 'px';\n          rootNodeStyleHeigt.value = Math.ceil(30 * scale) + 'px';\n          rootNodeStyleLineHeight.value = Math.ceil(10 * scale) + 'px';\n        } else {\n          tree.style.width = 'max-content';\n        }\n        depTreeInfo.data = treeRoot;\n      }\n    };\n    onMounted(() => {\n      asyncDrawGraph();\n    });\n    const filterData = (arr, key) => {\n      if (arr.length) {\n        if (key === 'all') {\n          return arr;\n        } else {\n          return arr.filter(item => item.deptName === key);\n        }\n      }\n    };\n    const filterLevelkeys = (arr, key) => {\n      if (arr.length) {\n        let expandKeys = [];\n        switch (key) {\n          case 'all':\n            function getKeys(arr) {\n              arr.forEach(item => {\n                expandKeys.push(item.key);\n                if (item?.children?.length) {\n                  getKeys(item.children);\n                }\n              });\n            }\n            getKeys(arr);\n            break;\n          case 'level1':\n            arr.forEach(item => {\n              expandKeys.push(item.key);\n            });\n            break;\n          case 'level2':\n            arr.forEach(item => {\n              expandKeys.push(item.key);\n              if (item?.children?.length) {\n                item.children.forEach(jtem => {\n                  expandKeys.push(jtem.key);\n                });\n              }\n            });\n            break;\n          default:\n            expandKeys = [];\n            break;\n        }\n        return expandKeys;\n      }\n    };\n    return (_ctx, _cache) => {\n      const _component_a_radio = _resolveComponent(\"a-radio\");\n      const _component_a_radio_group = _resolveComponent(\"a-radio-group\");\n      const _component_vue3_tree_org = _resolveComponent(\"vue3-tree-org\");\n      const _component_a_table = _resolveComponent(\"a-table\");\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: \"defaultPadding relative\",\n        ref_key: \"treeContainerRef\",\n        ref: treeContainerRef\n      }, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", {\n        class: \"radio-group-absolute\",\n        style: _normalizeStyle({\n          right: currentPage.value === 'tree' ? _unref(currentSYS) === 'mac' ? '19px' : '17px' : '30px'\n        })\n      }, [_withDirectives(_createVNode(_component_a_radio_group, {\n        type: \"button\",\n        \"model-value\": currentPage.value,\n        \"onUpdate:model-value\": _cache[0] || (_cache[0] = $event => currentPage.value = $event),\n        onChange: handleRadioChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_radio, {\n          value: \"tree\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"树状\")]),\n          _: 1\n        }), _createVNode(_component_a_radio, {\n          value: \"list\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"列表\")]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"model-value\"]), [[_vShow, _unref(sourceData).length]])], 4), _withDirectives(_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_vue3_tree_org, {\n        data: depTreeInfo.data,\n        collapsable: false,\n        horizontal: false,\n        scalable: false,\n        draggable: false,\n        \"define-menus\": null,\n        \"node-draggable\": false,\n        \"default-expand-level\": Infinity,\n        \"label-class-name\": labelClassNameFn,\n        toolBar: {\n          scale: false,\n          restore: false,\n          expand: false,\n          zoom: false,\n          fullscreen: false\n        }\n      }, {\n        default: _withCtx(({\n          node\n        }) => [node.$$data.isSubdivision ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(IndentedTree, {\n          treeData: _unref(sourceData).filter(item => item.deptName === node.$$data.dept)[0],\n          nodeName: \"deptName\",\n          width: depTreeInfo.width,\n          scale: depTreeInfo.scale,\n          class: \"treeComponent\"\n        }, null, 8, [\"treeData\", \"width\", \"scale\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString(node.label), 1))]),\n        _: 1\n      }, 8, [\"data\"])], 512), [[_vShow, currentPage.value === 'tree']]), _withDirectives(_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createVNode(_component_a_radio_group, {\n        type: \"button\",\n        class: \"m-r-70\",\n        \"model-value\": listTabs.value,\n        \"onUpdate:model-value\": _cache[1] || (_cache[1] = $event => listTabs.value = $event),\n        onChange: handleListTabsChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_radio, {\n          value: \"all\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"全部\")]),\n          _: 1\n        }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(sourceData), (item, i) => {\n          return _openBlock(), _createBlock(_component_a_radio, {\n            value: item.deptName\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(item.deptName), 1)]),\n            _: 2\n          }, 1032, [\"value\"]);\n        }), 256))]),\n        _: 1\n      }, 8, [\"model-value\"]), _hoisted_6, _createVNode(_component_a_radio_group, {\n        type: \"button\",\n        \"model-value\": expandTabs.value,\n        \"onUpdate:model-value\": _cache[2] || (_cache[2] = $event => expandTabs.value = $event),\n        onChange: handleExpandTabsChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_radio, {\n          value: \"level1\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"一级部门\")]),\n          _: 1\n        }), _createVNode(_component_a_radio, {\n          value: \"level2\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"二级部门\")]),\n          _: 1\n        }), _createVNode(_component_a_radio, {\n          value: \"all\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"末级部门\")]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"model-value\"])]), _createVNode(_component_a_table, {\n        columns: tableInfo.columns,\n        data: tableInfo.data,\n        bordered: {\n          cell: true\n        },\n        \"column-resizable\": \"\",\n        scroll: {\n          maxHeight: tableInfo.maxHeight\n        },\n        scrollbar: false,\n        pagination: false,\n        \"expanded-keys\": tableInfo.defaultExpandedKeys,\n        loading: tableInfo.loading,\n        ref_key: \"tableRef\",\n        ref: tableRef,\n        onExpandedChange: expandedChange\n      }, null, 8, [\"columns\", \"data\", \"scroll\", \"expanded-keys\", \"loading\"])], 512), [[_vShow, currentPage.value === 'list']])])], 512);\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","ref","nextTick","shallowRef","computed","getDeptTree","IndentedTree","dataAddKey","getPosType","toInteger","currentSYS","treeContainerRef","tableRef","treeRoot","id","label","isSubdivision","style","width","height","children","depTreeInfo","data","scale","currentPage","handleRadioChange","val","value","tree","tableInfo","maxHeight","head","$el","innerHeight","window","elHeight","getBoundingClientRect","top","listTabs","handleListTabsChange","filterData","sourceData","labelClassNameFn","record","expandTabs","handleExpandTabsChange","defaultExpandedKeys","filterLevelkeys","columns","title","dataIndex","key","cellStyle","render","column","loading","expandedChange","rowKeys","rootNodeStyleWidth","rootNodeStyleFontSize","rootNodeStyleHeigt","rootNodeStyleLineHeight","asyncDrawGraph","depTreeData","code","filter","item","deptName","startsWith","expandedKeys","forEach","index","push","dept","getContentWidth","parseInt","getComputedStyle","extendWidth","Math","ceil","length","constrain","floor","toFixed","arr","expandKeys","getKeys","jtem"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/staffStatistics/organizationalStructure.vue"],"sourcesContent":["<template>\n    <div class=\"defaultPadding relative\" ref=\"treeContainerRef\">\n        <div>\n            <div class=\"radio-group-absolute\" :style=\"{right:currentPage==='tree'?(currentSYS==='mac'?'19px':'17px'):'30px'}\">\n                <a-radio-group type=\"button\" v-show=\"sourceData.length\" v-model:model-value=\"currentPage\" @change=\"handleRadioChange\">\n                    <a-radio value=\"tree\">树状</a-radio>\n                    <a-radio value=\"list\">列表</a-radio>\n                </a-radio-group>\n            </div>\n            <div v-show=\"currentPage === 'tree'\" class=\"treeBox\">\n                <vue3-tree-org\n                    :data=\"depTreeInfo.data\"\n                    :collapsable=\"false\"\n                    :horizontal=\"false\"\n                    :scalable=\"false\"\n                    :draggable=\"false\"\n                    :define-menus=\"null\"\n                    :node-draggable=\"false\"\n                    :default-expand-level=\"Infinity\"\n                    :label-class-name=\"labelClassNameFn\"\n                    :toolBar=\"{ scale: false, restore: false, expand: false, zoom: false, fullscreen: false }\"\n                >\n                    <!-- 自定义节点内容 -->\n                    <template v-slot=\"{node}\">\n                        <div v-if=\"node.$$data.isSubdivision\">\n                            <indented-tree \n                                :treeData=\"sourceData.filter(item=>item.deptName === node.$$data.dept)[0]\" \n                                nodeName=\"deptName\"\n                                :width=\"depTreeInfo.width\"\n                                :scale=\"depTreeInfo.scale\" \n                                class=\"treeComponent\"\n                            />\n                        </div>\n                        <div class=\"tree-org-node__text node-label\" v-else>\n                            {{ node.label }}\n                        </div>\n                    </template>\n                </vue3-tree-org>\n            </div>\n            <div v-show=\"currentPage === 'list'\">\n                <div class=\"m-b-20\">\n                    <span>BG筛选 :  &nbsp;&nbsp;</span>\n                    <a-radio-group type=\"button\" class=\"m-r-70\" v-model:model-value=\"listTabs\" @change=\"handleListTabsChange\">\n                        <a-radio value=\"all\">全部</a-radio>\n                        <a-radio v-for=\"(item,i) of sourceData\" :value=\"item.deptName\">{{ item.deptName }}</a-radio>\n                    </a-radio-group>\n                    <span>展开至 : &nbsp;&nbsp;</span>\n                    <a-radio-group type=\"button\" v-model:model-value=\"expandTabs\" @change=\"handleExpandTabsChange\">\n                        <a-radio value=\"level1\">一级部门</a-radio>\n                        <a-radio value=\"level2\">二级部门</a-radio>\n                        <a-radio value=\"all\">末级部门</a-radio>\n                    </a-radio-group>\n                </div>\n                <a-table\n                    :columns=\"tableInfo.columns\"\n                    :data=\"tableInfo.data\"\n                    :bordered=\"{cell:true}\"\n                    column-resizable\n                    :scroll=\"{ maxHeight: tableInfo.maxHeight }\"\n                    :scrollbar=\"false\"\n                    :pagination=\"false\"\n                    :expanded-keys=\"tableInfo.defaultExpandedKeys\"\n                    :loading=\"tableInfo.loading\"\n                    ref=\"tableRef\"\n                    @expanded-change=\"expandedChange\"\n                    >\n                </a-table>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { onMounted, reactive, ref, nextTick, shallowRef, computed } from 'vue';\nimport { getDeptTree } from '../../api/organizationTree'\nimport IndentedTree from './IndentedTree.vue'\nimport { dataAddKey,getPosType,toInteger } from '../../utils/util'\n\nconst currentSYS = getPosType()\nconst treeContainerRef = ref(null)\nconst tableRef = ref(null);\nconst treeRoot = {\n  id:1,\n  label:\"慧博云通\",\n  isSubdivision : false,\n  style:{\n    \"color\":\"#FFFFFF\",\n    \"background\":\"#5370FF\",\n    width:\"190px\",\n    \"letter-spacing\":\".2em\",\n    'font-size':\"13px\",\n    height : \"30px\",\n    \"line-height\": \"10px\"\n },\n  children : []\n}\nconst depTreeInfo = reactive({\n    data : {},\n    width : 304,\n    scale : 1\n})\nconst currentPage = ref('tree')\nconst handleRadioChange = val=>{\n    currentPage.value = val\n    let tree = treeContainerRef.value\n    if(val === 'list'){\n        if(tree){\n            tree.style.width = 'auto'\n        }\n        nextTick(()=>{\n            if(tableRef.value && tableInfo.maxHeight === '600px'){\n                let head = tableRef.value.$el;\n                let innerHeight = window.innerHeight;\n                let elHeight = head.getBoundingClientRect().top;\n                tableInfo.maxHeight = innerHeight - elHeight - 32 + \"px\";\n            }\n        })\n    }else{\n        tree.style.width = 'max-content'\n    }\n}\nconst listTabs = ref('all')\nconst handleListTabsChange = val=>{\n    listTabs.value = val\n    tableInfo.data = filterData(sourceData.value,val)\n}\nconst labelClassNameFn = (record)=>{\n    if(record.id === 1)return 'rootNode'\n}\nconst expandTabs = ref('level1')\nconst handleExpandTabsChange = val=>{\n    expandTabs.value = val\n    tableInfo.defaultExpandedKeys = filterLevelkeys(sourceData.value,val)\n}\nconst tableInfo = reactive({\n    columns : [\n        {\n            title: '部门名称',\n            dataIndex: 'deptName',\n            key: 'deptName',\n            width : 270    \n        },\n        {\n            title: '总裁室分管执行副总裁',\n            dataIndex: 'evpName',\n            key: 'evpName',\n            width : 206\n        },\n        {\n            title: '业务主管副总裁',\n            dataIndex: 'bgName',\n            key: 'bgName',\n            width : 156\n        },\n        {\n            title: '部门负责人',\n            dataIndex: 'empName',\n            key: 'empName',\n            width : 170\n        },\n        {\n            title: '部门总人数',\n            dataIndex: 'deptTotal',\n            key: 'deptTotal',\n            width : 110,\n            cellStyle: { \"text-align\": \"right\" },\n            render : ({ record, column })=>{\n                let val = record[column.dataIndex]\n                if(typeof(val) === 'number'){\n                    if(val === 0){\n                        return '-'\n                    }\n                    return <span innerHTML={toInteger(val, 0, false)}></span>\n                }\n                return val\n            }    \n        },\n        {\n            title: '部门创建日期',\n            dataIndex: 'createTime',\n            key: 'createTime',\n            width : 258\n        }\n    ],\n    data : [],\n    maxHeight : '600px',\n    loading :false,\n    defaultExpandedKeys : []\n})\n\nconst expandedChange = rowKeys => {\n  tableInfo.defaultExpandedKeys = rowKeys;\n};\nlet sourceData = shallowRef([])\n//树根节点样式\nlet rootNodeStyleWidth=ref('190px'),\n    rootNodeStyleFontSize=ref('13px'),\n    rootNodeStyleHeigt=ref('30px'),\n    rootNodeStyleLineHeight=ref('10px')\n\nconst asyncDrawGraph = async() => {\n  let depTreeData = await getDeptTree()\n  if(depTreeData.code === '200'){\n    let filterData = depTreeData.data.filter(item=>!((''+item.deptName).startsWith('FG')))\n    let expandedKeys = []\n    filterData.forEach((item,index)=>{\n      treeRoot.children.push({\n        id: item.deptName,\n        label:item.deptName, \n        isSubdivision : true,\n        dept : item.deptName,\n      })\n      item.id=index\n      expandedKeys.push(item.id)\n    })\n    sourceData.value = filterData\n    dataAddKey(filterData,\"key\",\"id\") \n    tableInfo.data = filterData\n    tableInfo.defaultExpandedKeys = expandedKeys\n    let tree = treeContainerRef.value\n    let getContentWidth = tree && parseInt(getComputedStyle(tree).width)\n    if(getContentWidth >= 1200){\n        let extendWidth = Math.ceil(getContentWidth * 0.03 /filterData.length)\n        let constrain = Math.floor(getContentWidth/filterData.length)\n        depTreeInfo.width = constrain + extendWidth\n        let scale = +(depTreeInfo.width/300).toFixed(2)\n        depTreeInfo.scale = scale\n        //设置树根节点跟随放大比例放大\n        rootNodeStyleWidth.value = Math.ceil(190*scale)+'px'\n        rootNodeStyleFontSize.value= Math.ceil(13*scale)+'px'\n        rootNodeStyleHeigt.value = Math.ceil(30*scale)+'px'\n        rootNodeStyleLineHeight.value = Math.ceil(10*scale)+'px'\n    }else {\n        tree.style.width='max-content'\n    }\n    depTreeInfo.data = treeRoot\n  }\n}\nonMounted(()=>{\n    asyncDrawGraph()\n})\n\nconst filterData = (arr,key)=>{\n    if(arr.length){\n        if(key === 'all'){\n            return arr\n        }else {\n            return arr.filter(item=>item.deptName === key)\n        }\n    }\n}\n\nconst filterLevelkeys = (arr,key)=>{\n    if(arr.length){\n        let expandKeys = []\n        switch (key) {\n            case 'all':\n                function getKeys(arr){\n                    arr.forEach(item=>{\n                        expandKeys.push(item.key)\n                        if(item?.children?.length){\n                            getKeys(item.children)\n                        }\n                    })\n                }\n                getKeys(arr)\n                break;\n            case 'level1' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                })\n                break;\n            case 'level2' :\n                arr.forEach(item=>{\n                    expandKeys.push(item.key)\n                    if(item?.children?.length){\n                       item.children.forEach(jtem=>{\n                        expandKeys.push(jtem.key)\n                       })\n                    }\n                })\n                break;\n            default:\n                expandKeys = []\n                break;\n        }\n        return expandKeys\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.treeComponent {\n    transform: translate(43%,0);\n}\n.relative{\n    position: relative;\n}\n.radio-group-absolute{\n    position: absolute;\n    top: 26px;\n    right: 30px;\n    z-index: 1;\n}\n.radio-group-fixed{\n    position: fixed;\n    right: 60px;\n    z-index: 1;\n}\n.treeBox {\n  height: 100%;\n  display: flex;\n  margin: 0 0 0 -160px;\n  :deep(.zm-tree-org .zm-draggable) {\n    position: static;\n    transform: translateY(0) !important;\n  }\n  :deep(.tree-org-node.is-leaf .tree-org-node__content .tree-org-node__inner){ \n    box-shadow: none;\n  }\n  :deep(.tree-org-node__children:before){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:not(:first-child):before, .tree-org-node:not(:last-child):after){\n    border-color: #E0E6F1;\n  }\n  :deep(.tree-org-node:after){\n    border-color: #E0E6F1;\n  }\n  :deep(.rootNode){\n    width : v-bind(rootNodeStyleWidth) !important;\n    height : v-bind(rootNodeStyleHeigt) !important;\n    font-size : v-bind(rootNodeStyleFontSize) !important;\n    display : flex;\n    justify-content:center;\n    align-items : center;\n  }\n}\n.m-r-70{\n    margin-right: 70px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}