{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { ConfigService, createEntity as _createEntity } from '@antv/g-webgpu-core';\nimport { WebGLEngine } from '@antv/g-webgpu-engine';\nimport { Kernel } from './Kernel';\nexport var World = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n    this.engine = void 0;\n    this.configService = new ConfigService();\n  }\n  _createClass(World, [{\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.configService.set(config);\n    }\n  }, {\n    key: \"setEngine\",\n    value: function setEngine(engine) {\n      this.engine = engine;\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity() {\n      return _createEntity();\n    }\n  }, {\n    key: \"createKernel\",\n    value: function createKernel(precompiledBundle) {\n      var kernel = new Kernel(this.engine, this.configService);\n      if (typeof precompiledBundle === 'string') {\n        kernel.setBundle(JSON.parse(precompiledBundle));\n      } else {\n        kernel.setBundle(precompiledBundle);\n      }\n      kernel.init();\n      return kernel;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.engine.destroy();\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var world = new World();\n      world.setConfig(config);\n      world.setEngine(new WebGLEngine());\n      return world;\n    }\n  }]);\n  return World;\n}();","map":{"version":3,"mappings":";;AAAA,SACEA,aAAa,EACbC,YAAY,IAAZA,aAAY,QAIP,qBAAqB;AAC5B,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,MAAM,QAAQ,UAAU;AAEjC,WAAaC,KAAK;EAAA;IAAAC;IAAA,KAQTC,MAAM;IAAA,KAEIC,aAAa,GAAmB,IAAIP,aAAa,EAAE;EAAA;EAAAQ;IAAAC;IAAAC,OAEpE,mBAAiBC,MAAwB,EAAE;MACzC,IAAI,CAACJ,aAAa,CAACK,GAAG,CAACD,MAAM,CAAC;IAChC;EAAC;IAAAF;IAAAC,OACD,mBAAiBJ,MAAmB,EAAE;MACpC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACtB;EAAC;IAAAG;IAAAC,OAED,wBAAsB;MACpB,OAAOT,aAAY,EAAE;IACvB;EAAC;IAAAQ;IAAAC,OAED,sBAAoBG,iBAAwC,EAAE;MAC5D,IAAMC,MAAM,GAAG,IAAIX,MAAM,CAAC,IAAI,CAACG,MAAM,EAAE,IAAI,CAACC,aAAa,CAAC;MAC1D,IAAI,OAAOM,iBAAiB,KAAK,QAAQ,EAAE;QACzCC,MAAM,CAACC,SAAS,CAACC,IAAI,CAACC,KAAK,CAACJ,iBAAiB,CAAC,CAAC;MACjD,CAAC,MAAM;QACLC,MAAM,CAACC,SAAS,CAACF,iBAAiB,CAAC;MACrC;MACAC,MAAM,CAACI,IAAI,EAAE;MACb,OAAOJ,MAAM;IACf;EAAC;IAAAL;IAAAC,OAED,mBAAiB;MACf,IAAI,CAACJ,MAAM,CAACa,OAAO,EAAE;IACvB;EAAC;IAAAV;IAAAC,OAnCD,kBAAoD;MAAA,IAA/BC,MAAwB,uEAAG,CAAC,CAAC;MAChD,IAAMS,KAAK,GAAG,IAAIhB,KAAK,EAAE;MACzBgB,KAAK,CAACC,SAAS,CAACV,MAAM,CAAC;MACvBS,KAAK,CAACE,SAAS,CAAC,IAAIpB,WAAW,EAAE,CAAC;MAClC,OAAOkB,KAAK;IACd;EAAC;EAAA;AAAA","names":["ConfigService","createEntity","WebGLEngine","Kernel","World","_classCallCheck","engine","configService","_createClass","key","value","config","set","precompiledBundle","kernel","setBundle","JSON","parse","init","destroy","world","setConfig","setEngine"],"sources":["../src/World.ts"],"sourcesContent":["import {\n  ConfigService,\n  createEntity,\n  IConfig,\n  IConfigService,\n  KernelBundle,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine } from '@antv/g-webgpu-engine';\nimport { Kernel } from './Kernel';\n\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const world = new World();\n    world.setConfig(config);\n    world.setEngine(new WebGLEngine());\n    return world;\n  }\n\n  public engine: WebGLEngine;\n\n  private readonly configService: IConfigService = new ConfigService();\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n  public setEngine(engine: WebGLEngine) {\n    this.engine = engine;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = new Kernel(this.engine, this.configService);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public destroy() {\n    this.engine.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}