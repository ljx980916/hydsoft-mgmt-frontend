{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-16f71d42\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"relative\"\n};\nconst _hoisted_2 = {\n  ref: \"treeContainer\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"mask\"\n}, null, -1));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512), _hoisted_3]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAU;;EACdC,GAAG,EAAC;AAAe;gEAExBC,oBAAwB;EAAnBF,KAAK,EAAC;AAAM;;uBAHnBG,oBAIM,OAJNC,UAIM,GAHJF,oBACM,OADNG,UACM,cACNC,UAAwB","names":["class","ref","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3"],"sourceRoot":"","sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/staffStatistics/IndentedTree.vue"],"sourcesContent":["<template>\n  <div class=\"relative\">\n    <div ref=\"treeContainer\">\n    </div>\n    <div class=\"mask\"></div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nconst bgColorMap = new Map([\n  [1 , '#6587F6'],\n  [2 , '#E8ECFF'],\n  [3 , '#F6F8FC'],\n  [4 , '#FFFFFF']\n])\n\nexport default defineComponent({\n  name: 'IndentedTree',\n  props: {\n    treeData: {\n      type: Object,\n      required: true\n    },\n    width : {\n      type : Number,\n      default : 300\n    },\n    scale : {\n      type : Number,\n      default : 1\n    },\n    nodeName : {\n      type : String,\n      default : 'name'\n    }\n  },\n  mounted() {\n    this.createTree();\n  },\n  updated(){\n    this.createTree();\n  },\n  methods: {\n    createTree() {\n      let _this=this\n      // 禁用拖拽行为\n      var ElementView = joint.dia.ElementView.extend({\n        pointerdown: function () { },\n        pointermove: function () { },\n        pointerup: function () { }\n    });\n    var LinkView = joint.dia.LinkView.extend({\n        addVertex: function (evt, x, y) { },\n        removeVertex: function (endType) { },\n        pointerdown: function (evt, x, y) { }\n    });\n      const graph = new joint.dia.Graph();\n      \n      let currentY = 0;\n\n      function calculatePosition(node, level=0) {\n        let divideLen = (''+node[_this.nodeName]).split(/-/gi).length\n        let x = 0\n        x = level * 14 + (8* (divideLen-1))\n\n        // if(divideLen === 2){\n        //   x = level * 41\n        // }else if(divideLen===3 ){\n        //   x = level * 51\n        // }else if(divideLen===4 ){\n        //   x = level * 61\n        // }else{\n        //  x = level * 50 + ((divideLen===3?15:20) * (divideLen-1))\n        // }\n        node.x = x\n        node.y = currentY;\n        currentY += 40;\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            calculatePosition(\n              node.children[i],\n              level + 1\n            );\n          }\n        }\n      }\n      // Clone the tree data to avoid modifying the original data\n      const clonedTree = JSON.parse(JSON.stringify(this.treeData));\n\n      // Calculate positions for each node in the tree\n      calculatePosition(clonedTree, 0, 0);\n      const paper = new joint.dia.Paper({\n        el: this.$refs.treeContainer,\n        model: graph,\n        width: this.width,\n        height: currentY*this.scale,\n        gridSize: 1,\n        elementView: ElementView,\n        linkView: LinkView\n      });\n      paper.scale(this.scale)\n      function createNode(node) {\n        let divideLen = (''+node[_this.nodeName]).split(/-/gi).length\n        const rect = new joint.shapes.standard.Rectangle({\n          position: { x: node.x, y: node.y },\n          size: { width: 60+((divideLen-1)*38), height: 32 },\n          attrs: {\n            body: { \n                    fill: bgColorMap.get(divideLen) || 'lightblue', \n                    stroke: '#E0E6F1',//边框颜色\n                    'stroke-width': 1,//边框大小 \n                  },\n            label: { text: node[_this.nodeName],fill : divideLen===1?\"#F5ECFE\":\"#778092\",'font-size': 12,textVerticalAnchor: '0.4em' },\n          }\n        });\n        graph.addCell(rect);\n\n        if (node.children) {\n          for (let i = 0; i < node.children.length; i++) {\n            const child = createNode(node.children[i]);\n\n            const link = new joint.shapes.standard.Link({\n              source: { id: rect.id },\n              target: { id: child.id },\n              router: { name: 'manhattan' }\n            });\n            link.source(rect, {\n                selector: 'body',\n                anchor: {\n                    name: 'bottomLeft',\n                    args: {\n                        dx: 10,\n                        dy: 0\n                    }\n                }\n            });\n            link.attr({\n                line: {\n                    stroke: '#E0E6F1',\n                    strokeWidth: 1,\n                    sourceMarker: {\n                        'type': 'path',\n                        'stroke': 'transparent',\n                        'fill': 'transparent',\n                        'd': 'M 10 -5 0 0 10 5 Z'\n                    },\n                    targetMarker: {\n                        'type': 'path',\n                        'stroke': 'transparent',\n                        'fill': 'transparent',\n                        'd': 'M 10 -5 0 0 10 5 Z'\n                    }\n                }\n            });\n            graph.addCell(link);\n          }\n        }\n\n        return rect;\n      }\n\n      createNode(clonedTree);\n    }\n  }\n})\n</script>\n\n<style scoped>\n.relative{\n  position: relative;\n}\n.mask {\n  position:absolute;\n  left: 0;\n  top:0;\n  right:0;\n  bottom:0;\n  z-index: 1;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}