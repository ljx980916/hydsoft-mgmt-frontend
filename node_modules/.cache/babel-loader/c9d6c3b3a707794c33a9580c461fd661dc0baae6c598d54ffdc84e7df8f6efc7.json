{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _queue = _interopRequireDefault(require(\"./structs/queue\"));\nvar _util = require(\"./util\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n *\n * @param callbacks\n * allowTraversal: 确定 BFS 是否从顶点沿着边遍历到其邻居，默认情况下，同一个节点只能遍历一次\n * enterNode: 当 BFS 访问某个节点时调用\n * leaveNode: 当 BFS 访问访问结束某个节点时调用\n */\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n  var initiatedCallback = callbacks;\n  var stubCallback = function stubCallback() {};\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      var id = next;\n      if (!seen[id]) {\n        seen[id] = true;\n        return true;\n      }\n      return false;\n    };\n  }();\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * 广度优先遍历图\n * @param graph Graph 图实例\n * @param startNode 开始遍历的节点\n * @param originalCallbacks 回调\n */\n\nvar breadthFirstSearch = function breadthFirstSearch(graphData, startNodeId, originalCallbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n  var callbacks = initCallbacks(originalCallbacks);\n  var nodeQueue = new _queue.default();\n  var _a = graphData.edges,\n    edges = _a === void 0 ? [] : _a; // 初始化队列元素\n\n  nodeQueue.enqueue(startNodeId);\n  var previousNode = '';\n  var _loop_1 = function _loop_1() {\n    var currentNode = nodeQueue.dequeue();\n    callbacks.enter({\n      current: currentNode,\n      previous: previousNode\n    }); // 将所有邻居添加到队列中以便遍历\n\n    (0, _util.getNeighbors)(currentNode, edges, directed ? 'target' : undefined).forEach(function (nextNode) {\n      if (callbacks.allowTraversal({\n        previous: previousNode,\n        current: currentNode,\n        next: nextNode\n      })) {\n        nodeQueue.enqueue(nextNode);\n      }\n    });\n    callbacks.leave({\n      current: currentNode,\n      previous: previousNode\n    }); // 下一次循环之前存储当前顶点\n\n    previousNode = currentNode;\n  }; // 遍历队列中的所有顶点\n\n  while (!nodeQueue.isEmpty()) {\n    _loop_1();\n  }\n};\nvar _default = breadthFirstSearch;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_queue","_interopRequireDefault","require","_util","obj","__esModule","initCallbacks","callbacks","initiatedCallback","stubCallback","allowTraversalCallback","seen","_a","next","id","allowTraversal","enter","leave","breadthFirstSearch","graphData","startNodeId","originalCallbacks","directed","nodeQueue","edges","enqueue","previousNode","_loop_1","currentNode","dequeue","current","previous","getNeighbors","undefined","forEach","nextNode","isEmpty","_default"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/node_modules/@antv/algorithm/lib/bfs.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _queue = _interopRequireDefault(require(\"./structs/queue\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @param callbacks\n * allowTraversal: 确定 BFS 是否从顶点沿着边遍历到其邻居，默认情况下，同一个节点只能遍历一次\n * enterNode: 当 BFS 访问某个节点时调用\n * leaveNode: 当 BFS 访问访问结束某个节点时调用\n */\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      var id = next;\n\n      if (!seen[id]) {\n        seen[id] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * 广度优先遍历图\n * @param graph Graph 图实例\n * @param startNode 开始遍历的节点\n * @param originalCallbacks 回调\n */\n\n\nvar breadthFirstSearch = function breadthFirstSearch(graphData, startNodeId, originalCallbacks, directed) {\n  if (directed === void 0) {\n    directed = true;\n  }\n\n  var callbacks = initCallbacks(originalCallbacks);\n  var nodeQueue = new _queue.default();\n  var _a = graphData.edges,\n      edges = _a === void 0 ? [] : _a; // 初始化队列元素\n\n  nodeQueue.enqueue(startNodeId);\n  var previousNode = '';\n\n  var _loop_1 = function _loop_1() {\n    var currentNode = nodeQueue.dequeue();\n    callbacks.enter({\n      current: currentNode,\n      previous: previousNode\n    }); // 将所有邻居添加到队列中以便遍历\n\n    (0, _util.getNeighbors)(currentNode, edges, directed ? 'target' : undefined).forEach(function (nextNode) {\n      if (callbacks.allowTraversal({\n        previous: previousNode,\n        current: currentNode,\n        next: nextNode\n      })) {\n        nodeQueue.enqueue(nextNode);\n      }\n    });\n    callbacks.leave({\n      current: currentNode,\n      previous: previousNode\n    }); // 下一次循环之前存储当前顶点\n\n    previousNode = currentNode;\n  }; // 遍历队列中的所有顶点\n\n\n  while (!nodeQueue.isEmpty()) {\n    _loop_1();\n  }\n};\n\nvar _default = breadthFirstSearch;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}