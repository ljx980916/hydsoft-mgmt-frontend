{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _isTypedArray from \"lodash/isTypedArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AST_TOKEN_TYPES, createEntity, STORAGE_CLASS } from '@antv/g-webgpu-core';\n/* babel-plugin-inline-import './shaders/quad.vert.glsl' */\nvar quadVert = \"attribute vec3 a_Position;\\nattribute vec2 a_TexCoord;\\n\\nvarying vec2 v_TexCoord;\\n\\nvoid main() {\\n  gl_Position = vec4(a_Position, 1.0);\\n  v_TexCoord = a_TexCoord;\\n}\";\nvar textureId = 0;\nvar debug = false;\n\n/**\n * adaptor for regl.DrawCommand\n */\nvar ReglComputeModel = /*#__PURE__*/function () {\n  function ReglComputeModel(reGl, context) {\n    var _this = this;\n    _classCallCheck(this, ReglComputeModel);\n    this.reGl = reGl;\n    this.context = context;\n    this.entity = createEntity();\n    this.texFBO = void 0;\n    this.computeCommand = void 0;\n    this.textureCache = {};\n    this.outputTextureName = void 0;\n    this.swapOutputTextureName = void 0;\n    this.compiledPingpong = void 0;\n    this.dynamicPingpong = void 0;\n    var uniforms = {};\n    this.context.uniforms.forEach(function (uniform) {\n      var name = uniform.name,\n        type = uniform.type,\n        data = uniform.data,\n        isReferer = uniform.isReferer,\n        storageClass = uniform.storageClass;\n      // store data with a 2D texture\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          _this.textureCache[name] = _this.calcDataTexture(name, type, data);\n          var _this$textureCache$na = _this.textureCache[name],\n            width = _this$textureCache$na.textureWidth,\n            isOutput = _this$textureCache$na.isOutput;\n          uniforms[\"\".concat(name, \"Size\")] = [width, width];\n          if (isOutput) {\n            _this.outputTextureName = name;\n            if (_this.context.needPingpong) {\n              _this.outputTextureName = \"\".concat(name, \"Output\");\n              _this.textureCache[_this.outputTextureName] = _this.calcDataTexture(name, type, data);\n            }\n          }\n        } else {\n          // @ts-ignore\n          _this.textureCache[name] = {\n            data: undefined\n          };\n          // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n          uniforms[\"\".concat(name, \"Size\")] = function () {\n            return (\n              // @ts-ignore\n              data.compiledBundle.context.output.textureSize\n            );\n          };\n        }\n        uniforms[name] = function () {\n          if (debug) {\n            console.log(\"[\".concat(_this.entity, \"]: \").concat(name, \" \").concat(_this.textureCache[name].id));\n          }\n          return _this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (data && (Array.isArray(data) || _isTypedArray(data)) && data.length > 16) {\n          // up to mat4 which includes 16 elements\n          throw new Error(\"invalid data type \".concat(type));\n        }\n        // get uniform dynamically\n        uniforms[name] = function () {\n          return uniform.data;\n        };\n      }\n    });\n    var _this$getOuputDataTex = this.getOuputDataTexture(),\n      textureWidth = _this$getOuputDataTex.textureWidth,\n      texelCount = _this$getOuputDataTex.texelCount;\n\n    // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount;\n\n    // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n    this.context.output.textureSize = [textureWidth, textureWidth];\n    var drawParams = {\n      attributes: {\n        a_Position: [[-1, 1, 0], [-1, -1, 0], [1, 1, 0], [1, -1, 0]],\n        a_TexCoord: [[0, 1], [0, 0], [1, 1], [1, 0]]\n      },\n      frag: \"#ifdef GL_FRAGMENT_PRECISION_HIGH\\n  precision highp float;\\n#else\\n  precision mediump float;\\n#endif\\n\".concat(this.context.shader),\n      uniforms: uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4\n    };\n    this.computeCommand = this.reGl(drawParams);\n  }\n  _createClass(ReglComputeModel, [{\n    key: \"run\",\n    value: function run() {\n      var _this2 = this;\n      if (this.context.maxIteration > 1 && this.context.needPingpong) {\n        this.compiledPingpong = true;\n      }\n      // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n      // this.needPingpong =\n      //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n\n      // if (this.relativeOutputTextureNames.length) {\n      //   const { id, texture } = this.getOuputDataTexture();\n      //   this.relativeOutputTextureNames.forEach((name) => {\n      //     this.textureCache[name].id = id;\n      //     this.textureCache[name].texture = texture;\n      //   });\n      //   this.swap();\n      // }\n\n      if (this.compiledPingpong || this.dynamicPingpong) {\n        this.swap();\n      }\n      this.texFBO = this.reGl.framebuffer({\n        color: this.getOuputDataTexture().texture\n      });\n      this.texFBO.use(function () {\n        _this2.computeCommand();\n      });\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"readData\",\n    value: function () {\n      var _readData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n        var pixels, _this$getOuputDataTex2, originalDataLength, elementsPerTexel, _this$getOuputDataTex3, typedArrayConstructor, formattedPixels, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.reGl({\n                  framebuffer: this.texFBO\n                })(function () {\n                  pixels = _this3.reGl.read();\n                });\n\n                // @ts-ignore\n                if (!pixels) {\n                  _context.next = 6;\n                  break;\n                }\n                _this$getOuputDataTex2 = this.getOuputDataTexture(), originalDataLength = _this$getOuputDataTex2.originalDataLength, elementsPerTexel = _this$getOuputDataTex2.elementsPerTexel, _this$getOuputDataTex3 = _this$getOuputDataTex2.typedArrayConstructor, typedArrayConstructor = _this$getOuputDataTex3 === void 0 ? Float32Array : _this$getOuputDataTex3;\n                formattedPixels = [];\n                if (elementsPerTexel !== 4) {\n                  for (i = 0; i < pixels.length; i += 4) {\n                    if (elementsPerTexel === 1) {\n                      formattedPixels.push(pixels[i]);\n                    } else if (elementsPerTexel === 2) {\n                      formattedPixels.push(pixels[i], pixels[i + 1]);\n                    } else {\n                      formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n                    }\n                  }\n                } else {\n                  // @ts-ignore\n                  formattedPixels = pixels;\n                }\n\n                // 截取多余的部分\n                // @ts-ignore\n                return _context.abrupt(\"return\", new typedArrayConstructor(formattedPixels.slice(0, originalDataLength)));\n              case 6:\n                return _context.abrupt(\"return\", new Float32Array());\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function readData() {\n        return _readData.apply(this, arguments);\n      }\n      return readData;\n    }()\n  }, {\n    key: \"confirmInput\",\n    value: function confirmInput(model, inputName) {\n      var inputModel;\n      // refer to self, same as pingpong\n      if (this.entity === model.entity) {\n        this.dynamicPingpong = true;\n        inputModel = this;\n      } else {\n        inputModel = model;\n      }\n      this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n      this.textureCache[inputName].texture = inputModel.getOuputDataTexture().texture;\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: confirm input \").concat(inputName, \" from model \").concat(inputModel.entity, \", \").concat(inputModel.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"updateUniform\",\n    value: function updateUniform() {\n      // already get uniform's data dynamically when created, do nothing here\n    }\n  }, {\n    key: \"updateBuffer\",\n    value: function updateBuffer(bufferName, data) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // regenerate data texture\n      var buffer = this.context.uniforms.find(function (_ref) {\n        var name = _ref.name;\n        return name === bufferName;\n      });\n      if (buffer) {\n        var _this$calcDataTexture = this.calcDataTexture(bufferName, buffer.type, data),\n          texture = _this$calcDataTexture.texture,\n          paddingData = _this$calcDataTexture.data;\n\n        // TODO: destroy outdated texture\n        this.textureCache[bufferName].data = paddingData;\n        this.textureCache[bufferName].texture = texture;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // regl will destroy all resources\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      if (!this.swapOutputTextureName) {\n        this.createSwapOutputDataTexture();\n      }\n      if (this.compiledPingpong) {\n        var outputTextureUniformName = this.context.output.name;\n        this.textureCache[outputTextureUniformName].id = this.getOuputDataTexture().id;\n        this.textureCache[outputTextureUniformName].texture = this.getOuputDataTexture().texture;\n      }\n      var tmp = this.outputTextureName;\n      this.outputTextureName = this.swapOutputTextureName;\n      this.swapOutputTextureName = tmp;\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: after swap, output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"getOuputDataTexture\",\n    value: function getOuputDataTexture() {\n      return this.textureCache[this.outputTextureName];\n    }\n  }, {\n    key: \"createSwapOutputDataTexture\",\n    value: function createSwapOutputDataTexture() {\n      var texture = this.cloneDataTexture(this.getOuputDataTexture());\n      this.swapOutputTextureName = \"\".concat(this.entity, \"-swap\");\n      this.textureCache[this.swapOutputTextureName] = texture;\n    }\n  }, {\n    key: \"cloneDataTexture\",\n    value: function cloneDataTexture(texture) {\n      var data = texture.data,\n        textureWidth = texture.textureWidth;\n      return _objectSpread(_objectSpread({}, texture), {}, {\n        id: textureId++,\n        // @ts-ignore\n        texture: this.reGl.texture({\n          width: textureWidth,\n          height: textureWidth,\n          data: data,\n          type: 'float'\n        })\n      });\n    }\n  }, {\n    key: \"calcDataTexture\",\n    value: function calcDataTexture(name, type, data) {\n      var elementsPerTexel = 1;\n      if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n        elementsPerTexel = 4;\n      }\n\n      // 用 0 补全不足 vec4 的部分\n      var paddingData = [];\n      for (var i = 0; i < data.length; i += elementsPerTexel) {\n        if (elementsPerTexel === 1) {\n          paddingData.push(data[i], 0, 0, 0);\n        } else if (elementsPerTexel === 2) {\n          paddingData.push(data[i], data[i + 1], 0, 0);\n        } else if (elementsPerTexel === 3) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], 0);\n        } else if (elementsPerTexel === 4) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], data[i + 3]);\n        }\n      }\n\n      // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n      var originalDataLength = data.length;\n      var texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n      var width = Math.ceil(Math.sqrt(texelCount));\n      var paddingTexelCount = width * width;\n      if (texelCount < paddingTexelCount) {\n        paddingData.push.apply(paddingData, _toConsumableArray(new Array((paddingTexelCount - texelCount) * 4).fill(0)));\n      }\n      var texture = this.reGl.texture({\n        width: width,\n        height: width,\n        data: paddingData,\n        type: 'float'\n      });\n      return {\n        id: textureId++,\n        data: paddingData,\n        originalDataLength: originalDataLength,\n        typedArrayConstructor: _isTypedArray(data) ? data.constructor : undefined,\n        textureWidth: width,\n        texture: texture,\n        texelCount: texelCount,\n        elementsPerTexel: elementsPerTexel,\n        isOutput: name === this.context.output.name\n      };\n    }\n  }]);\n  return ReglComputeModel;\n}();\nexport { ReglComputeModel as default };","map":{"version":3,"mappings":"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","names":["AST_TOKEN_TYPES","createEntity","STORAGE_CLASS","textureId","debug","ReglComputeModel","reGl","context","_classCallCheck","entity","texFBO","computeCommand","textureCache","outputTextureName","swapOutputTextureName","compiledPingpong","dynamicPingpong","uniforms","forEach","uniform","name","type","data","isReferer","storageClass","StorageBuffer","_this","calcDataTexture","width","textureWidth","isOutput","needPingpong","undefined","compiledBundle","output","textureSize","console","log","id","texture","Uniform","Array","isArray","_isTypedArray","length","Error","getOuputDataTexture","texelCount","u_OutputTextureSize","u_OutputTexelCount","drawParams","attributes","a_Position","a_TexCoord","frag","shader","vert","quadVert","primitive","count","_createClass","key","value","maxIteration","swap","framebuffer","color","use","_this2","pixels","_this3","read","_context","_this$getOuputDataTex2","originalDataLength","elementsPerTexel","typedArrayConstructor","Float32Array","formattedPixels","i","push","slice","model","inputName","inputModel","bufferName","offset","buffer","find","paddingData","createSwapOutputDataTexture","outputTextureUniformName","tmp","cloneDataTexture","height","Vector4FloatArray","Math","ceil","sqrt","paddingTexelCount","fill","constructor"],"sources":["../../src/webgl/ReglComputeModel.ts"],"sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DataType,\n  GLSLContext,\n  IComputeModel,\n  STORAGE_CLASS,\n} from '@antv/g-webgpu-core';\nimport { isTypedArray } from 'lodash';\nimport regl from 'regl';\nimport quadVert from './shaders/quad.vert.glsl';\n\ninterface DataTextureDescriptor {\n  id: number;\n  data:\n    | number\n    | number[]\n    | Float32Array\n    | Uint8Array\n    | Uint16Array\n    | Uint32Array\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | undefined;\n  textureWidth: number;\n  texture: regl.Texture2D;\n  texelCount: number;\n  originalDataLength: number;\n  elementsPerTexel: number;\n  typedArrayConstructor?: Function;\n  isOutput: boolean;\n}\n\nlet textureId = 0;\nconst debug = false;\n\n/**\n * adaptor for regl.DrawCommand\n */\nexport default class ReglComputeModel implements IComputeModel {\n  private entity = createEntity();\n  private texFBO: regl.Framebuffer2D;\n  private computeCommand: regl.DrawCommand;\n  private textureCache: {\n    [textureName: string]: DataTextureDescriptor;\n  } = {};\n  private outputTextureName: string;\n  private swapOutputTextureName: string;\n  private compiledPingpong: boolean;\n  private dynamicPingpong: boolean;\n\n  constructor(private reGl: regl.Regl, private context: GLSLContext) {\n    const uniforms: Record<string, any> = {};\n    this.context.uniforms.forEach((uniform) => {\n      const { name, type, data, isReferer, storageClass } = uniform;\n      // store data with a 2D texture\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          this.textureCache[name] = this.calcDataTexture(name, type, data!);\n          const { textureWidth: width, isOutput } = this.textureCache[name];\n          uniforms[`${name}Size`] = [width, width];\n\n          if (isOutput) {\n            this.outputTextureName = name;\n            if (this.context.needPingpong) {\n              this.outputTextureName = `${name}Output`;\n              this.textureCache[this.outputTextureName] = this.calcDataTexture(\n                name,\n                type,\n                data!,\n              );\n            }\n          }\n        } else {\n          // @ts-ignore\n          this.textureCache[name] = {\n            data: undefined,\n          };\n          // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n          uniforms[`${name}Size`] = () =>\n            // @ts-ignore\n            data.compiledBundle.context.output.textureSize;\n        }\n\n        uniforms[name] = () => {\n          if (debug) {\n            console.log(\n              `[${this.entity}]: ${name} ${this.textureCache[name].id}`,\n            );\n          }\n          return this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (\n          data &&\n          (Array.isArray(data) || isTypedArray(data)) &&\n          (data as ArrayLike<number>).length > 16\n        ) {\n          // up to mat4 which includes 16 elements\n          throw new Error(`invalid data type ${type}`);\n        }\n        // get uniform dynamically\n        uniforms[name] = () => uniform.data;\n      }\n    });\n\n    const { textureWidth, texelCount } = this.getOuputDataTexture();\n\n    // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount;\n\n    // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n    this.context.output.textureSize = [textureWidth!, textureWidth!];\n\n    const drawParams: regl.DrawConfig = {\n      attributes: {\n        a_Position: [\n          [-1, 1, 0],\n          [-1, -1, 0],\n          [1, 1, 0],\n          [1, -1, 0],\n        ],\n        a_TexCoord: [\n          [0, 1],\n          [0, 0],\n          [1, 1],\n          [1, 0],\n        ],\n      },\n      frag: `#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n${this.context.shader}`,\n      uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4,\n    };\n\n    this.computeCommand = this.reGl(drawParams);\n  }\n\n  public run() {\n    if (this.context.maxIteration > 1 && this.context.needPingpong) {\n      this.compiledPingpong = true;\n    }\n    // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n    // this.needPingpong =\n    //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n\n    // if (this.relativeOutputTextureNames.length) {\n    //   const { id, texture } = this.getOuputDataTexture();\n    //   this.relativeOutputTextureNames.forEach((name) => {\n    //     this.textureCache[name].id = id;\n    //     this.textureCache[name].texture = texture;\n    //   });\n    //   this.swap();\n    // }\n\n    if (this.compiledPingpong || this.dynamicPingpong) {\n      this.swap();\n    }\n\n    this.texFBO = this.reGl.framebuffer({\n      color: this.getOuputDataTexture().texture,\n    });\n    this.texFBO.use(() => {\n      this.computeCommand();\n    });\n    if (debug) {\n      console.log(`[${this.entity}]: output ${this.getOuputDataTexture().id}`);\n    }\n  }\n\n  public async readData() {\n    let pixels: Uint8Array | Float32Array;\n    this.reGl({\n      framebuffer: this.texFBO,\n    })(() => {\n      pixels = this.reGl.read();\n    });\n\n    // @ts-ignore\n    if (pixels) {\n      const {\n        originalDataLength,\n        elementsPerTexel,\n        typedArrayConstructor = Float32Array,\n      } = this.getOuputDataTexture();\n\n      let formattedPixels = [];\n      if (elementsPerTexel !== 4) {\n        for (let i = 0; i < pixels.length; i += 4) {\n          if (elementsPerTexel === 1) {\n            formattedPixels.push(pixels[i]);\n          } else if (elementsPerTexel === 2) {\n            formattedPixels.push(pixels[i], pixels[i + 1]);\n          } else {\n            formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n          }\n        }\n      } else {\n        // @ts-ignore\n        formattedPixels = pixels;\n      }\n\n      // 截取多余的部分\n      // @ts-ignore\n      return new typedArrayConstructor(\n        formattedPixels.slice(0, originalDataLength),\n      );\n    }\n\n    return new Float32Array();\n  }\n\n  public confirmInput(model: IComputeModel, inputName: string) {\n    let inputModel: ReglComputeModel;\n    // refer to self, same as pingpong\n    if (this.entity === (model as ReglComputeModel).entity) {\n      this.dynamicPingpong = true;\n      inputModel = this;\n    } else {\n      inputModel = model as ReglComputeModel;\n    }\n\n    this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n    this.textureCache[\n      inputName\n    ].texture = inputModel.getOuputDataTexture().texture;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: confirm input ${inputName} from model ${\n          inputModel.entity\n        }, ${(inputModel as ReglComputeModel).getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  public updateUniform() {\n    // already get uniform's data dynamically when created, do nothing here\n  }\n\n  public updateBuffer(\n    bufferName: string,\n    data:\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n    offset: number = 0,\n  ) {\n    // regenerate data texture\n    const buffer = this.context.uniforms.find(\n      ({ name }) => name === bufferName,\n    );\n    if (buffer) {\n      const { texture, data: paddingData } = this.calcDataTexture(\n        bufferName,\n        buffer.type,\n        data,\n      );\n\n      // TODO: destroy outdated texture\n      this.textureCache[bufferName].data = paddingData;\n      this.textureCache[bufferName].texture = texture;\n    }\n  }\n\n  public destroy() {\n    // regl will destroy all resources\n  }\n\n  private swap() {\n    if (!this.swapOutputTextureName) {\n      this.createSwapOutputDataTexture();\n    }\n\n    if (this.compiledPingpong) {\n      const outputTextureUniformName = this.context.output.name;\n      this.textureCache[\n        outputTextureUniformName\n      ].id = this.getOuputDataTexture().id;\n      this.textureCache[\n        outputTextureUniformName\n      ].texture = this.getOuputDataTexture().texture;\n    }\n\n    const tmp = this.outputTextureName;\n    this.outputTextureName = this.swapOutputTextureName;\n    this.swapOutputTextureName = tmp;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: after swap, output ${this.getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  private getOuputDataTexture() {\n    return this.textureCache[this.outputTextureName];\n  }\n\n  private createSwapOutputDataTexture() {\n    const texture = this.cloneDataTexture(this.getOuputDataTexture());\n    this.swapOutputTextureName = `${this.entity}-swap`;\n    this.textureCache[this.swapOutputTextureName] = texture;\n  }\n\n  private cloneDataTexture(texture: DataTextureDescriptor) {\n    const { data, textureWidth } = texture;\n    return {\n      ...texture,\n      id: textureId++,\n      // @ts-ignore\n      texture: this.reGl.texture({\n        width: textureWidth,\n        height: textureWidth,\n        data,\n        type: 'float',\n      }),\n    };\n  }\n\n  private calcDataTexture(\n    name: string,\n    type: DataType,\n    data:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n  ) {\n    let elementsPerTexel = 1;\n    if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n      elementsPerTexel = 4;\n    }\n\n    // 用 0 补全不足 vec4 的部分\n    const paddingData: number[] = [];\n    for (let i = 0; i < (data as number[]).length; i += elementsPerTexel) {\n      if (elementsPerTexel === 1) {\n        paddingData.push((data as number[])[i], 0, 0, 0);\n      } else if (elementsPerTexel === 2) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          0,\n          0,\n        );\n      } else if (elementsPerTexel === 3) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          0,\n        );\n      } else if (elementsPerTexel === 4) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          (data as number[])[i + 3],\n        );\n      }\n    }\n\n    // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n    const originalDataLength = (data as ArrayLike<number>).length;\n    const texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n    const width = Math.ceil(Math.sqrt(texelCount));\n    const paddingTexelCount = width * width;\n    if (texelCount < paddingTexelCount) {\n      paddingData.push(\n        ...new Array((paddingTexelCount - texelCount) * 4).fill(0),\n      );\n    }\n\n    const texture = this.reGl.texture({\n      width,\n      height: width,\n      data: paddingData,\n      type: 'float',\n    });\n\n    return {\n      id: textureId++,\n      data: paddingData,\n      originalDataLength,\n      typedArrayConstructor: isTypedArray(data) ? data!.constructor : undefined,\n      textureWidth: width,\n      texture,\n      texelCount,\n      elementsPerTexel,\n      isOutput: name === this.context.output.name,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}