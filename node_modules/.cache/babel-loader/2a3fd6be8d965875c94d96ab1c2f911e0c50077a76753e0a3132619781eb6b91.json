{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { paramsParser } from '../parser/params-parser';\nimport { clonePath } from '../process/clone-path';\nimport { fixArc } from '../process/fix-arc';\nimport { normalizePath } from '../process/normalize-path';\nimport { isCurveArray } from '../util/is-curve-array';\nimport { segmentToCubic } from '../process/segment-2-cubic';\n// import { fixPath } from '../process/fix-path';\nexport function path2Curve(pathInput, needZCommandIndexes) {\n  if (needZCommandIndexes === void 0) {\n    needZCommandIndexes = false;\n  }\n  if (isCurveArray(pathInput)) {\n    var cloned = clonePath(pathInput);\n    if (needZCommandIndexes) {\n      return [cloned, []];\n    } else {\n      return cloned;\n    }\n  }\n  // fixPath will remove 'Z' command\n  // const path = fixPath(normalizePath(pathInput));\n  var path = normalizePath(pathInput);\n  var params = __assign({}, paramsParser);\n  var allPathCommands = [];\n  var pathCommand = '';\n  var ii = path.length;\n  var segment;\n  var seglen;\n  var zCommandIndexes = [];\n  for (var i = 0; i < ii; i += 1) {\n    if (path[i]) pathCommand = path[i][0];\n    allPathCommands[i] = pathCommand;\n    var curveSegment = segmentToCubic(path[i], params);\n    path[i] = curveSegment;\n    fixArc(path, allPathCommands, i);\n    ii = path.length; // solves curveArrays ending in Z\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n    segment = path[i];\n    seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n  // validate\n  if (needZCommandIndexes) {\n    return [path, zCommandIndexes];\n  } else {\n    return path;\n  }\n}","map":{"version":3,"mappings":";;AAAA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,SAAS,QAAQ,uBAAuB;AACjD,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,4BAA4B;AAE3D;AAEA,OAAM,SAAUC,UAAU,CACxBC,SAA6B,EAC7BC,mBAA2B;EAA3B;IAAAA,2BAA2B;EAAA;EAE3B,IAAIJ,YAAY,CAACG,SAAS,CAAC,EAAE;IAC3B,IAAME,MAAM,GAAGR,SAAS,CAACM,SAAS,CAAe;IACjD,IAAIC,mBAAmB,EAAE;MACvB,OAAO,CAACC,MAAM,EAAE,EAAE,CAAC;KACpB,MAAM;MACL,OAAOA,MAAM;;;EAIjB;EACA;EACA,IAAMC,IAAI,GAAGP,aAAa,CAACI,SAAS,CAAe;EAEnD,IAAMI,MAAM,gBAAQX,YAAY,CAAE;EAClC,IAAMY,eAAe,GAAG,EAAE;EAC1B,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,EAAE,GAAGJ,IAAI,CAACK,MAAM;EACpB,IAAIC,OAAY;EAChB,IAAIC,MAAc;EAClB,IAAMC,eAAe,GAAa,EAAE;EAEpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,EAAEK,CAAC,IAAI,CAAC,EAAE;IAC9B,IAAIT,IAAI,CAACS,CAAC,CAAC,EAAGN,WAAW,GAAIH,IAAI,CAACS,CAAC,CAAC,GAAX;IAEzBP,eAAe,CAACO,CAAC,CAAC,GAAGN,WAAW;IAChC,IAAMO,YAAY,GAAGf,cAAc,CAACK,IAAI,CAACS,CAAC,CAAC,EAAER,MAAM,CAAC;IAEpDD,IAAI,CAACS,CAAC,CAAC,GAAGC,YAAY;IAEtBlB,MAAM,CAACQ,IAAI,EAAEE,eAAe,EAAEO,CAAC,CAAC;IAChCL,EAAE,GAAGJ,IAAI,CAACK,MAAM,CAAC,CAAC;IAElB;IACA;IACA,IAAIF,WAAW,KAAK,GAAG,EAAE;MACvBK,eAAe,CAACG,IAAI,CAACF,CAAC,CAAC;;IAGzBH,OAAO,GAAGN,IAAI,CAACS,CAAC,CAAC;IACjBF,MAAM,GAAGD,OAAO,CAACD,MAAM;IAEvBJ,MAAM,CAACW,EAAE,GAAG,CAACN,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAChCN,MAAM,CAACY,EAAE,GAAG,CAACP,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC;IAChCN,MAAM,CAACa,EAAE,GAAG,CAACR,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,IAAIN,MAAM,CAACW,EAAE;IAC7CX,MAAM,CAACc,EAAE,GAAG,CAACT,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,IAAIN,MAAM,CAACY,EAAE;;EAG/C;EAEA,IAAIf,mBAAmB,EAAE;IACvB,OAAO,CAACE,IAAI,EAAEQ,eAAe,CAAC;GAC/B,MAAM;IACL,OAAOR,IAAI;;AAEf","names":["paramsParser","clonePath","fixArc","normalizePath","isCurveArray","segmentToCubic","path2Curve","pathInput","needZCommandIndexes","cloned","path","params","allPathCommands","pathCommand","ii","length","segment","seglen","zCommandIndexes","i","curveSegment","push","x1","y1","x2","y2"],"sourceRoot":"src/","sources":["path/convert/path-2-curve.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}