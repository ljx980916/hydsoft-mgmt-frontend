{"ast":null,"code":"import SVD from './dc/svd';\nimport Matrix from './matrix';\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SVD(matrix, {\n    autoTranspose: true\n  });\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}","map":{"version":3,"names":["SVD","Matrix","pseudoInverse","matrix","threshold","Number","EPSILON","checkMatrix","isEmpty","transpose","svdSolution","autoTranspose","U","leftSingularVectors","V","rightSingularVectors","s","diagonal","i","length","Math","abs","mmul","diag"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/node_modules/ml-matrix/src/pseudoInverse.js"],"sourcesContent":["import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,UAAU;AAC1B,OAAOC,MAAM,MAAM,UAAU;AAE7B,OAAO,SAASC,aAAa,CAACC,MAAM,EAAEC,SAAS,GAAGC,MAAM,CAACC,OAAO,EAAE;EAChEH,MAAM,GAAGF,MAAM,CAACM,WAAW,CAACJ,MAAM,CAAC;EACnC,IAAIA,MAAM,CAACK,OAAO,EAAE,EAAE;IACpB;IACA;IACA;IACA,OAAOL,MAAM,CAACM,SAAS,EAAE;EAC3B;EACA,IAAIC,WAAW,GAAG,IAAIV,GAAG,CAACG,MAAM,EAAE;IAAEQ,aAAa,EAAE;EAAK,CAAC,CAAC;EAE1D,IAAIC,CAAC,GAAGF,WAAW,CAACG,mBAAmB;EACvC,IAAIC,CAAC,GAAGJ,WAAW,CAACK,oBAAoB;EACxC,IAAIC,CAAC,GAAGN,WAAW,CAACO,QAAQ;EAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,IAAIE,IAAI,CAACC,GAAG,CAACL,CAAC,CAACE,CAAC,CAAC,CAAC,GAAGd,SAAS,EAAE;MAC9BY,CAAC,CAACE,CAAC,CAAC,GAAG,GAAG,GAAGF,CAAC,CAACE,CAAC,CAAC;IACnB,CAAC,MAAM;MACLF,CAAC,CAACE,CAAC,CAAC,GAAG,GAAG;IACZ;EACF;EAEA,OAAOJ,CAAC,CAACQ,IAAI,CAACrB,MAAM,CAACsB,IAAI,CAACP,CAAC,CAAC,CAACM,IAAI,CAACV,CAAC,CAACH,SAAS,EAAE,CAAC,CAAC;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}