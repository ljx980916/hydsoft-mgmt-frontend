{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { finalizeSegment } from './finalize-segment';\nimport { paramsCount } from './params-count';\nimport { scanFlag } from './scan-flag';\nimport { scanParam } from './scan-param';\nimport { skipSpaces } from './skip-spaces';\nimport { isPathCommand } from './is-path-command';\nimport { isDigitStart } from './is-digit-start';\nimport { isArcCommand } from './is-arc-command';\n/**\n * Scans every character in the path string to determine\n * where a segment starts and where it ends.\n */\nexport function scanSegment(path) {\n  var max = path.max,\n    pathValue = path.pathValue,\n    index = path.index;\n  var cmdCode = pathValue.charCodeAt(index);\n  var reqParams = paramsCount[pathValue[index].toLowerCase()];\n  path.segmentStart = index;\n  if (!isPathCommand(cmdCode)) {\n    path.err = \"[path-util]: Invalid path value \\\"\" + pathValue[index] + \"\\\" is not a path command\";\n    return;\n  }\n  path.index += 1;\n  skipSpaces(path);\n  path.data = [];\n  if (!reqParams) {\n    // Z\n    finalizeSegment(path);\n    return;\n  }\n  for (;;) {\n    for (var i = reqParams; i > 0; i -= 1) {\n      if (isArcCommand(cmdCode) && (i === 3 || i === 4)) scanFlag(path);else scanParam(path);\n      if (path.err.length) {\n        return;\n      }\n      path.data.push(path.param);\n      skipSpaces(path);\n      // after ',' param is mandatory\n      if (path.index < max && pathValue.charCodeAt(path.index) === 0x2c /* , */) {\n        path.index += 1;\n        skipSpaces(path);\n      }\n    }\n    if (path.index >= path.max) {\n      break;\n    }\n    // Stop on next segment\n    if (!isDigitStart(pathValue.charCodeAt(path.index))) {\n      break;\n    }\n  }\n  finalizeSegment(path);\n}","map":{"version":3,"mappings":";AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,YAAY,QAAQ,kBAAkB;AAG/C;;;;AAIA,OAAM,SAAUC,WAAW,CAACC,IAAgB;EAClC,OAAG,GAAuBA,IAAI,IAA3B;IAAEC,SAAS,GAAYD,IAAI,UAAhB;IAAEE,KAAK,GAAKF,IAAI,MAAT;EAC7B,IAAMG,OAAO,GAAGF,SAAS,CAACG,UAAU,CAACF,KAAK,CAAC;EAC3C,IAAMG,SAAS,GAAGb,WAAW,CAACS,SAAS,CAACC,KAAK,CAAC,CAACI,WAAW,EAAE,CAAC;EAE7DN,IAAI,CAACO,YAAY,GAAGL,KAAK;EAEzB,IAAI,CAACN,aAAa,CAACO,OAAO,CAAC,EAAE;IAC3BH,IAAI,CAACQ,GAAG,GAAG,uCAAoCP,SAAS,CAACC,KAAK,CAAC,6BAAyB;IACxF;;EAGFF,IAAI,CAACE,KAAK,IAAI,CAAC;EACfP,UAAU,CAACK,IAAI,CAAC;EAEhBA,IAAI,CAACS,IAAI,GAAG,EAAE;EAEd,IAAI,CAACJ,SAAS,EAAE;IACd;IACAd,eAAe,CAACS,IAAI,CAAC;IACrB;;EAGF,SAAS;IACP,KAAK,IAAIU,CAAC,GAAGL,SAAS,EAAEK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MACrC,IAAIZ,YAAY,CAACK,OAAO,CAAC,KAAKO,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,EAAEjB,QAAQ,CAACO,IAAI,CAAC,CAAC,KAC7DN,SAAS,CAACM,IAAI,CAAC;MAEpB,IAAIA,IAAI,CAACQ,GAAG,CAACG,MAAM,EAAE;QACnB;;MAEFX,IAAI,CAACS,IAAI,CAACG,IAAI,CAACZ,IAAI,CAACa,KAAK,CAAC;MAE1BlB,UAAU,CAACK,IAAI,CAAC;MAEhB;MACA,IAAIA,IAAI,CAACE,KAAK,GAAGY,GAAG,IAAIb,SAAS,CAACG,UAAU,CAACJ,IAAI,CAACE,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS;QACzEF,IAAI,CAACE,KAAK,IAAI,CAAC;QACfP,UAAU,CAACK,IAAI,CAAC;;;IAIpB,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACc,GAAG,EAAE;MAC1B;;IAGF;IACA,IAAI,CAACjB,YAAY,CAACI,SAAS,CAACG,UAAU,CAACJ,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE;MACnD;;;EAIJX,eAAe,CAACS,IAAI,CAAC;AACvB","names":["finalizeSegment","paramsCount","scanFlag","scanParam","skipSpaces","isPathCommand","isDigitStart","isArcCommand","scanSegment","path","pathValue","index","cmdCode","charCodeAt","reqParams","toLowerCase","segmentStart","err","data","i","length","push","param","max"],"sourceRoot":"src/","sources":["path/parser/scan-segment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}