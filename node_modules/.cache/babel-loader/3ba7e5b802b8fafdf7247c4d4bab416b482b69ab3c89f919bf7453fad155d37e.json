{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { login, userInfo, logout } from '@/api/login';\nimport { menuSideBar } from '@/api/menu';\nimport { tagColumnList } from '@/api/drillAnalyze';\nimport storage from 'store';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nexport const useUserInfoStore = defineStore('userInfo', {\n  state: () => {\n    return {\n      info: {}\n    };\n  },\n  getters: {\n    getUserInfo(state) {\n      return state.info;\n    },\n    getRoles(state) {\n      return state.roles;\n    }\n  },\n  actions: {\n    async Login(values) {\n      try {\n        let loginRes = await login(values);\n        if (loginRes.code === '000000000000') {\n          storage.set(ACCESS_TOKEN, loginRes.data.token, 7 * 24 * 60 * 60 * 1000);\n          return Promise.resolve(loginRes);\n        } else {\n          return Promise.reject(loginRes.message);\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    },\n    async userInfo() {\n      try {\n        let userInfoRes = await userInfo();\n        if (userInfoRes.code === '000000000000') {\n          this.info = userInfoRes.data;\n          return Promise.resolve(userInfoRes);\n        } else {\n          return Promise.reject(userInfoRes.message);\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    },\n    async Logout() {\n      try {\n        let logoutRes = await logout();\n        if (logoutRes.code === '000000000000') {\n          storage.remove(ACCESS_TOKEN);\n          //退出时所需要清除的缓存数据\n          const logoutCache = [useUserInfoStore, useMenuStore, useBreadListStore];\n          logoutCache.forEach(fn => {\n            fn().$reset();\n          });\n          return Promise.resolve(logoutRes);\n        } else {\n          return Promise.reject(logoutRes.message);\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }\n});\nexport const useBreadListStore = defineStore('breadList', {\n  state: () => {\n    return {\n      breadList: [{\n        name: '业务体验'\n      }, {\n        name: '下钻分析'\n      }]\n    };\n  },\n  actions: {\n    setBreadList(breadList) {\n      this.breadList = breadList;\n    }\n  },\n  persist: {\n    enabled: true // 开启数据缓存 +++++++\n  }\n});\n\nexport const useMenuStore = defineStore('menu', {\n  state: () => {\n    return {\n      menuList: [],\n      permissions: []\n    };\n  },\n  getters: {\n    getMenuList(state) {\n      return state.menuList;\n    },\n    getPermission(state) {\n      return state.permissions;\n    }\n  },\n  actions: {\n    async menuSideBar() {\n      try {\n        let menuListRes = await menuSideBar();\n        if (menuListRes.code === '000000000000') {\n          this.menuList = menuListRes.data.menuList;\n          this.permissions = menuListRes.data.permissions;\n          return Promise.resolve(menuListRes);\n        } else {\n          return Promise.reject(menuListRes.message);\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }\n});\nexport const useTagColumnListStore = defineStore('tagColumnList', {\n  state: () => {\n    return {\n      tagColumnList: []\n    };\n  },\n  getters: {\n    getTagColumnList(state) {\n      return state.tagColumnList;\n    }\n  },\n  actions: {\n    async tagColumnListBar() {\n      try {\n        let tagColumnListRes = await tagColumnList();\n        if (tagColumnListRes.code === '200') {\n          this.tagColumnList = tagColumnListRes.data;\n          return Promise.resolve(tagColumnListRes.data);\n        } else {\n          return Promise.reject(tagColumnListRes.message);\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","login","userInfo","logout","menuSideBar","tagColumnList","storage","ACCESS_TOKEN","useUserInfoStore","state","info","getters","getUserInfo","getRoles","roles","actions","Login","values","loginRes","code","set","data","token","Promise","resolve","reject","message","error","userInfoRes","Logout","logoutRes","remove","logoutCache","useMenuStore","useBreadListStore","forEach","fn","$reset","breadList","name","setBreadList","persist","enabled","menuList","permissions","getMenuList","getPermission","menuListRes","useTagColumnListStore","getTagColumnList","tagColumnListBar","tagColumnListRes"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-mgmt-frontend/src/store/index.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { login, userInfo,logout,} from '@/api/login'\nimport { menuSideBar } from '@/api/menu'\nimport { tagColumnList } from '@/api/drillAnalyze'\nimport storage from 'store'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\nexport const useUserInfoStore = defineStore('userInfo',{\n    state : ()=>{\n        return {\n            info : {}\n        }\n    },\n    getters : {\n        getUserInfo(state){\n            return state.info\n        },\n        getRoles(state){\n            return state.roles\n        }\n    },\n    actions : {\n        async Login(values){\n            try {\n                let loginRes = await login(values)\n                if (loginRes.code === '000000000000') {\n                    storage.set(ACCESS_TOKEN, loginRes.data.token, 7 * 24 * 60 * 60 * 1000);\n                    return Promise.resolve(loginRes)\n                }else {\n                    return Promise.reject(loginRes.message)\n                }\n            } catch (error) {\n                return Promise.reject(error)\n            }\n        },\n        async userInfo(){\n            try {\n                let userInfoRes = await userInfo()\n                if(userInfoRes.code === '000000000000'){\n                    this.info = userInfoRes.data\n                    return Promise.resolve(userInfoRes)\n                }else {\n                    return Promise.reject(userInfoRes.message)\n                }\n            } catch (error) {\n                return Promise.reject(error)\n            }\n        },\n        async Logout(){\n            try {\n                let logoutRes = await logout()\n                if(logoutRes.code === '000000000000'){\n                    storage.remove(ACCESS_TOKEN)\n                    //退出时所需要清除的缓存数据\n                    const logoutCache = [useUserInfoStore,useMenuStore,useBreadListStore]\n                    logoutCache.forEach(fn=>{\n                        fn().$reset()\n                    })\n                    return Promise.resolve(logoutRes)\n                }else {\n                    return Promise.reject(logoutRes.message)\n                }\n            } catch (error) {\n                return Promise.reject(error)\n            }\n        }\n    }\n})\n\nexport const useBreadListStore = defineStore('breadList',{\n    state : ()=>{\n        return {\n            breadList : [ \n               { name: '业务体验'},\n               { name: '下钻分析'}\n             ]\n        }\n    },\n    actions: {\n        setBreadList( breadList ){\n            this.breadList = breadList\n        },\n    },\n    persist: {\n        enabled: true, // 开启数据缓存 +++++++\n    }\n})\n\nexport const useMenuStore = defineStore('menu',{\n    state : ()=>{\n        return {\n            menuList : [],\n            permissions : []\n         \n        }\n    },\n    getters : {\n        getMenuList(state){\n            return state.menuList\n        },\n        getPermission(state){\n            return state.permissions\n        }\n    },\n    actions : {\n        async menuSideBar(){\n            try {\n                let menuListRes = await menuSideBar()\n                if(menuListRes.code === '000000000000'){\n                    this.menuList = menuListRes.data.menuList\n                    this.permissions = menuListRes.data.permissions\n                    return Promise.resolve(menuListRes)\n                }else {\n                    return Promise.reject(menuListRes.message)\n                }\n            } catch (error) {\n                return Promise.reject(error)\n            }\n        }\n            \n    }\n})\n\nexport const useTagColumnListStore = defineStore('tagColumnList',{\n    state : ()=>{\n        return {\n            tagColumnList : []\n        }\n    },\n    getters : {\n        getTagColumnList(state){\n            return state.tagColumnList\n        }\n    },\n    actions : {\n        async tagColumnListBar(){\n            try {\n                let tagColumnListRes = await tagColumnList()\n                if(tagColumnListRes.code === '200'){\n                    this.tagColumnList = tagColumnListRes.data\n                    return Promise.resolve(tagColumnListRes.data)\n                }else {\n                    return Promise.reject(tagColumnListRes.message)\n                }\n            } catch (error) {\n                return Promise.reject(error)\n            }\n        }\n    }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}