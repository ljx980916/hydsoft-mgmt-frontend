{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// represents a body(a point mass) and its position\nvar Body = /** @class */function () {\n  function Body(params) {\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n    this.g = params.g || 0;\n  }\n  // returns the euclidean distance\n  Body.prototype.distanceTo = function (bo) {\n    var dx = this.rx - bo.rx;\n    var dy = this.ry - bo.ry;\n    return Math.hypot(dx, dy);\n  };\n  Body.prototype.setPos = function (x, y) {\n    this.rx = x;\n    this.ry = y;\n  };\n  // resets the forces\n  Body.prototype.resetForce = function () {\n    this.fx = 0;\n    this.fy = 0;\n  };\n  Body.prototype.addForce = function (b) {\n    var dx = b.rx - this.rx;\n    var dy = b.ry - this.ry;\n    var dist = Math.hypot(dx, dy);\n    dist = dist < 0.0001 ? 0.0001 : dist;\n    // the repulsive defined by force atlas 2\n    var F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n    this.fx += F * dx / dist;\n    this.fy += F * dy / dist;\n  };\n  // if quad contains this body\n  Body.prototype.in = function (quad) {\n    return quad.contains(this.rx, this.ry);\n  };\n  // returns a new body\n  Body.prototype.add = function (bo) {\n    var nenwMass = this.mass + bo.mass;\n    var x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n    var y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n    var dg = this.degree + bo.degree;\n    var params = {\n      rx: x,\n      ry: y,\n      mass: nenwMass,\n      degree: dg\n    };\n    return new Body(params);\n  };\n  return Body;\n}();\nexports.default = Body;","map":{"version":3,"mappings":";;;;;AAkBA;AACA;EAUE,cAAYA,MAAiB;IAC3B;;;;IAIA,IAAI,CAACC,EAAE,GAAGD,MAAM,CAACC,EAAE,IAAI,CAAC;IACxB;;;;IAIA,IAAI,CAACC,EAAE,GAAGF,MAAM,CAACE,EAAE;IACnB;;;;IAIA,IAAI,CAACC,EAAE,GAAGH,MAAM,CAACG,EAAE;IACnB;;;;IAIA,IAAI,CAACC,EAAE,GAAG,CAAC;IACX;;;;IAIA,IAAI,CAACC,EAAE,GAAG,CAAC;IACX;;;;IAIA,IAAI,CAACC,IAAI,GAAGN,MAAM,CAACM,IAAI;IACvB;;;;IAIA,IAAI,CAACC,MAAM,GAAGP,MAAM,CAACO,MAAM;IAC3B;;;;IAIA,IAAI,CAACC,CAAC,GAAGR,MAAM,CAACQ,CAAC,IAAI,CAAC;EACxB;EACA;EACAC,yBAAU,GAAV,UAAWC,EAAQ;IACjB,IAAMC,EAAE,GAAG,IAAI,CAACT,EAAE,GAAGQ,EAAE,CAACR,EAAE;IAC1B,IAAMU,EAAE,GAAG,IAAI,CAACT,EAAE,GAAGO,EAAE,CAACP,EAAE;IAC1B,OAAOU,IAAI,CAACC,KAAK,CAACH,EAAE,EAAEC,EAAE,CAAC;EAC3B,CAAC;EACDH,qBAAM,GAAN,UAAOM,CAAS,EAAEC,CAAS;IACzB,IAAI,CAACd,EAAE,GAAGa,CAAC;IACX,IAAI,CAACZ,EAAE,GAAGa,CAAC;EACb,CAAC;EACD;EACAP,yBAAU,GAAV;IACE,IAAI,CAACL,EAAE,GAAG,CAAC;IACX,IAAI,CAACC,EAAE,GAAG,CAAC;EACb,CAAC;EACDI,uBAAQ,GAAR,UAASQ,CAAO;IACd,IAAMN,EAAE,GAAGM,CAAC,CAACf,EAAE,GAAG,IAAI,CAACA,EAAE;IACzB,IAAMU,EAAE,GAAGK,CAAC,CAACd,EAAE,GAAG,IAAI,CAACA,EAAE;IACzB,IAAIe,IAAI,GAAGL,IAAI,CAACC,KAAK,CAACH,EAAE,EAAEC,EAAE,CAAC;IAC7BM,IAAI,GAAGA,IAAI,GAAG,MAAM,GAAG,MAAM,GAAGA,IAAI;IACpC;IACA,IAAMC,CAAC,GAAI,IAAI,CAACX,CAAC,IAAI,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,IAAIU,CAAC,CAACV,MAAM,GAAG,CAAC,CAAC,GAAIW,IAAI;IAC9D,IAAI,CAACd,EAAE,IAAIe,CAAC,GAAGR,EAAE,GAAGO,IAAI;IACxB,IAAI,CAACb,EAAE,IAAIc,CAAC,GAAGP,EAAE,GAAGM,IAAI;EAC1B,CAAC;EACD;EACAT,iBAAE,GAAF,UAAGW,IAAU;IACX,OAAOA,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACnB,EAAE,EAAE,IAAI,CAACC,EAAE,CAAC;EACxC,CAAC;EACD;EACAM,kBAAG,GAAH,UAAIC,EAAQ;IACV,IAAMY,QAAQ,GAAG,IAAI,CAAChB,IAAI,GAAGI,EAAE,CAACJ,IAAI;IACpC,IAAMS,CAAC,GAAG,CAAC,IAAI,CAACb,EAAE,GAAG,IAAI,CAACI,IAAI,GAAGI,EAAE,CAACR,EAAE,GAAGQ,EAAE,CAACJ,IAAI,IAAIgB,QAAQ;IAC5D,IAAMN,CAAC,GAAG,CAAC,IAAI,CAACb,EAAE,GAAG,IAAI,CAACG,IAAI,GAAGI,EAAE,CAACP,EAAE,GAAGO,EAAE,CAACJ,IAAI,IAAIgB,QAAQ;IAC5D,IAAMC,EAAE,GAAG,IAAI,CAAChB,MAAM,GAAGG,EAAE,CAACH,MAAM;IAClC,IAAMP,MAAM,GAAc;MACxBE,EAAE,EAAEa,CAAC;MACLZ,EAAE,EAAEa,CAAC;MACLV,IAAI,EAAEgB,QAAQ;MACdf,MAAM,EAAEgB;KACT;IACD,OAAO,IAAId,IAAI,CAACT,MAAM,CAAC;EACzB,CAAC;EACH,WAAC;AAAD,CAAC,EA/FD","names":["params","id","rx","ry","fx","fy","mass","degree","g","Body","bo","dx","dy","Math","hypot","x","y","b","dist","F","quad","contains","nenwMass","dg"],"sourceRoot":"","sources":["../../../src/layout/forceAtlas2/body.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}