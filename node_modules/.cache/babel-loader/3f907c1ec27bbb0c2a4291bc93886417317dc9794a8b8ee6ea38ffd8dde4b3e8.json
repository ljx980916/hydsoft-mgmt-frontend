{"ast":null,"code":"import axios from 'axios';\n// import { ACCESS_TOKEN } from '@/store/mutation-types';\n// import storage from 'store';\nimport { getCookie, clearCookie } from '@/utils/util';\nimport { LOGIN_TOKEN } from '@/store/mutation-types.js';\n// 创建 axios 实例\nconst request = axios.create({\n  // API 请求的默认前缀\n  baseURL: 'https://mock.presstime.cn/mock/657968548c77effb7a84a822/mock',\n  timeout: 30000 // 请求超时时间\n});\n// 异常拦截处理器\nconst errorHandler = error => {\n  if (error.response) {}\n  return Promise.reject(error);\n};\n\n// request interceptor\nrequest.interceptors.request.use(config => {\n  const token = getCookie(LOGIN_TOKEN);\n  // 如果 token 存在\n  // 让每个请求携带自定义 token 请根据实际情况自行修改\n  if (token) {\n    config.headers['Authorization'] = token;\n  }\n  return config;\n}, errorHandler);\n\n// response interceptor\nrequest.interceptors.response.use(response => {\n  if (response.data.code === '301') {\n    clearCookie(LOGIN_TOKEN);\n  }\n  return response.data;\n}, errorHandler);\nexport default request;","map":{"version":3,"names":["axios","getCookie","clearCookie","LOGIN_TOKEN","request","create","baseURL","timeout","errorHandler","error","response","Promise","reject","interceptors","use","config","token","headers","data","code"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/utils/requestMock.js"],"sourcesContent":["import axios from 'axios';\n// import { ACCESS_TOKEN } from '@/store/mutation-types';\n// import storage from 'store';\nimport { getCookie,clearCookie } from '@/utils/util'\nimport { LOGIN_TOKEN } from '@/store/mutation-types.js'\n// 创建 axios 实例\nconst request = axios.create({\n\t// API 请求的默认前缀\n\tbaseURL: 'https://mock.presstime.cn/mock/657968548c77effb7a84a822/mock',\n\ttimeout: 30000, // 请求超时时间\n});\n// 异常拦截处理器\nconst errorHandler = (error) => {\n\tif (error.response) {\n\t}\n\treturn Promise.reject(error);\n};\n\n// request interceptor\nrequest.interceptors.request.use(config => {\n\tconst token = getCookie(LOGIN_TOKEN)\n\t// 如果 token 存在\n\t// 让每个请求携带自定义 token 请根据实际情况自行修改\n\tif (token) {\n\t\tconfig.headers['Authorization'] = token;\n\t}\n\treturn config;\n}, errorHandler);\n\n// response interceptor\nrequest.interceptors.response.use((response) => {\n\tif (response.data.code === '301') {\n\t\tclearCookie(LOGIN_TOKEN)\n  }\n\treturn response.data;\n}, errorHandler);\n\nexport default request;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,SAASC,SAAS,EAACC,WAAW,QAAQ,cAAc;AACpD,SAASC,WAAW,QAAQ,2BAA2B;AACvD;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC5B;EACAC,OAAO,EAAE,8DAA8D;EACvEC,OAAO,EAAE,KAAK,CAAE;AACjB,CAAC,CAAC;AACF;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC/B,IAAIA,KAAK,CAACC,QAAQ,EAAE,CACpB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC7B,CAAC;;AAED;AACAL,OAAO,CAACS,YAAY,CAACT,OAAO,CAACU,GAAG,CAACC,MAAM,IAAI;EAC1C,MAAMC,KAAK,GAAGf,SAAS,CAACE,WAAW,CAAC;EACpC;EACA;EACA,IAAIa,KAAK,EAAE;IACVD,MAAM,CAACE,OAAO,CAAC,eAAe,CAAC,GAAGD,KAAK;EACxC;EACA,OAAOD,MAAM;AACd,CAAC,EAAEP,YAAY,CAAC;;AAEhB;AACAJ,OAAO,CAACS,YAAY,CAACH,QAAQ,CAACI,GAAG,CAAEJ,QAAQ,IAAK;EAC/C,IAAIA,QAAQ,CAACQ,IAAI,CAACC,IAAI,KAAK,KAAK,EAAE;IACjCjB,WAAW,CAACC,WAAW,CAAC;EACxB;EACD,OAAOO,QAAQ,CAACQ,IAAI;AACrB,CAAC,EAAEV,YAAY,CAAC;AAEhB,eAAeJ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}