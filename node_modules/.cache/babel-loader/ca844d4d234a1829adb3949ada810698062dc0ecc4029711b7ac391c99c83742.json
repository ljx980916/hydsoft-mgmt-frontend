{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkNonEmpty, checkRowIndices, checkColumnIndices } from './util';\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      random = Math.random\n    } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1000,\n      random = Math.random\n    } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n  get size() {\n    return this.rows * this.columns;\n  }\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n  toJSON() {\n    return this.to2DArray();\n  }\n  isRowVector() {\n    return this.rows === 1;\n  }\n  isColumnVector() {\n    return this.columns === 1;\n  }\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n  isSquare() {\n    return this.rows === this.columns;\n  }\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      rows = 1,\n      columns = 1\n    } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n  neg() {\n    return this.mulS(-1);\n  }\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row':\n        {\n          const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[row]) {\n                max[row] = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      case 'column':\n        {\n          const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[column]) {\n                max[column] = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      case undefined:\n        {\n          let max = this.get(0, 0);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max) {\n                max = this.get(row, column);\n              }\n            }\n          }\n          return max;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row':\n        {\n          const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[row]) {\n                min[row] = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      case 'column':\n        {\n          const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[column]) {\n                min[column] = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      case undefined:\n        {\n          let min = this.get(0, 0);\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min) {\n                min = this.get(row, column);\n              }\n            }\n          }\n          return min;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n    let result = new Matrix(m, p);\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n      let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols);\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, {\n          min,\n          max,\n          output: row\n        });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n      throw new RangeError('Argument out of range');\n    }\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n      throw new RangeError('Argument out of range');\n    }\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row':\n        {\n          for (let i = 0; i < this.rows; i++) {\n            sum[i] /= this.columns;\n          }\n          return sum;\n        }\n      case 'column':\n        {\n          for (let i = 0; i < this.columns; i++) {\n            sum[i] /= this.rows;\n          }\n          return sum;\n        }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      unbiased = true,\n      mean = this.mean(by)\n    } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n          return varianceByRow(this, unbiased, mean);\n        }\n      case 'column':\n        {\n          if (!isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n          return varianceByColumn(this, unbiased, mean);\n        }\n      case undefined:\n        {\n          if (typeof mean !== 'number') {\n            throw new TypeError('mean must be a number');\n          }\n          return varianceAll(this, unbiased, mean);\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const {\n      center = this.mean(by)\n    } = options;\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n          centerByRow(this, center);\n          return this;\n        }\n      case 'column':\n        {\n          if (!isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n          centerByColumn(this, center);\n          return this;\n        }\n      case undefined:\n        {\n          if (typeof center !== 'number') {\n            throw new TypeError('center must be a number');\n          }\n          centerAll(this, center);\n          return this;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row':\n        {\n          if (scale === undefined) {\n            scale = getScaleByRow(this);\n          } else if (!isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n          scaleByRow(this, scale);\n          return this;\n        }\n      case 'column':\n        {\n          if (scale === undefined) {\n            scale = getScaleByColumn(this);\n          } else if (!isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n          scaleByColumn(this, scale);\n          return this;\n        }\n      case undefined:\n        {\n          if (scale === undefined) {\n            scale = getScaleAll(this);\n          } else if (typeof scale !== 'number') {\n            throw new TypeError('scale must be a number');\n          }\n          scaleAll(this, scale);\n          return this;\n        }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\nfunction compareNumbers(a, b) {\n  return a - b;\n}\nfunction isArrayOfNumbers(array) {\n  return array.every(element => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\ninstallMathOperations(AbstractMatrix, Matrix);","map":{"version":3,"names":["isAnyArray","rescale","inspectMatrix","inspectMatrixWithOptions","installMathOperations","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","varianceByColumn","varianceAll","centerByRow","centerByColumn","centerAll","scaleByRow","scaleByColumn","scaleAll","getScaleByRow","getScaleByColumn","getScaleAll","checkRowVector","checkRowIndex","checkColumnIndex","checkColumnVector","checkRange","checkNonEmpty","checkRowIndices","checkColumnIndices","AbstractMatrix","from1DArray","newRows","newColumns","newData","length","RangeError","newMatrix","Matrix","row","column","set","rowVector","vector","i","columnVector","zeros","rows","columns","ones","fill","rand","options","TypeError","random","Math","matrix","j","randInt","min","max","Number","isInteger","interval","value","round","eye","undefined","diag","data","l","matrix1","matrix2","checkMatrix","result","get","isMatrix","klass","size","apply","callback","call","to1DArray","array","push","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isEmpty","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","factor","reducedEchelonForm","m","n","maxRow","p","pivot","Error","repeat","setSubMatrix","neg","mulS","getRow","index","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","Array","NEGATIVE_INFINITY","maxIndex","v","idx","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","sqrt","cumulativeSum","sum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","mmulStrassen","y","x","r1","c1","r2","c2","console","warn","embed","mat","cols","r","c","resultat","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","output","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","startRow","endRow","startColumn","endColumn","subMatrixRow","indices","subMatrixColumn","selection","rowIndices","columnIndices","rowIndex","columnIndex","trace","product","mean","variance","unbiased","standardDeviation","center","scale","toString","prototype","Symbol","for","isArrayOfNumbers","every","element","randomInt","diagonal","identity","negate","tensorProduct","constructor","nRows","nColumns","arrayData","from","removeRow","splice","addRow","removeColumn","newRow","addColumn"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/node_modules/ml-matrix/src/matrix.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}