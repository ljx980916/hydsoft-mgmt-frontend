{"ast":null,"code":"\"use strict\";\n\n/**\n * @fileOverview dagre layout\n * @author shiwu.wyy@antfin.com\n */\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DagreLayout = void 0;\nvar index_1 = __importDefault(require(\"./dagre/index\"));\nvar util_1 = require(\"../util\");\nvar base_1 = require(\"./base\");\nvar graph_1 = require(\"./dagre/graph\");\n/**\n * 层次布局\n */\nvar DagreLayout = /** @class */function (_super) {\n  __extends(DagreLayout, _super);\n  function DagreLayout(options) {\n    var _this = _super.call(this) || this;\n    /** layout 方向, 可选 TB, BT, LR, RL */\n    _this.rankdir = 'TB';\n    /** 节点水平间距(px) */\n    _this.nodesep = 50;\n    /** 每一层节点之间间距 */\n    _this.ranksep = 50;\n    /** 是否保留布局连线的控制点 */\n    _this.controlPoints = false;\n    /** 每层节点是否根据节点数据中的 comboId 进行排序，以防止同层 combo 重叠 */\n    _this.sortByCombo = false;\n    /** 是否保留每条边上的dummy node */\n    _this.edgeLabelSpace = true;\n    /** 是否基于 dagre 进行辐射布局，若是，第一层节点将被放置在最内环上，其余层依次向外辐射 */\n    _this.radial = false;\n    _this.nodes = [];\n    _this.edges = [];\n    /** 迭代结束的回调函数 */\n    _this.onLayoutEnd = function () {};\n    _this.layoutNode = function (nodeId) {\n      var self = _this;\n      var nodes = self.nodes;\n      var node = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      if (node) {\n        var layout = node.layout !== false;\n        return layout;\n      }\n      return true;\n    };\n    _this.updateCfg(options);\n    return _this;\n  }\n  DagreLayout.prototype.getDefaultCfg = function () {\n    return {\n      rankdir: 'TB',\n      align: undefined,\n      nodeSize: undefined,\n      nodesepFunc: undefined,\n      ranksepFunc: undefined,\n      nodesep: 50,\n      ranksep: 50,\n      controlPoints: false,\n      radial: false,\n      focusNode: null // radial 为 true 时生效，关注的节点\n    };\n  };\n  /**\n   * 执行布局\n   */\n  DagreLayout.prototype.execute = function () {\n    var _this = this;\n    var _a, _b, _c, _d;\n    var self = this;\n    var nodes = self.nodes,\n      nodeSize = self.nodeSize,\n      rankdir = self.rankdir,\n      combos = self.combos,\n      begin = self.begin,\n      radial = self.radial,\n      _e = self.comboEdges,\n      comboEdges = _e === void 0 ? [] : _e,\n      _f = self.vedges,\n      vedges = _f === void 0 ? [] : _f;\n    if (!nodes) return;\n    var edges = self.edges || [];\n    var g = new graph_1.Graph({\n      multigraph: true,\n      compound: true\n    });\n    // collect the nodes in their combo, to create virtual edges for comboEdges\n    self.nodeMap = {};\n    var nodeComboMap = {};\n    nodes.forEach(function (node) {\n      self.nodeMap[node.id] = node;\n      if (!node.comboId) return;\n      nodeComboMap[node.comboId] = nodeComboMap[node.comboId] || [];\n      nodeComboMap[node.comboId].push(node.id);\n    });\n    var sortedNodes = [];\n    var visitedMap = {};\n    if ((_a = self.nodeOrder) === null || _a === void 0 ? void 0 : _a.length) {\n      self.nodeOrder.forEach(function (id) {\n        visitedMap[id] = true;\n        sortedNodes.push(self.nodeMap[id]);\n      });\n      nodes.forEach(function (node) {\n        if (!visitedMap[node.id]) sortedNodes.push(node);\n      });\n    } else {\n      sortedNodes = nodes;\n    }\n    var nodeSizeFunc;\n    if (!nodeSize) {\n      nodeSizeFunc = function (d) {\n        if (d.size) {\n          if ((0, util_1.isArray)(d.size)) {\n            return d.size;\n          }\n          if ((0, util_1.isObject)(d.size)) {\n            return [d.size.width || 40, d.size.height || 40];\n          }\n          return [d.size, d.size];\n        }\n        return [40, 40];\n      };\n    } else if ((0, util_1.isArray)(nodeSize)) {\n      nodeSizeFunc = function () {\n        return nodeSize;\n      };\n    } else {\n      nodeSizeFunc = function () {\n        return [nodeSize, nodeSize];\n      };\n    }\n    var ranksepfunc = (0, util_1.getFunc)(self.ranksep, 50, self.ranksepFunc);\n    var nodesepfunc = (0, util_1.getFunc)(self.nodesep, 50, self.nodesepFunc);\n    var horisep = nodesepfunc;\n    var vertisep = ranksepfunc;\n    if (rankdir === 'LR' || rankdir === 'RL') {\n      horisep = ranksepfunc;\n      vertisep = nodesepfunc;\n    }\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n    g.setGraph(self);\n    var comboMap = {};\n    if (this.sortByCombo && combos) {\n      combos.forEach(function (combo) {\n        comboMap[combo.id] = combo;\n        // regard the collapsed combo as a node\n        if (combo.collapsed) {\n          var size = nodeSizeFunc(combo);\n          var verti = vertisep(combo);\n          var hori = horisep(combo);\n          var width = size[0] + 2 * hori;\n          var height = size[1] + 2 * verti;\n          g.setNode(combo.id, {\n            width: width,\n            height: height\n          });\n        }\n        if (!combo.parentId) return;\n        if (!comboMap[combo.parentId]) {\n          g.setNode(combo.parentId, {});\n        }\n        g.setParent(combo.id, combo.parentId);\n      });\n    }\n    sortedNodes.filter(function (node) {\n      return node.layout !== false;\n    }).forEach(function (node) {\n      var size = nodeSizeFunc(node);\n      var verti = vertisep(node);\n      var hori = horisep(node);\n      var width = size[0] + 2 * hori;\n      var height = size[1] + 2 * verti;\n      var layer = node.layer;\n      if ((0, util_1.isNumber)(layer)) {\n        // 如果有layer属性，加入到node的label中\n        g.setNode(node.id, {\n          width: width,\n          height: height,\n          layer: layer\n        });\n      } else {\n        g.setNode(node.id, {\n          width: width,\n          height: height\n        });\n      }\n      if (_this.sortByCombo && node.comboId) {\n        if (!comboMap[node.comboId]) {\n          comboMap[node.comboId] = {\n            id: node.comboId\n          };\n          g.setNode(node.comboId, {});\n        }\n        g.setParent(node.id, node.comboId);\n      }\n    });\n    edges.forEach(function (edge) {\n      // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n      var source = (0, util_1.getEdgeTerminal)(edge, 'source');\n      var target = (0, util_1.getEdgeTerminal)(edge, 'target');\n      if (_this.layoutNode(source) && _this.layoutNode(target)) {\n        g.setEdge(source, target, {\n          weight: edge.weight || 1\n        });\n      }\n    });\n    // create virtual edges from node to node for comboEdges\n    (_b = comboEdges === null || comboEdges === void 0 ? void 0 : comboEdges.concat(vedges || [])) === null || _b === void 0 ? void 0 : _b.forEach(function (comboEdge) {\n      var _a, _b;\n      var source = comboEdge.source,\n        target = comboEdge.target;\n      var sources = ((_a = comboMap[source]) === null || _a === void 0 ? void 0 : _a.collapsed) ? [source] : nodeComboMap[source] || [source];\n      var targets = ((_b = comboMap[target]) === null || _b === void 0 ? void 0 : _b.collapsed) ? [target] : nodeComboMap[target] || [target];\n      sources.forEach(function (s) {\n        targets.forEach(function (t) {\n          g.setEdge(s, t, {\n            weight: comboEdge.weight || 1\n          });\n        });\n      });\n    });\n    // 考虑增量图中的原始图\n    var prevGraph = undefined;\n    if ((_c = self.preset) === null || _c === void 0 ? void 0 : _c.nodes) {\n      prevGraph = new graph_1.Graph({\n        multigraph: true,\n        compound: true\n      });\n      self.preset.nodes.forEach(function (node) {\n        prevGraph === null || prevGraph === void 0 ? void 0 : prevGraph.setNode(node.id, node);\n      });\n    }\n    index_1.default.layout(g, {\n      prevGraph: prevGraph,\n      edgeLabelSpace: self.edgeLabelSpace,\n      keepNodeOrder: Boolean(!!self.nodeOrder),\n      nodeOrder: self.nodeOrder\n    });\n    var dBegin = [0, 0];\n    if (begin) {\n      var minX_1 = Infinity;\n      var minY_1 = Infinity;\n      g.nodes().forEach(function (node) {\n        var coord = g.node(node);\n        if (minX_1 > coord.x) minX_1 = coord.x;\n        if (minY_1 > coord.y) minY_1 = coord.y;\n      });\n      g.edges().forEach(function (edge) {\n        var _a;\n        var coord = g.edge(edge);\n        (_a = coord.points) === null || _a === void 0 ? void 0 : _a.forEach(function (point) {\n          if (minX_1 > point.x) minX_1 = point.x;\n          if (minY_1 > point.y) minY_1 = point.y;\n        });\n      });\n      dBegin[0] = begin[0] - minX_1;\n      dBegin[1] = begin[1] - minY_1;\n    }\n    var isHorizontal = rankdir === 'LR' || rankdir === 'RL';\n    // 变形为辐射\n    if (radial) {\n      var _g = this,\n        focusNode = _g.focusNode,\n        ranksep = _g.ranksep,\n        getRadialPos_1 = _g.getRadialPos;\n      var focusId = (0, util_1.isString)(focusNode) ? focusNode : focusNode === null || focusNode === void 0 ? void 0 : focusNode.id;\n      var focusLayer_1 = focusId ? (_d = g.node(focusId)) === null || _d === void 0 ? void 0 : _d._rank : 0;\n      var layers_1 = [];\n      var dim_1 = isHorizontal ? 'y' : 'x';\n      var sizeDim_1 = isHorizontal ? 'height' : 'width';\n      // 找到整个图作为环的坐标维度（dim）的最大、最小值，考虑节点宽度\n      var min_1 = Infinity;\n      var max_1 = -Infinity;\n      g.nodes().forEach(function (node) {\n        var coord = g.node(node);\n        if (!self.nodeMap[node]) return;\n        var currentNodesep = nodesepfunc(self.nodeMap[node]);\n        if (focusLayer_1 === 0) {\n          if (!layers_1[coord._rank]) {\n            layers_1[coord._rank] = {\n              nodes: [],\n              totalWidth: 0,\n              maxSize: -Infinity\n            };\n          }\n          layers_1[coord._rank].nodes.push(node);\n          layers_1[coord._rank].totalWidth += currentNodesep * 2 + coord[sizeDim_1];\n          if (layers_1[coord._rank].maxSize < Math.max(coord.width, coord.height)) {\n            layers_1[coord._rank].maxSize = Math.max(coord.width, coord.height);\n          }\n        } else {\n          var diffLayer = coord._rank - focusLayer_1;\n          if (diffLayer === 0) {\n            if (!layers_1[diffLayer]) {\n              layers_1[diffLayer] = {\n                nodes: [],\n                totalWidth: 0,\n                maxSize: -Infinity\n              };\n            }\n            layers_1[diffLayer].nodes.push(node);\n            layers_1[diffLayer].totalWidth += currentNodesep * 2 + coord[sizeDim_1];\n            if (layers_1[diffLayer].maxSize < Math.max(coord.width, coord.height)) {\n              layers_1[diffLayer].maxSize = Math.max(coord.width, coord.height);\n            }\n          } else {\n            var diffLayerAbs = Math.abs(diffLayer);\n            if (!layers_1[diffLayerAbs]) {\n              layers_1[diffLayerAbs] = {\n                left: [],\n                right: [],\n                totalWidth: 0,\n                maxSize: -Infinity\n              };\n            }\n            layers_1[diffLayerAbs].totalWidth += currentNodesep * 2 + coord[sizeDim_1];\n            if (layers_1[diffLayerAbs].maxSize < Math.max(coord.width, coord.height)) {\n              layers_1[diffLayerAbs].maxSize = Math.max(coord.width, coord.height);\n            }\n            if (diffLayer < 0) {\n              layers_1[diffLayerAbs].left.push(node);\n            } else {\n              layers_1[diffLayerAbs].right.push(node);\n            }\n          }\n        }\n        var leftPos = coord[dim_1] - coord[sizeDim_1] / 2 - currentNodesep;\n        var rightPos = coord[dim_1] + coord[sizeDim_1] / 2 + currentNodesep;\n        if (leftPos < min_1) min_1 = leftPos;\n        if (rightPos > max_1) max_1 = rightPos;\n      });\n      // const padding = (max - min) * 0.1; // TODO\n      // \b初始化为第一圈的半径，后面根据每层 ranksep 叠加\n      var radius_1 = ranksep || 50; // TODO;\n      var radiusMap_1 = {};\n      // 扩大最大最小值范围，以便为环上留出接缝处的空隙\n      var rangeLength_1 = (max_1 - min_1) / 0.9;\n      var range_1 = [(min_1 + max_1 - rangeLength_1) * 0.5, (min_1 + max_1 + rangeLength_1) * 0.5];\n      // 根据半径、分布比例，计算节点在环上的位置，并返回该组节点中最大的 ranksep 值\n      var processNodes_1 = function (layerNodes, radius, propsMaxRanksep, arcRange) {\n        if (propsMaxRanksep === void 0) {\n          propsMaxRanksep = -Infinity;\n        }\n        if (arcRange === void 0) {\n          arcRange = [0, 1];\n        }\n        var maxRanksep = propsMaxRanksep;\n        layerNodes.forEach(function (node) {\n          var coord = g.node(node);\n          radiusMap_1[node] = radius;\n          // 获取变形为 radial 后的直角坐标系坐标\n          var _a = getRadialPos_1(coord[dim_1], range_1, rangeLength_1, radius, arcRange),\n            newX = _a.x,\n            newY = _a.y;\n          // 将新坐标写入源数据\n          if (!self.nodeMap[node]) return;\n          self.nodeMap[node].x = newX + dBegin[0];\n          self.nodeMap[node].y = newY + dBegin[1];\n          // @ts-ignore: pass layer order to data for increment layout use\n          self.nodeMap[node]._order = coord._order;\n          // 找到本层最大的一个 ranksep，作为下一层与本层的间隙，叠加到下一层的半径上\n          var currentNodeRanksep = ranksepfunc(self.nodeMap[node]);\n          if (maxRanksep < currentNodeRanksep) maxRanksep = currentNodeRanksep;\n        });\n        return maxRanksep;\n      };\n      var isFirstLevel_1 = true;\n      var lastLayerMaxNodeSize_1 = 0;\n      layers_1.forEach(function (layerNodes) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!((_a = layerNodes === null || layerNodes === void 0 ? void 0 : layerNodes.nodes) === null || _a === void 0 ? void 0 : _a.length) && !((_b = layerNodes === null || layerNodes === void 0 ? void 0 : layerNodes.left) === null || _b === void 0 ? void 0 : _b.length) && !((_c = layerNodes === null || layerNodes === void 0 ? void 0 : layerNodes.right) === null || _c === void 0 ? void 0 : _c.length)) {\n          return;\n        }\n        // 第一层只有一个节点，直接放在圆心，初始半径设定为 0\n        if (isFirstLevel_1 && layerNodes.nodes.length === 1) {\n          // 将新坐标写入源数据\n          var nodeId = layerNodes.nodes[0];\n          if (!self.nodeMap[nodeId]) return;\n          self.nodeMap[nodeId].x = dBegin[0];\n          self.nodeMap[nodeId].y = dBegin[1];\n          radiusMap_1[layerNodes.nodes[0]] = 0;\n          radius_1 = ranksepfunc(self.nodeMap[nodeId]);\n          isFirstLevel_1 = false;\n          return;\n        }\n        // 为接缝留出空隙，半径也需要扩大\n        radius_1 = Math.max(radius_1, layerNodes.totalWidth / (2 * Math.PI)); // / 0.9;\n        var maxRanksep = -Infinity;\n        if (focusLayer_1 === 0 || ((_d = layerNodes.nodes) === null || _d === void 0 ? void 0 : _d.length)) {\n          maxRanksep = processNodes_1(layerNodes.nodes, radius_1, maxRanksep, [0, 1]); // 0.8\n        } else {\n          var leftRatio = ((_e = layerNodes.left) === null || _e === void 0 ? void 0 : _e.length) / (((_f = layerNodes.left) === null || _f === void 0 ? void 0 : _f.length) + ((_g = layerNodes.right) === null || _g === void 0 ? void 0 : _g.length));\n          maxRanksep = processNodes_1(layerNodes.left, radius_1, maxRanksep, [0, leftRatio]); // 接缝留出 0.05 的缝隙\n          maxRanksep = processNodes_1(layerNodes.right, radius_1, maxRanksep, [leftRatio + 0.05, 1]); // 接缝留出 0.05 的缝隙\n        }\n\n        radius_1 += maxRanksep;\n        isFirstLevel_1 = false;\n        lastLayerMaxNodeSize_1 - layerNodes.maxSize;\n      });\n      g.edges().forEach(function (edge) {\n        var _a, _b, _c;\n        var coord = g.edge(edge);\n        var i = edges.findIndex(function (it) {\n          var source = (0, util_1.getEdgeTerminal)(it, 'source');\n          var target = (0, util_1.getEdgeTerminal)(it, 'target');\n          return source === edge.v && target === edge.w;\n        });\n        if (i <= -1) return;\n        if (self.edgeLabelSpace && self.controlPoints && edges[i].type !== 'loop') {\n          var otherDim_1 = dim_1 === 'x' ? 'y' : 'x';\n          var controlPoints = (_a = coord === null || coord === void 0 ? void 0 : coord.points) === null || _a === void 0 ? void 0 : _a.slice(1, coord.points.length - 1);\n          var newControlPoints_1 = [];\n          var sourceOtherDimValue_1 = (_b = g.node(edge.v)) === null || _b === void 0 ? void 0 : _b[otherDim_1];\n          var otherDimDist_1 = sourceOtherDimValue_1 - ((_c = g.node(edge.w)) === null || _c === void 0 ? void 0 : _c[otherDim_1]);\n          var sourceRadius_1 = radiusMap_1[edge.v];\n          var radiusDist_1 = sourceRadius_1 - radiusMap_1[edge.w];\n          controlPoints === null || controlPoints === void 0 ? void 0 : controlPoints.forEach(function (point) {\n            // 根据该边的起点、终点半径，及起点、终点、控制点位置关系，确定该控制点的半径\n            var cRadius = (point[otherDim_1] - sourceOtherDimValue_1) / otherDimDist_1 * radiusDist_1 + sourceRadius_1;\n            // 获取变形为 radial 后的直角坐标系坐标\n            var newPos = getRadialPos_1(point[dim_1], range_1, rangeLength_1, cRadius);\n            newControlPoints_1.push({\n              x: newPos.x + dBegin[0],\n              y: newPos.y + dBegin[1]\n            });\n          });\n          edges[i].controlPoints = newControlPoints_1;\n        }\n      });\n    } else {\n      var layerCoords_1 = new Set();\n      var isInvert = rankdir === 'BT' || rankdir === 'RL';\n      var layerCoordSort = isInvert ? function (a, b) {\n        return b - a;\n      } : function (a, b) {\n        return a - b;\n      };\n      g.nodes().forEach(function (node) {\n        var coord = g.node(node);\n        if (!coord) return;\n        var ndata = _this.nodeMap[node];\n        if (!ndata) {\n          ndata = combos === null || combos === void 0 ? void 0 : combos.find(function (it) {\n            return it.id === node;\n          });\n        }\n        if (!ndata) return;\n        ndata.x = coord.x + dBegin[0];\n        ndata.y = coord.y + dBegin[1];\n        // @ts-ignore: pass layer order to data for increment layout use\n        ndata._order = coord._order;\n        layerCoords_1.add(isHorizontal ? ndata.x : ndata.y);\n      });\n      var layerCoordsArr_1 = Array.from(layerCoords_1).sort(layerCoordSort);\n      // pre-define the isHorizontal related functions to avoid redundant calc in interations\n      var isDifferentLayer_1 = isHorizontal ? function (point1, point2) {\n        return point1.x !== point2.x;\n      } : function (point1, point2) {\n        return point1.y !== point2.y;\n      };\n      var filterControlPointsOutOfBoundary_1 = isHorizontal ? function (ps, point1, point2) {\n        var max = Math.max(point1.y, point2.y);\n        var min = Math.min(point1.y, point2.y);\n        return ps.filter(function (point) {\n          return point.y <= max && point.y >= min;\n        });\n      } : function (ps, point1, point2) {\n        var max = Math.max(point1.x, point2.x);\n        var min = Math.min(point1.x, point2.x);\n        return ps.filter(function (point) {\n          return point.x <= max && point.x >= min;\n        });\n      };\n      g.edges().forEach(function (edge) {\n        var _a;\n        var coord = g.edge(edge);\n        var i = edges.findIndex(function (it) {\n          var source = (0, util_1.getEdgeTerminal)(it, 'source');\n          var target = (0, util_1.getEdgeTerminal)(it, 'target');\n          return source === edge.v && target === edge.w;\n        });\n        if (i <= -1) return;\n        if (self.edgeLabelSpace && self.controlPoints && edges[i].type !== 'loop') {\n          (_a = coord === null || coord === void 0 ? void 0 : coord.points) === null || _a === void 0 ? void 0 : _a.forEach(function (point) {\n            point.x += dBegin[0];\n            point.y += dBegin[1];\n          });\n          var sourceNode = self.nodeMap[edge.v];\n          var targetNode = self.nodeMap[edge.w];\n          edges[i].controlPoints = getControlPoints(coord === null || coord === void 0 ? void 0 : coord.points, sourceNode, targetNode, layerCoordsArr_1, isHorizontal, isDifferentLayer_1, filterControlPointsOutOfBoundary_1);\n        }\n      });\n    }\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n  DagreLayout.prototype.getRadialPos = function (dimValue, range, rangeLength, radius, arcRange) {\n    if (arcRange === void 0) {\n      arcRange = [0, 1];\n    }\n    // dimRatio 占圆弧的比例\n    var dimRatio = (dimValue - range[0]) / rangeLength;\n    // 再进一步归一化到指定的范围上\n    dimRatio = dimRatio * (arcRange[1] - arcRange[0]) + arcRange[0];\n    // 使用最终归一化后的范围计算角度\n    var angle = dimRatio * 2 * Math.PI; // 弧度\n    // 将极坐标系转换为直角坐标系\n    return {\n      x: Math.cos(angle) * radius,\n      y: Math.sin(angle) * radius\n    };\n  };\n  DagreLayout.prototype.getType = function () {\n    return 'dagre';\n  };\n  return DagreLayout;\n}(base_1.Base);\nexports.DagreLayout = DagreLayout;\n/**\n * Format controlPoints to avoid polylines crossing nodes\n * @param points\n * @param sourceNode\n * @param targetNode\n * @param layerCoordsArr\n * @param isHorizontal\n * @returns\n */\nvar getControlPoints = function (points, sourceNode, targetNode, layerCoordsArr, isHorizontal, isDifferentLayer, filterControlPointsOutOfBoundary) {\n  var controlPoints = (points === null || points === void 0 ? void 0 : points.slice(1, points.length - 1)) || []; // 去掉头尾\n  // 酌情增加控制点，使折线不穿过跨层的节点\n  if (sourceNode && targetNode) {\n    var sourceX = sourceNode.x,\n      sourceY = sourceNode.y;\n    var targetX = targetNode.x,\n      targetY = targetNode.y;\n    if (isHorizontal) {\n      sourceX = sourceNode.y;\n      sourceY = sourceNode.x;\n      targetX = targetNode.y;\n      targetY = targetNode.x;\n    }\n    // 为跨层级的边增加第一个控制点。忽略垂直的/横向的边。\n    // 新控制点 = {\n    //   x: 终点x,\n    //   y: (起点y + 下一层y) / 2,   #下一层y可能不等于终点y\n    // }\n    if (targetY !== sourceY && sourceX !== targetX) {\n      var sourceLayer = layerCoordsArr.indexOf(sourceY);\n      var sourceNextLayerCoord = layerCoordsArr[sourceLayer + 1];\n      if (sourceNextLayerCoord) {\n        var firstControlPoint = controlPoints[0];\n        var insertStartControlPoint = isHorizontal ? {\n          x: (sourceY + sourceNextLayerCoord) / 2,\n          y: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.y) || targetX\n        } : {\n          x: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.x) || targetX,\n          y: (sourceY + sourceNextLayerCoord) / 2\n        };\n        // 当新增的控制点不存在（!=当前第一个控制点）时添加\n        if (!firstControlPoint || isDifferentLayer(firstControlPoint, insertStartControlPoint)) {\n          controlPoints.unshift(insertStartControlPoint);\n        }\n      }\n      var targetLayer = layerCoordsArr.indexOf(targetY);\n      var layerDiff = Math.abs(targetLayer - sourceLayer);\n      if (layerDiff === 1) {\n        controlPoints = filterControlPointsOutOfBoundary(controlPoints, sourceNode, targetNode);\n        // one controlPoint at least\n        if (!controlPoints.length) {\n          controlPoints.push(isHorizontal ? {\n            x: (sourceY + targetY) / 2,\n            y: sourceX\n          } : {\n            x: sourceX,\n            y: (sourceY + targetY) / 2\n          });\n        }\n      } else if (layerDiff > 1) {\n        var targetLastLayerCoord = layerCoordsArr[targetLayer - 1];\n        if (targetLastLayerCoord) {\n          var lastControlPoints = controlPoints[controlPoints.length - 1];\n          var insertEndControlPoint = isHorizontal ? {\n            x: (targetY + targetLastLayerCoord) / 2,\n            y: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.y) || targetX\n          } : {\n            x: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.x) || sourceX,\n            y: (targetY + targetLastLayerCoord) / 2\n          };\n          // 当新增的控制点不存在（!=当前最后一个控制点）时添加\n          if (!lastControlPoints || isDifferentLayer(lastControlPoints, insertEndControlPoint)) {\n            controlPoints.push(insertEndControlPoint);\n          }\n        }\n      }\n    }\n  }\n  return controlPoints;\n};","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","nodeId","self","node","nodes","find","id","layout","updateCfg","DagreLayout","rankdir","align","undefined","nodeSize","nodesepFunc","ranksepFunc","nodesep","ranksep","controlPoints","radial","focusNode","combos","begin","_e","comboEdges","_f","vedges","edges","g","graph_1","multigraph","compound","nodeMap","nodeComboMap","forEach","comboId","push","sortedNodes","visitedMap","nodeOrder","length","nodeSizeFunc","d","size","width","height","ranksepfunc","nodesepfunc","horisep","vertisep","setDefaultEdgeLabel","setGraph","comboMap","sortByCombo","combo","collapsed","verti","hori","setNode","parentId","setParent","filter","layer","edge","source","target","layoutNode","setEdge","weight","concat","comboEdge","sources","targets","s","t","prevGraph","preset","index_1","edgeLabelSpace","keepNodeOrder","Boolean","dBegin","minX_1","Infinity","minY_1","coord","x","y","points","point","isHorizontal","getRadialPos_1","focusId","focusLayer_1","_rank","layers_1","dim_1","sizeDim_1","min_1","max_1","currentNodesep","totalWidth","maxSize","Math","max","diffLayer","diffLayerAbs","abs","left","right","leftPos","rightPos","radius_1","radiusMap_1","rangeLength_1","range_1","processNodes_1","layerNodes","radius","propsMaxRanksep","arcRange","maxRanksep","newX","newY","_order","currentNodeRanksep","isFirstLevel_1","lastLayerMaxNodeSize_1","PI","leftRatio","i","findIndex","it","v","w","type","otherDim_1","slice","newControlPoints_1","sourceOtherDimValue_1","otherDimDist_1","sourceRadius_1","radiusDist_1","cRadius","newPos","layerCoords_1","Set","isInvert","layerCoordSort","a","b","ndata","add","layerCoordsArr_1","Array","from","sort","isDifferentLayer_1","point1","point2","filterControlPointsOutOfBoundary_1","ps","min","sourceNode","targetNode","getControlPoints","onLayoutEnd","dimValue","range","rangeLength","dimRatio","angle","cos","sin","base_1","exports","layerCoordsArr","isDifferentLayer","filterControlPointsOutOfBoundary","sourceX","sourceY","targetX","targetY","sourceLayer","indexOf","sourceNextLayerCoord","firstControlPoint","insertStartControlPoint","unshift","targetLayer","layerDiff","targetLastLayerCoord","lastControlPoints","insertEndControlPoint"],"sourceRoot":"","sources":["../../src/layout/dagre.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}