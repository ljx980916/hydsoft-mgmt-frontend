{"ast":null,"code":"import G6 from '@antv/g6';\nconst {\n  Util\n} = G6;\nexport function drawGraph(dom, data) {\n  const COLORS = ['#F9E4E4', '#F0DCF0', '#F6D5F0', '#EAE6FB', '#FED0D2', '#F8D2FD', '#CDCDFC', '#D8D3FC', '#D8D3FC', '#D8F7DB'];\n  const BaseConfig = {\n    nameFontSize: 12,\n    childCountWidth: 22,\n    countMarginLeft: 0,\n    propertyCountWidth: 30,\n    itemPadding: 16,\n    selectedIconWidth: 12,\n    nameMarginLeft: 4,\n    rootPadding: 18\n  };\n  const KeyStyle = {\n    background: {\n      default: '',\n      hover: '#e8f7ff',\n      selected: '#e8f7ff',\n      actived: '#e8f7ff'\n    },\n    borderColor: {\n      default: '',\n      hover: '#1890FF',\n      selected: '#1890FF',\n      actived: '#1890FF'\n    }\n  };\n  const ChildCountStyle = {\n    background: {\n      default: '#fff',\n      hover: '#E8F7FF',\n      expanded: '#E6FFFB',\n      expandedHover: '#CEF5EF'\n    },\n    borderColor: {\n      default: '#1890ff',\n      expanded: '#5CDBD3'\n    }\n  };\n  const NameStyle = {\n    color: {\n      default: 'rgba(0, 0, 0, .65)',\n      dash: 'rgba(0, 0, 0, .3)',\n      hover: '#40A8FF',\n      actived: '#40A8FF',\n      selected: '#40A8FF'\n    }\n  };\n  const MainStyle = {\n    background: {\n      default: '#fff',\n      hover: '#e8f7ff',\n      actived: '#e8f7ff',\n      selected: '#e8f7ff'\n    }\n  };\n  G6.registerNode('treeNode', {\n    options: {\n      style: {\n        fill: '#e8f7ff'\n      },\n      stateStyles: {\n        hover: {\n          fillOpacity: 0.6\n        },\n        selected: {}\n      }\n    },\n    addBottomLine(group, rootNode, props) {\n      if (!rootNode) {\n        const {\n          x,\n          width,\n          stroke,\n          lineWidth\n        } = props;\n        return group.addShape('path', {\n          attrs: {\n            path: [['M', x - 1, 0], ['L', width, 0]],\n            stroke,\n            lineWidth\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'node-path-shape'\n        });\n      }\n    },\n    draw(model, group) {\n      const {\n        collapsed,\n        selected,\n        isInclude,\n        children,\n        label\n      } = model;\n      const schemaType = model.schemaType;\n      const hasChildren = children?.length;\n      const {\n        childCountWidth,\n        countMarginLeft,\n        itemPadding,\n        selectedIconWidth,\n        nameMarginLeft,\n        rootPadding\n      } = BaseConfig;\n      let width = 0;\n      const height = 28;\n      // let x = -width / 2;\n      const x = 0;\n      const y = -height / 2;\n      const borderRadius = 4;\n      // 名称文本\n      const text = this.addLabel(group, label, x, y);\n      const textWidth = text.getBBox().width;\n      width = textWidth + itemPadding + selectedIconWidth + nameMarginLeft;\n      width = width < minWidth ? minWidth : width;\n      if (!rootNode && hasChildren) {\n        width += countMarginLeft;\n        width += childCountWidth;\n      }\n      const keyShapeAttrs = {\n        x,\n        y,\n        width,\n        height,\n        radius: borderRadius,\n        fill: undefined,\n        stroke: undefined\n      };\n      // keyShape根节点选中样式\n      if (rootNode && selected) {\n        keyShapeAttrs.fill = KeyStyle.background.selected;\n        keyShapeAttrs.stroke = KeyStyle.borderColor.selected;\n      }\n      const keyShape = group.addShape('rect', {\n        attrs: keyShapeAttrs,\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'root-key-shape-rect-shape'\n      });\n      this.addBottomLine(group, rootNode, {\n        stroke: '#AAB7C4',\n        lineWidth: 1,\n        x,\n        width\n      });\n      const mainX = x - 6;\n      const mainY = -height - 1;\n      const hoverBackProps = {\n        hasChildren,\n        width,\n        selectedIconWidth,\n        childCountWidth,\n        selected,\n        fill: MainStyle.background.default,\n        height,\n        selectedUrl,\n        x,\n        y,\n        mainX,\n        mainY\n      };\n      this.addHoverBack(group, rootNode, hoverBackProps);\n      let nameColor = NameStyle.color.default;\n      if (selected) {\n        nameColor = NameStyle.color.selected;\n      }\n      if (model.showInclude && !isInclude) {\n        nameColor = NameStyle.color.dash;\n      }\n\n      // 名称\n      const nameProps = {\n        label,\n        mainX,\n        rootPadding,\n        fill: nameColor,\n        selected,\n        selectedIconWidth,\n        nameMarginLeft,\n        y\n      };\n      this.addName(group, rootNode, nameProps);\n\n      // 子类数量\n      const childCountProps = {\n        hasChildren,\n        width,\n        childCountWidth,\n        collapsed,\n        schemaType\n      };\n      this.addChildCount(group, rootNode, childCountProps);\n      return keyShape;\n    }\n  });\n  G6.registerNode('indentedRoot', {\n    draw(model, group) {\n      const rootColor = '#576286';\n      const keyShape = group.addShape('rect', {\n        attrs: {\n          x: -46,\n          y: -16,\n          width: 92,\n          height: 32,\n          fill: rootColor,\n          radius: 2,\n          stroke: '#5B8FF9',\n          lineWidth: model.selected ? 2 : 0,\n          cursor: 'pointer'\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'key-shape'\n      });\n      if (model.label) {\n        const text = group.addShape('text', {\n          attrs: {\n            text: model.label,\n            fill: \"#fff\",\n            fontSize: 16,\n            x: 0,\n            y: 0,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            cursor: 'pointer'\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'root-text-shape'\n        });\n        const textBBox = text.getBBox();\n        const width = textBBox.width + 24;\n        const height = textBBox.height + 12;\n        keyShape.attr({\n          x: -width / 2,\n          y: -height / 2,\n          width,\n          height\n        });\n      }\n      const {\n        collapsed,\n        children\n      } = model;\n      const hasChildren = children?.length;\n      let clickCircleY = 22;\n      // 子类数量，绘制圆点在节点正下方\n      if (hasChildren) {\n        const schemaType = model.schemaType;\n        const childCountGroup = group.addGroup({\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-group'\n        });\n        childCountGroup.setMatrix([1, 0, 0, 0, 1, 0, 0, clickCircleY, 1]);\n        const countBackWidth = collapsed ? 26 : 12;\n        childCountGroup.addShape('rect', {\n          attrs: {\n            width: countBackWidth,\n            height: 12,\n            radius: 6,\n            stroke: rootColor,\n            lineWidth: 2,\n            fill: collapsed ? rootColor : '#fff',\n            x: -countBackWidth / 2,\n            y: -6,\n            cursor: 'pointer'\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-rect-shape'\n        });\n        const childCountText = childCountGroup.addShape('text', {\n          attrs: {\n            text: schemaType ? `${schemaType.subTypeCount}` : '0',\n            fill: '#fff',\n            x: 0,\n            y: 0,\n            fontSize: 10,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            cursor: 'pointer'\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-text-shape'\n        });\n        const childHoverIcon = childCountGroup.addShape('path', {\n          attrs: {\n            stroke: '#fff',\n            lineWidth: 1,\n            cursor: 'pointer',\n            path: [['M', -3, 2], ['L', 0, -2], ['L', 3, 2]]\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-expand-icon',\n          capture: false\n        });\n        childCountGroup.addShape('path', {\n          attrs: {\n            path: [['M', 0, -13], ['L', 0, -6]],\n            stroke: rootColor,\n            lineWidth: 2\n          }\n        });\n        childHoverIcon.hide();\n\n        // 连接 count 的线段\t\n        const countLink = group.addShape('path', {\n          attrs: {\n            path: [['M', 0, 0], ['L', 0, 11]],\n            stroke: model.branchColor,\n            lineWidth: 2\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'count-link'\n        });\n        countLink.toBack();\n        if (collapsed) {\n          childCountGroup.show();\n          childCountText.show();\n          countLink.show();\n        } else {\n          childCountGroup.hide();\n          childCountText.hide();\n          countLink.hide();\n        }\n        clickCircleY += 16;\n      }\n\n      // 增加子节点 icon\t\n      const addChildIcon = group.addShape('marker', {\n        attrs: {\n          x: 0,\n          y: clickCircleY,\n          r: 6,\n          symbol: G6.Marker.expand,\n          stroke: '#999',\n          fill: '#fff',\n          lineWidth: 1,\n          cursor: 'pointer'\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'add-child-icon'\n      });\n      addChildIcon.hide();\n      // 连接增加子节点 icon 的线段\t\n      const addChildLink = group.addShape('path', {\n        attrs: {\n          path: [['M', 0, clickCircleY - 10], ['L', 0, clickCircleY]],\n          stroke: model.branchColor,\n          lineWidth: 2\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'add-child-link'\n      });\n      addChildLink.toBack();\n      addChildLink.hide();\n      const bbox = keyShape.getBBox();\n      const backContainer = group.addShape('path', {\n        attrs: {\n          path: hasChildren ? [['M', bbox.minX, bbox.minY], ['L', bbox.maxX, bbox.minY], ['L', bbox.maxX, bbox.maxY], ['L', 10, bbox.maxY], ['L', 10, bbox.maxY + 28], ['L', -10, bbox.maxY + 28], ['L', -10, bbox.maxY], ['L', bbox.minX, bbox.maxY], ['Z']] : [['M', bbox.minX, bbox.minY], ['L', bbox.maxX, bbox.minY], ['L', bbox.maxX, bbox.maxY], ['L', 10, bbox.maxY], ['L', 10, bbox.maxY + 14], ['L', -10, bbox.maxY + 14], ['L', -10, bbox.maxY], ['L', bbox.minX, bbox.maxY], ['Z']],\n          fill: '#fff',\n          opacity: 0\n        },\n        draggable: true\n      });\n      backContainer.toBack();\n      return keyShape;\n    },\n    getAnchorPoints() {\n      return [[0.5, 1]];\n    },\n    update: undefined,\n    setState(name, value, node) {\n      if (name === 'closest') {\n        const keyShape = node.getKeyShape();\n        if (value) keyShape.attr('lineWidth', 2);else if (!node.getModel().selected) keyShape.attr('lineWidth', 1);\n      }\n    }\n  });\n  G6.registerNode('indentedNode', {\n    addChildCount(group, tag, props) {\n      const {\n        collapsed,\n        branchColor,\n        count\n      } = props;\n      let clickCircleY = 10;\n      // 子类数量 icon，绘制圆点在节点正下方\n      if (tag) {\n        const childCountGroup = group.addGroup({\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-group'\n        });\n        childCountGroup.setMatrix([1, 0, 0, 0, 1, 0, 0, clickCircleY, 1]);\n        const countBackWidth = collapsed ? 26 : 12;\n        childCountGroup.addShape('rect', {\n          attrs: {\n            width: countBackWidth,\n            height: 12,\n            radius: 6,\n            stroke: branchColor,\n            lineWidth: 2,\n            fill: collapsed ? branchColor : '#fff',\n            x: -countBackWidth / 2,\n            y: -6,\n            cursor: 'pointer'\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-rect-shape'\n        });\n        const childCountText = childCountGroup.addShape('text', {\n          attrs: {\n            text: count,\n            fill: '#fff',\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            cursor: 'pointer'\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-text-shape'\n        });\n        const childHoverIcon = childCountGroup.addShape('path', {\n          attrs: {\n            stroke: '#fff',\n            lineWidth: 1,\n            cursor: 'pointer',\n            path: [['M', -3, 2], ['L', 0, -2], ['L', 3, 2]]\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'child-count-expand-icon',\n          capture: false\n        });\n        childHoverIcon.hide();\n\n        // 连接 count 的线段\n        const countLink = group.addShape('path', {\n          attrs: {\n            path: [['M', 0, 0], ['L', 0, 11]],\n            stroke: branchColor,\n            lineWidth: 2\n          },\n          // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n          name: 'count-link'\n        });\n        countLink.toBack();\n        if (collapsed) {\n          childCountGroup.show();\n          childCountText.show();\n          countLink.show();\n        } else {\n          childCountGroup.hide();\n          childCountText.hide();\n          countLink.hide();\n        }\n        clickCircleY += 16;\n      }\n\n      // 增加子节点 icon\n      const addChildIcon = group.addShape('marker', {\n        attrs: {\n          x: 0,\n          y: clickCircleY,\n          r: 6,\n          symbol: G6.Marker.expand,\n          stroke: '#999',\n          fill: '#fff',\n          lineWidth: 1,\n          cursor: 'pointer'\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'add-child-icon'\n      });\n      addChildIcon.hide();\n\n      // 连接增加子节点 icon 的线段\n      const addChildLink = group.addShape('path', {\n        attrs: {\n          path: [['M', 0, clickCircleY - 10], ['L', 0, clickCircleY]],\n          stroke: branchColor,\n          lineWidth: 2\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'add-child-link'\n      });\n      addChildLink.toBack();\n      addChildLink.hide();\n    },\n    addHoverBack(group, props) {\n      const {\n        mainX,\n        mainY,\n        width,\n        height,\n        fill\n      } = props;\n      group.addShape('rect', {\n        attrs: {\n          x: mainX,\n          y: mainY,\n          width,\n          height,\n          radius: 11,\n          fill,\n          cursor: 'pointer'\n        },\n        // capture: false,\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'main-shape',\n        draggable: true\n      });\n    },\n    addName(group, props) {\n      const {\n        label,\n        x = 0,\n        y,\n        fill\n      } = props;\n      return group.addShape('text', {\n        attrs: {\n          text: label,\n          x,\n          y,\n          textAlign: 'start',\n          textBaseline: 'top',\n          fill,\n          fontSize: 14,\n          fontFamily: 'PingFangSC-Regular',\n          cursor: 'pointer'\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'not-root-text-shape',\n        draggable: true\n      });\n    },\n    draw(model, group) {\n      const {\n        collapsed,\n        selected,\n        depth,\n        label\n      } = model;\n      // 是否为根节点\n      const rootNode = depth === 0;\n      // 子节点数量\n      const childCount = model.children?.length || 0;\n      const {\n        itemPadding,\n        nameMarginLeft\n      } = BaseConfig;\n      let width = 0;\n      const height = 24;\n      // let x = -width / 2;\n      const x = 0;\n      const y = -height / 2;\n      const borderRadius = 4;\n      // 名称文本\n      const text = this.addName(group, {\n        label,\n        x,\n        y\n      });\n      let textWidth = text.getBBox().width;\n      width = textWidth + itemPadding + nameMarginLeft;\n      const keyShapeAttrs = {\n        x,\n        y,\n        width,\n        height,\n        radius: borderRadius,\n        fill: undefined,\n        stroke: undefined\n      };\n      const keyShape = group.addShape('rect', {\n        attrs: keyShapeAttrs,\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'root-key-shape-rect-shape'\n      });\n\n      // 底部横线\n      // const branchThick = model.depth <= 2 ? 3 : model.depth <= 4 ? 2 : 1;\n      const bottomLine = this.addBottomLine(group, false, {\n        stroke: model.branchColor || '#AAB7C4',\n        lineWidth: 3,\n        // model.lineWidth || branchThick || 1,\n        x,\n        width\n      });\n      const mainX = x - 6;\n      const mainY = -height - 6;\n\n      // hover背景\n      this.addHoverBack(group, {\n        fill: selected ? MainStyle.background.hover : MainStyle.background.default,\n        height,\n        width,\n        mainX,\n        mainY\n      });\n      let nameColor = NameStyle.color.default;\n      if (selected) {\n        nameColor = NameStyle.color.hover;\n      }\n\n      // 名称\n      text.attr({\n        y: y - 12,\n        fill: nameColor\n      });\n      text.toFront();\n      textWidth = text.getBBox().width;\n      if (bottomLine) bottomLine.toFront();\n      this.addChildCount(group, childCount && !rootNode, {\n        collapsed,\n        branchColor: model.branchColor,\n        count: childCount ? `${childCount}` : undefined\n      });\n      const bbox = group.getBBox();\n      const backContainer = group.addShape('path', {\n        attrs: {\n          path: childCount ? [['M', bbox.minX, bbox.minY], ['L', bbox.maxX, bbox.minY], ['L', bbox.maxX, bbox.maxY], ['L', bbox.minX + 20, bbox.maxY], ['L', bbox.minX + 20, bbox.maxY + 20], ['L', bbox.minX, bbox.maxY + 20], ['Z']] : [['M', bbox.minX, bbox.minY], ['L', bbox.maxX, bbox.minY], ['L', bbox.maxX, bbox.maxY], ['L', bbox.minX, bbox.maxY], ['Z']],\n          fill: '#fff',\n          opacity: 0\n        },\n        draggable: true\n      });\n      backContainer.toBack();\n      return keyShape;\n    },\n    setState(name, value, node) {\n      if (name === 'closest' || name === 'selected') {\n        const group = node.getContainer();\n        const textShape = group.find(child => child.get('name') === 'not-root-text-shape');\n        const mainShape = group.find(child => child.get('name') === 'main-shape');\n        if (value) {\n          if (textShape) {\n            textShape.attr('fill', NameStyle.color.hover);\n          }\n          if (mainShape) {\n            mainShape.attr('fill', MainStyle.background.hover);\n          }\n        } else {\n          const selected = node.hasState('selected');\n          if (selected) {\n            if (textShape) {\n              textShape.attr('fill', NameStyle.color.selected);\n            }\n            if (mainShape) {\n              mainShape.attr('fill', MainStyle.background.default);\n            }\n          } else {\n            if (textShape) {\n              textShape.attr('fill', NameStyle.color.default);\n            }\n            if (mainShape) {\n              mainShape.attr('fill', MainStyle.background.default);\n            }\n          }\n        }\n      }\n    }\n  }, 'treeNode');\n  G6.registerEdge('indentedEdge', {\n    afterDraw: (cfg, group) => {\n      const sourceNode = cfg.sourceNode?.getModel();\n      const targetNode = cfg.targetNode?.getModel();\n      const color = sourceNode.branchColor || targetNode.branchColor || cfg.color || '#000';\n      // const branchThick = sourceNode.depth <= 1 ? 3 : sourceNode.depth <= 3 ? 2 : 1;\n      const keyShape = group.get('children')[0];\n      keyShape.attr({\n        stroke: color,\n        lineWidth: 3 // branchThick\n      });\n\n      group.toBack();\n    },\n    getControlPoints: cfg => {\n      const startPoint = cfg.startPoint;\n      const endPoint = cfg.endPoint;\n      return [startPoint, {\n        x: startPoint.x,\n        y: endPoint.y\n      }, endPoint];\n    },\n    update: undefined\n  }, 'polyline');\n  const dataTransform = data => {\n    const changeData = (d, level = 0, color) => {\n      const data = {\n        ...d\n      };\n      data.type = level === 0 ? 'indentedRoot' : 'indentedNode';\n      data.hover = false;\n      if (color) {\n        data.color = color;\n      }\n      if (level === 1 && !d.direction) {\n        if (!d.direction) {\n          data.direction = d.id.charCodeAt(d.id.length - 1) % 2 === 0 ? 'right' : 'left';\n        }\n      }\n      if (d.children) {\n        data.children = d.children.map(child => changeData(child, level + 1, data.color));\n      }\n      // 给定 branchColor 和 0-2 层节点 depth\n      if (data.children?.length) {\n        data.depth = 0;\n        data.children.forEach((subtree, i) => {\n          subtree.branchColor = COLORS[i % COLORS.length];\n          // dfs\n          let currentDepth = 1;\n          subtree.depth = currentDepth;\n          Util.traverseTree(subtree, child => {\n            child.branchColor = COLORS[i % COLORS.length];\n            if (!child.depth) {\n              child.depth = currentDepth + 1;\n            } else currentDepth = subtree.depth;\n            if (child.children) {\n              child.children.forEach(subChild => {\n                subChild.depth = child.depth + 1;\n              });\n            }\n            // 把没有 children 但有 schemaType.subTypeCount 的节点设置为 collapsed\n            // 说明展开需要增量请求 children，未请求前展示 collapsed 状态\n            if (!child.children?.length && child.schemaType?.subTypeCount) {\n              child.collapsed = true;\n            }\n            return true;\n          });\n        });\n      }\n      return data;\n    };\n    return changeData(data);\n  };\n  const tree = new G6.TreeGraph({\n    container: dom,\n    width: 340,\n    height: 2000,\n    layout: {\n      type: 'indented',\n      direction: 'LR',\n      isHorizontal: true,\n      indent: 30,\n      getHeight: d => {\n        if (d.isRoot) {\n          return 30;\n        }\n        if (d.collapsed && d.children?.length) {\n          return 36;\n        }\n        return 22;\n      },\n      getVGap: () => {\n        return 10;\n      }\n    },\n    defaultEdge: {\n      type: 'indentedEdge',\n      style: {\n        lineWidth: 2,\n        radius: 16\n      }\n    },\n    nodeStateStyles: {\n      closest: {\n        fill: '#f00',\n        'node-label': {\n          fill: '#f00'\n        }\n      }\n    },\n    minZoom: 0.5,\n    modes: {\n      default: ['drag-canvas', 'wheel-scroll', 'hover-node', 'click-node', 'drag-branch', {\n        type: 'collapse-expand',\n        trigger: 'click'\n      }]\n    }\n  });\n  tree.on('afterrender', e => {\n    tree.getEdges().forEach(edge => {\n      const targetNode = edge.getTarget().getModel();\n      const color = targetNode.branchColor;\n      tree.updateItem(edge, {\n        color\n      });\n    });\n    setTimeout(() => {\n      tree.moveTo(32, 32);\n      tree.zoomTo(0.7);\n    }, 16);\n  });\n  tree.data(dataTransform(data));\n  tree.render();\n}","map":{"version":3,"names":["G6","Util","drawGraph","dom","data","COLORS","BaseConfig","nameFontSize","childCountWidth","countMarginLeft","propertyCountWidth","itemPadding","selectedIconWidth","nameMarginLeft","rootPadding","KeyStyle","background","default","hover","selected","actived","borderColor","ChildCountStyle","expanded","expandedHover","NameStyle","color","dash","MainStyle","registerNode","options","style","fill","stateStyles","fillOpacity","addBottomLine","group","rootNode","props","x","width","stroke","lineWidth","addShape","attrs","path","name","draw","model","collapsed","isInclude","children","label","schemaType","hasChildren","length","height","y","borderRadius","text","addLabel","textWidth","getBBox","minWidth","keyShapeAttrs","radius","undefined","keyShape","mainX","mainY","hoverBackProps","selectedUrl","addHoverBack","nameColor","showInclude","nameProps","addName","childCountProps","addChildCount","rootColor","cursor","fontSize","textAlign","textBaseline","textBBox","attr","clickCircleY","childCountGroup","addGroup","setMatrix","countBackWidth","childCountText","subTypeCount","childHoverIcon","capture","hide","countLink","branchColor","toBack","show","addChildIcon","r","symbol","Marker","expand","addChildLink","bbox","backContainer","minX","minY","maxX","maxY","opacity","draggable","getAnchorPoints","update","setState","value","node","getKeyShape","getModel","tag","count","fontFamily","depth","childCount","bottomLine","toFront","getContainer","textShape","find","child","get","mainShape","hasState","registerEdge","afterDraw","cfg","sourceNode","targetNode","getControlPoints","startPoint","endPoint","dataTransform","changeData","d","level","type","direction","id","charCodeAt","map","forEach","subtree","i","currentDepth","traverseTree","subChild","tree","TreeGraph","container","layout","isHorizontal","indent","getHeight","isRoot","getVGap","defaultEdge","nodeStateStyles","closest","minZoom","modes","trigger","on","e","getEdges","edge","getTarget","updateItem","setTimeout","moveTo","zoomTo","render"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/demo/g6.js"],"sourcesContent":["import G6 from '@antv/g6';\n\nconst { Util } = G6;\n\n\nexport function drawGraph(dom,data){\n      const COLORS = ['#F9E4E4', '#F0DCF0', '#F6D5F0', '#EAE6FB', '#FED0D2', '#F8D2FD', '#CDCDFC', '#D8D3FC', '#D8D3FC', '#D8F7DB'];\n      const BaseConfig = {\n        nameFontSize: 12,\n        childCountWidth: 22,\n        countMarginLeft: 0,\n        propertyCountWidth: 30,\n        itemPadding: 16,\n        selectedIconWidth: 12,\n        nameMarginLeft: 4,\n        rootPadding: 18,\n      };\n      const KeyStyle = {\n        background: {\n          default: '',\n          hover: '#e8f7ff',\n          selected: '#e8f7ff',\n          actived: '#e8f7ff',\n        },\n        borderColor: {\n          default: '',\n          hover: '#1890FF',\n          selected: '#1890FF',\n          actived: '#1890FF',\n        },\n      };\n      const ChildCountStyle = {\n        background: {\n          default: '#fff',\n          hover: '#E8F7FF',\n          expanded: '#E6FFFB',\n          expandedHover: '#CEF5EF',\n        },\n        borderColor: {\n          default: '#1890ff',\n          expanded: '#5CDBD3',\n        },\n      };\n      const NameStyle = {\n        color: {\n          default: 'rgba(0, 0, 0, .65)',\n          dash: 'rgba(0, 0, 0, .3)',\n          hover: '#40A8FF',\n          actived: '#40A8FF',\n          selected: '#40A8FF',\n        },\n      };\n      const MainStyle = {\n        background: {\n          default: '#fff',\n          hover: '#e8f7ff',\n          actived: '#e8f7ff',\n          selected: '#e8f7ff',\n        },\n      };\n      \n      \n      G6.registerNode('treeNode', {\n        options: {\n          style: {\n            fill: '#e8f7ff',\n          },\n          stateStyles: {\n            hover: {\n              fillOpacity: 0.6,\n            },\n            selected: {},\n          },\n        },\n        addBottomLine(group, rootNode, props) {\n            if (!rootNode) {\n              const { x, width, stroke, lineWidth } = props;\n              return group.addShape('path', {\n                attrs: {\n                  path: [\n                    ['M', x - 1, 0],\n                    ['L', width, 0],\n                  ],\n                  stroke,\n                  lineWidth,\n                },\n                // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n                name: 'node-path-shape',\n              });\n            }\n          },\n        draw(model, group) {\n          const { collapsed, selected, isInclude, children, label } = model;\n          const schemaType = model.schemaType;\n          const hasChildren = children?.length;\n          const {\n            childCountWidth,\n            countMarginLeft,\n            itemPadding,\n            selectedIconWidth,\n            nameMarginLeft,\n            rootPadding,\n          } = BaseConfig;\n      \n          let width = 0;\n          const height = 28;\n          // let x = -width / 2;\n          const x = 0;\n          const y = -height / 2;\n          const borderRadius = 4;\n          // 名称文本\n          const text = this.addLabel(group, label, x, y);\n          const textWidth = text.getBBox().width;\n          width = textWidth + itemPadding + selectedIconWidth + nameMarginLeft;\n      \n          width = width < minWidth ? minWidth : width;\n      \n          if (!rootNode && hasChildren) {\n            width += countMarginLeft;\n            width += childCountWidth;\n          }\n      \n          const keyShapeAttrs = {\n            x,\n            y,\n            width,\n            height,\n            radius: borderRadius,\n            fill: undefined,\n            stroke: undefined,\n          };\n          // keyShape根节点选中样式\n          if (rootNode && selected) {\n            keyShapeAttrs.fill = KeyStyle.background.selected;\n            keyShapeAttrs.stroke = KeyStyle.borderColor.selected;\n          }\n          const keyShape = group.addShape('rect', {\n            attrs: keyShapeAttrs,\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'root-key-shape-rect-shape',\n          });\n      \n          this.addBottomLine(group, rootNode, {\n            stroke: '#AAB7C4',\n            lineWidth: 1,\n            x,\n            width\n          })\n      \n          const mainX = x - 6;\n          const mainY = -height - 1;\n      \n          const hoverBackProps = {\n            hasChildren, width, selectedIconWidth,\n            childCountWidth,\n            selected,\n            fill: MainStyle.background.default,\n            height,\n            selectedUrl,\n            x,\n            y,\n            mainX,\n            mainY\n          };\n          this.addHoverBack(group, rootNode, hoverBackProps);\n      \n          let nameColor = NameStyle.color.default;\n          if (selected) {\n            nameColor = NameStyle.color.selected;\n          }\n      \n          if (model.showInclude && !isInclude) {\n            nameColor = NameStyle.color.dash;\n          }\n      \n          // 名称\n          const nameProps = {\n            label,\n            mainX,\n            rootPadding,\n            fill: nameColor,\n            selected,\n            selectedIconWidth,\n            nameMarginLeft,\n            y\n          };\n          this.addName(group, rootNode, nameProps);\n      \n          // 子类数量\n          const childCountProps = {\n            hasChildren, width, childCountWidth, collapsed, schemaType\n          }\n          this.addChildCount(group, rootNode, childCountProps);\n      \n          return keyShape;\n        },\n      });\n      \n      G6.registerNode('indentedRoot', {\n        draw(model, group) {\n          const rootColor = '#576286';\n          const keyShape = group.addShape('rect', {\n            attrs: {\n              x: -46,\n              y: -16,\n              width: 92,\n              height: 32,\n              fill: rootColor,\n              radius: 2,\n              stroke: '#5B8FF9',\n              lineWidth: model.selected ? 2 : 0,\n              cursor: 'pointer'\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'key-shape'\n          })\n      \n          if (model.label) {\n            const text = group.addShape('text', {\n              attrs: {\n                text: model.label,\n                fill: \"#fff\",\n                fontSize: 16,\n                x: 0,\n                y: 0,\n                textAlign: 'center',\n                textBaseline: 'middle',\n                cursor: 'pointer'\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'root-text-shape'\n            });\n            const textBBox = text.getBBox();\n            const width = textBBox.width + 24;\n            const height = textBBox.height + 12;\n            keyShape.attr({\n              x: -width / 2,\n              y: -height / 2,\n              width,\n              height\n            })\n          }\n      \n          const { collapsed, children } = model;\n          const hasChildren = children?.length;\n          let clickCircleY = 22;\n          // 子类数量，绘制圆点在节点正下方\n          if (hasChildren) {\n            const schemaType = model.schemaType;\n            const childCountGroup = group.addGroup({\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-group'\n            })\n            childCountGroup.setMatrix([1, 0, 0, 0, 1, 0, 0, clickCircleY, 1])\n            const countBackWidth = collapsed ? 26 : 12;\n            childCountGroup.addShape('rect', {\n              attrs: {\n                width: countBackWidth,\n                height: 12,\n                radius: 6,\n                stroke: rootColor,\n                lineWidth: 2,\n                fill: collapsed ? rootColor : '#fff',\n                x: -countBackWidth / 2,\n                y: -6,\n                cursor: 'pointer',\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-rect-shape',\n            });\n            const childCountText = childCountGroup.addShape('text', {\n              attrs: {\n                text: schemaType ? `${schemaType.subTypeCount}` : '0',\n                fill: '#fff',\n                x: 0,\n                y: 0,\n                fontSize: 10,\n                textAlign: 'center',\n                textBaseline: 'middle',\n                cursor: 'pointer',\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-text-shape',\n            });\n            const childHoverIcon = childCountGroup.addShape('path', {\n              attrs: {\n                stroke: '#fff',\n                lineWidth: 1,\n                cursor: 'pointer',\n                path: [['M', -3, 2], ['L', 0, -2], ['L', 3, 2]]\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-expand-icon',\n              capture: false\n            });\n            childCountGroup.addShape('path', {\n              attrs: {\n                path: [['M', 0, -13], ['L', 0, -6]],\n                stroke: rootColor,\n                lineWidth: 2,\n              }\n            })\n            childHoverIcon.hide();\n      \n            // 连接 count 的线段\t\n            const countLink = group.addShape('path', {\n              attrs: {\n                path: [['M', 0, 0], ['L', 0, 11]],\n                stroke: model.branchColor,\n                lineWidth: 2,\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'count-link'\n            });\n            countLink.toBack();\n      \n            if (collapsed) {\n              childCountGroup.show();\n              childCountText.show();\n              countLink.show();\n            }\n            else {\n              childCountGroup.hide();\n              childCountText.hide();\n              countLink.hide();\n            }\n            clickCircleY += 16;\n          }\n      \n          // 增加子节点 icon\t\n          const addChildIcon = group.addShape('marker', {\n            attrs: {\n              x: 0,\n              y: clickCircleY,\n              r: 6,\n              symbol: G6.Marker.expand,\n              stroke: '#999',\n              fill: '#fff',\n              lineWidth: 1,\n              cursor: 'pointer'\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'add-child-icon',\n          });\n      \n          addChildIcon.hide();\n          // 连接增加子节点 icon 的线段\t\n          const addChildLink = group.addShape('path', {\n            attrs: {\n              path: [['M', 0, clickCircleY - 10], ['L', 0, clickCircleY]],\n              stroke: model.branchColor,\n              lineWidth: 2,\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'add-child-link'\n          });\n          addChildLink.toBack();\n          addChildLink.hide();\n      \n          const bbox = keyShape.getBBox();\n          const backContainer = group.addShape('path', {\n            attrs: {\n              path: hasChildren ? [\n                ['M', bbox.minX, bbox.minY],\n                ['L', bbox.maxX, bbox.minY],\n                ['L', bbox.maxX, bbox.maxY],\n                ['L', 10, bbox.maxY],\n                ['L', 10, bbox.maxY + 28],\n                ['L', -10, bbox.maxY + 28],\n                ['L', -10, bbox.maxY],\n                ['L', bbox.minX, bbox.maxY],\n                ['Z']\n              ] : [\n                ['M', bbox.minX, bbox.minY],\n                ['L', bbox.maxX, bbox.minY],\n                ['L', bbox.maxX, bbox.maxY],\n                ['L', 10, bbox.maxY],\n                ['L', 10, bbox.maxY + 14],\n                ['L', -10, bbox.maxY + 14],\n                ['L', -10, bbox.maxY],\n                ['L', bbox.minX, bbox.maxY],\n                ['Z']\n              ],\n              fill: '#fff',\n              opacity: 0\n            },\n            draggable: true\n          })\n          backContainer.toBack();\n          return keyShape;\n        },\n        getAnchorPoints() {\n          return [\n            [0.5, 1],\n          ];\n        },\n        update: undefined,\n        setState(name, value, node) {\n          if (name === 'closest') {\n            const keyShape = node.getKeyShape();\n            if (value) keyShape.attr('lineWidth', 2);\n            else if (!node.getModel().selected) keyShape.attr('lineWidth', 1);\n          }\n        }\n      });\n      \n      G6.registerNode('indentedNode', {\n        addChildCount(group, tag, props) {\n          const { collapsed, branchColor, count } = props;\n          let clickCircleY = 10;\n          // 子类数量 icon，绘制圆点在节点正下方\n          if (tag) {\n            const childCountGroup = group.addGroup({\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-group'\n            });\n            childCountGroup.setMatrix([1, 0, 0, 0, 1, 0, 0, clickCircleY, 1])\n            const countBackWidth = collapsed ? 26 : 12;\n            childCountGroup.addShape('rect', {\n              attrs: {\n                width: countBackWidth,\n                height: 12,\n                radius: 6,\n                stroke: branchColor,\n                lineWidth: 2,\n                fill: collapsed ? branchColor : '#fff',\n                x: -countBackWidth / 2,\n                y: -6,\n                cursor: 'pointer',\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-rect-shape',\n            });\n            const childCountText = childCountGroup.addShape('text', {\n              attrs: {\n                text: count,\n                fill: '#fff',\n                x: 0,\n                y: 0,\n                fontSize: 12,\n                textAlign: 'center',\n                textBaseline: 'middle',\n                cursor: 'pointer',\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-text-shape',\n            });\n            const childHoverIcon = childCountGroup.addShape('path', {\n              attrs: {\n                stroke: '#fff',\n                lineWidth: 1,\n                cursor: 'pointer',\n                path: [['M', -3, 2], ['L', 0, -2], ['L', 3, 2]]\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'child-count-expand-icon',\n              capture: false\n            });\n            childHoverIcon.hide();\n      \n            // 连接 count 的线段\n            const countLink = group.addShape('path', {\n              attrs: {\n                path: [['M', 0, 0], ['L', 0, 11]],\n                stroke: branchColor,\n                lineWidth: 2,\n              },\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n              name: 'count-link'\n            });\n            countLink.toBack();\n      \n            if (collapsed) {\n              childCountGroup.show();\n              childCountText.show();\n              countLink.show();\n            }\n            else {\n              childCountGroup.hide();\n              childCountText.hide();\n              countLink.hide();\n            }\n      \n            clickCircleY += 16;\n          }\n      \n          // 增加子节点 icon\n          const addChildIcon = group.addShape('marker', {\n            attrs: {\n              x: 0,\n              y: clickCircleY,\n              r: 6,\n              symbol: G6.Marker.expand,\n              stroke: '#999',\n              fill: '#fff',\n              lineWidth: 1,\n              cursor: 'pointer'\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'add-child-icon',\n          });\n          addChildIcon.hide();\n      \n          // 连接增加子节点 icon 的线段\n          const addChildLink = group.addShape('path', {\n            attrs: {\n              path: [['M', 0, clickCircleY - 10], ['L', 0, clickCircleY]],\n              stroke: branchColor,\n              lineWidth: 2,\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'add-child-link'\n          });\n          addChildLink.toBack();\n          addChildLink.hide();\n        },\n        addHoverBack(group, props) {\n          const { mainX, mainY, width, height, fill } = props\n          group.addShape('rect', {\n            attrs: {\n              x: mainX,\n              y: mainY,\n              width,\n              height,\n              radius: 11,\n              fill,\n              cursor: 'pointer'\n            },\n            // capture: false,\n              // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'main-shape',\n            draggable: true\n          });\n        },\n        addName(group, props) {\n          const { label, x = 0, y, fill } = props;\n          return group.addShape('text', {\n            attrs: {\n              text: label,\n              x,\n              y,\n              textAlign: 'start',\n              textBaseline: 'top',\n              fill,\n              fontSize: 14,\n              fontFamily: 'PingFangSC-Regular',\n              cursor: 'pointer',\n            },\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'not-root-text-shape',\n            draggable: true\n          });\n        },\n        draw(model, group) {\n          const { collapsed, selected, depth, label } = model;\n          // 是否为根节点\n          const rootNode = depth === 0;\n          // 子节点数量\n          const childCount = model.children?.length || 0;\n      \n          const {\n            itemPadding,\n            nameMarginLeft,\n          } = BaseConfig;\n      \n          let width = 0;\n          const height = 24;\n          // let x = -width / 2;\n          const x = 0;\n          const y = -height / 2;\n          const borderRadius = 4;\n          // 名称文本\n          const text = this.addName(group, { label, x, y });\n      \n          let textWidth = text.getBBox().width;\n          width = textWidth + itemPadding + nameMarginLeft;\n      \n          const keyShapeAttrs = {\n            x,\n            y,\n            width,\n            height,\n            radius: borderRadius,\n            fill: undefined,\n            stroke: undefined,\n          };\n      \n          const keyShape = group.addShape('rect', {\n            attrs: keyShapeAttrs,\n            // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n            name: 'root-key-shape-rect-shape',\n          });\n      \n          // 底部横线\n          // const branchThick = model.depth <= 2 ? 3 : model.depth <= 4 ? 2 : 1;\n          const bottomLine = this.addBottomLine(group, false, {\n            stroke: model.branchColor || '#AAB7C4',\n            lineWidth: 3, // model.lineWidth || branchThick || 1,\n            x,\n            width\n          });\n      \n          const mainX = x - 6;\n          const mainY = -height - 6;\n      \n          // hover背景\n          this.addHoverBack(group, {\n            fill: selected ? MainStyle.background.hover : MainStyle.background.default,\n            height,\n            width,\n            mainX,\n            mainY,\n          });\n      \n          let nameColor = NameStyle.color.default;\n          if (selected) {\n            nameColor = NameStyle.color.hover;\n          }\n      \n          // 名称\n          text.attr({\n            y: y - 12,\n            fill: nameColor\n          });\n          text.toFront();\n          textWidth = text.getBBox().width;\n      \n          if (bottomLine) bottomLine.toFront();\n      \n          this.addChildCount(group, childCount && !rootNode, {\n            collapsed,\n            branchColor: model.branchColor,\n            count: childCount ? `${childCount}` : undefined,\n          });\n      \n          const bbox = group.getBBox();\n          const backContainer = group.addShape('path', {\n            attrs: {\n              path: childCount ? [\n                ['M', bbox.minX, bbox.minY],\n                ['L', bbox.maxX, bbox.minY],\n                ['L', bbox.maxX, bbox.maxY],\n                ['L', bbox.minX + 20, bbox.maxY],\n                ['L', bbox.minX + 20, bbox.maxY + 20],\n                ['L', bbox.minX, bbox.maxY + 20],\n                ['Z']\n              ] : [\n                ['M', bbox.minX, bbox.minY],\n                ['L', bbox.maxX, bbox.minY],\n                ['L', bbox.maxX, bbox.maxY],\n                ['L', bbox.minX, bbox.maxY],\n                ['Z']\n              ],\n              fill: '#fff',\n              opacity: 0\n            },\n            draggable: true\n          })\n          backContainer.toBack();\n          return keyShape;\n        },\n        setState(name, value, node) {\n          if (name === 'closest' || name === 'selected') {\n            const group = node.getContainer();\n            const textShape = group.find(child => child.get('name') === 'not-root-text-shape');\n            const mainShape = group.find(child => child.get('name') === 'main-shape');\n            if (value) {\n              if (textShape) {\n                textShape.attr('fill', NameStyle.color.hover);\n              }\n              if (mainShape) {\n                mainShape.attr('fill', MainStyle.background.hover);\n              }\n            } else {\n              const selected = node.hasState('selected');\n              if (selected) {\n                if (textShape) {\n                  textShape.attr('fill', NameStyle.color.selected);\n                }\n                if (mainShape) {\n                  mainShape.attr('fill', MainStyle.background.default);\n                }\n              } else {\n                if (textShape) {\n                  textShape.attr('fill', NameStyle.color.default);\n                }\n                if (mainShape) {\n                  mainShape.attr('fill', MainStyle.background.default);\n                }\n              }\n            }\n          }\n        }\n      }, 'treeNode');\n      \n      G6.registerEdge('indentedEdge', {\n        afterDraw: (cfg, group) => {\n          const sourceNode = cfg.sourceNode?.getModel();\n          const targetNode = cfg.targetNode?.getModel();\n          const color = sourceNode.branchColor || targetNode.branchColor || cfg.color || '#000';\n          // const branchThick = sourceNode.depth <= 1 ? 3 : sourceNode.depth <= 3 ? 2 : 1;\n          const keyShape = group.get('children')[0];\n          keyShape.attr({\n            stroke: color,\n            lineWidth: 3 // branchThick\n          });\n          group.toBack();\n        },\n        getControlPoints: (cfg) => {\n          const startPoint = cfg.startPoint;\n          const endPoint = cfg.endPoint;\n          return [\n            startPoint,\n            {\n              x: startPoint.x,\n              y: endPoint.y,\n            },\n            endPoint,\n          ];\n        },\n        update: undefined\n      }, 'polyline');\n      \n      const dataTransform = (data) => {\n        const changeData = (d, level = 0, color) => {\n          const data = {\n            ...d,\n          };\n          data.type = level === 0 ? 'indentedRoot' : 'indentedNode';\n          data.hover = false;\n      \n          if (color) {\n            data.color = color;\n          }\n      \n          if (level === 1 && !d.direction) {\n            if (!d.direction) {\n              data.direction = d.id.charCodeAt(d.id.length - 1) % 2 === 0 ? 'right' : 'left';\n            }\n          }\n      \n          if (d.children) {\n            data.children = d.children.map((child) => changeData(child, level + 1, data.color));\n          }\n          // 给定 branchColor 和 0-2 层节点 depth\n          if (data.children?.length) {\n            data.depth = 0;\n            data.children.forEach((subtree, i) => {\n              subtree.branchColor = COLORS[i % COLORS.length];\n              // dfs\n              let currentDepth = 1;\n              subtree.depth = currentDepth;\n              Util.traverseTree(subtree, child => {\n                child.branchColor = COLORS[i % COLORS.length];\n      \n                if (!child.depth) {\n                  child.depth = currentDepth + 1;\n                }\n                else currentDepth = subtree.depth;\n                if (child.children) {\n                  child.children.forEach(subChild => {\n                    subChild.depth = child.depth + 1;\n                  })\n                }\n                // 把没有 children 但有 schemaType.subTypeCount 的节点设置为 collapsed\n                // 说明展开需要增量请求 children，未请求前展示 collapsed 状态\n                if (!child.children?.length && child.schemaType?.subTypeCount) {\n                  child.collapsed = true;\n                }\n                return true;\n              })\n            });\n          }\n      \n          return data;\n        };\n        return changeData(data);\n      };\n      \n      const tree = new G6.TreeGraph({\n        container: dom,\n        width: 340,\n        height: 2000,\n        layout: {\n          type: 'indented',\n          direction: 'LR',\n          isHorizontal: true,\n          indent: 30,\n          getHeight: (d) => {\n            if (d.isRoot) {\n              return 30;\n            }\n            if (d.collapsed && d.children?.length) {\n              return 36;\n            }\n            return 22;\n          },\n          getVGap: () => {\n            return 10;\n          },\n        },\n        defaultEdge: {\n          type: 'indentedEdge',\n          style: {\n            lineWidth: 2,\n            radius: 16,\n          },\n        },\n        nodeStateStyles: {\n          closest: {\n            fill: '#f00',\n            'node-label': {\n              fill: '#f00',\n            }\n          },\n        },\n        minZoom: 0.5,\n        modes: {\n          default: [\n            'drag-canvas',\n            'wheel-scroll',\n            'hover-node',\n            'click-node',\n            'drag-branch',\n            {\n              type: 'collapse-expand',\n              trigger: 'click'\n            }\n          ],\n        },\n      });\n      \n      tree.on('afterrender', e => {\n        tree.getEdges().forEach(edge => {\n          const targetNode = edge.getTarget().getModel();\n          const color = targetNode.branchColor;\n          tree.updateItem(edge, { color });\n        });\n        setTimeout(() => {\n          tree.moveTo(32, 32);\n          tree.zoomTo(0.7)\n        }, 16);\n      });\n      \n      tree.data(dataTransform(data));\n      \n      tree.render();\n      \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}