{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"contentRef\"\n};\nconst _hoisted_2 = {\n  ref: \"tableContentRef\"\n};\nconst _hoisted_3 = {\n  ref: \"theadRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_table = _resolveComponent(\"a-table\");\n  return _openBlock(), _createElementBlock(\"main\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_a_table, {\n    columns: $setup.props.tableProps.columns,\n    data: $setup.props.tableProps.dataSource,\n    loading: $setup.props.tableProps.loading,\n    pagination: $setup.props.tableProps.pagination\n  }, {\n    thead: _withCtx(() => [_createElementVNode(\"thead\", _hoisted_3, null, 512 /* NEED_PATCH */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"columns\", \"data\", \"loading\", \"pagination\"])], 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;EACUA,GAAG,EAAC;AAAY;;EACXA,GAAG,EAAC;AAAiB;;EAQTA,GAAG,EAAC;AAAU;;;uBATrCC,oBAaS,QAbTC,UAaS,GAZHC,oBAWM,OAXNC,UAWM,GAVJC,aASUC;IARLC,OAAO,EAAEC,YAAK,CAACC,UAAU,CAACF,OAAO;IACjCG,IAAI,EAAEF,YAAK,CAACC,UAAU,CAACE,UAAU;IACjCC,OAAO,EAAEJ,YAAK,CAACC,UAAU,CAACG,OAAO;IACjCC,UAAU,EAAEL,YAAK,CAACC,UAAU,CAACI;;IAEnBC,KAAK,WACZ,MAA8B,CAA9BX,oBAA8B,SAA9BY,UAA8B","names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_a_table","columns","$setup","tableProps","data","dataSource","loading","pagination","thead","_hoisted_3"],"sourceRoot":"","sources":["/Users/lijiaxin/Documents/workspace/hydsoft-oms-frontend/src/views/demo/tableHeadTop.vue"],"sourcesContent":["<template>\n    <main ref='contentRef'>\n          <div ref='tableContentRef'>\n            <a-table \n                :columns=\"props.tableProps.columns\"  \n                :data=\"props.tableProps.dataSource\"  \n                :loading=\"props.tableProps.loading\"\n                :pagination=\"props.tableProps.pagination\" \n            >\n                <template #thead>\n                    <thead ref=\"theadRef\"></thead>\n                </template>\n            </a-table>\n          </div>\n      </main>\n  </template>\n  \n  \n  <script setup>\n  import { ref,reactive,onMounted,onBeforeUnmount, nextTick,defineExpose } from 'vue';\n  import { getCurrentInstance } from \"@vue/runtime-core\";\n  let $bus = getCurrentInstance().appContext.config.globalProperties.$bus;\n  const props = defineProps({\n    tableProps : {\n        type : Object,\n        required : true\n    },\n    scrollEvtName : {\n        type : String,\n        required : true\n    },\n    rootDom : {\n        type : String,\n        required : true\n    }\n  })\n  const theadRef = ref(null)\n  let headsWidth = []\n  const contentRef = ref(null)\n  let isFirstCreate = true\n  const tableContentRef = ref(null)\n  let rootEl = null\n  onMounted(()=>{\n    computedThWidth()\n    rootEl = document.querySelector(props.rootDom) \n    if(rootEl)rootEl.scrollTop = 0\n    let scrollContainerElTop\n    nextTick(()=>{\n        let getELContainerDOMRect = rootEl.getBoundingClientRect()\n        scrollContainerElTop = parseFloat(getELContainerDOMRect.top)\n    })\n    $bus.on(props.scrollEvtName,(obj)=>{\n        let domDOMRect = tableContentRef.value.getBoundingClientRect()\n        let domTop = parseFloat(domDOMRect.top)\n        let domBottom = parseFloat(domDOMRect.bottom)\n        scrollFn(obj.scrollTop,obj.direction,domTop,scrollContainerElTop ,domBottom)\n    })\n  })\n\n  function computedThWidth(){\n    theadRef.value.querySelectorAll('tr th').forEach(el=>{\n        let style = getComputedStyle(el)\n        headsWidth.push(el.offsetWidth)\n    })\n  }\n  let creatHeaderContainer\n  let isFirstInsert = true\n  let initialDomScrollTop = 0\n  function scrollFn( scrollTop,direction,domTop,domContainerTop,domBottom ){\n    if(direction === 'down'){\n        if(isFirstCreate){\n            let tableHeadEl =theadRef.value\n            let cloneTableHeadEl = tableHeadEl.cloneNode(true)\n                cloneTableHeadEl.querySelectorAll('tr th').forEach((el,i)=>{\n                el.style.width =  headsWidth[i] + 'px'\n                el.style.display = 'inline-block'\n            })\n            creatHeaderContainer= document.createElement('div')\n            let div1 = document.createElement('div')\n        \n            creatHeaderContainer.style.width = contentRef.value.offsetWidth + 'px'\n            creatHeaderContainer.className = '_tableHeadTopContainer '\n            div1.className = '_tableHeadTopContent'\n            creatHeaderContainer.appendChild(div1)\n            \n            div1.appendChild(cloneTableHeadEl)\n            isFirstCreate = false\n        }\n        function scrollEvtFn(e){\n            creatHeaderContainer.scrollLeft = e.target.scrollLeft\n            creatHeaderContainer.parentNode.scrollLeft = e.target.scrollLeft\n        }\n        \n        if( (domTop <= domContainerTop) && isFirstInsert){\n            let tableHeadEl =theadRef.value\n            creatHeaderContainer.style.top = domTop-11+'px'\n            initialDomScrollTop = scrollTop\n            tableHeadEl.parentNode.parentNode.insertBefore(creatHeaderContainer,tableHeadEl.parentNode.parentNode.firstElementChild)\n            creatHeaderContainer.scrollLeft = creatHeaderContainer.parentNode.scrollLeft\n            creatHeaderContainer.addEventListener('scroll',scrollEvtFn)\n            creatHeaderContainer.parentNode.addEventListener('scroll',scrollEvtFn)\n            isFirstInsert = false\n        }\n        if(!isFirstCreate && (domTop <= domContainerTop)){\n            let tableHeadEl =theadRef.value\n            creatHeaderContainer.scrollLeft = tableHeadEl.parentNode.parentNode.scrollLeft\n            creatHeaderContainer.style.display = 'block'\n            creatHeaderContainer.style.top = domContainerTop  + 'px'\n        }\n        if( (domBottom <= domContainerTop) && creatHeaderContainer ){\n            creatHeaderContainer.style.display = 'none'\n        }\n    }\n    if(direction === 'up' && creatHeaderContainer){\n        if(domBottom >= domContainerTop){\n            creatHeaderContainer.style.display = 'block'\n        }\n        if(domTop >= domContainerTop){\n            creatHeaderContainer.style.top = domTop + 'px'\n        }\n        if(scrollTop <= initialDomScrollTop){\n            creatHeaderContainer.style.display = 'none'\n        }\n    }\n  }\n  defineExpose({\n    computedThWidth\n  })\n  onBeforeUnmount(()=>{\n    $bus.off(props.scrollEvtName)\n  })\n  </script>\n  \n  <style lang=\"scss\">\n._tableHeadTopContainer  {\n    position : fixed;\n    z-index : 100 ;\n    overflow-x : auto;\n}\n._tableHeadTopContainer  {\n  &::-webkit-scrollbar {\n    height: 0;\n  }\n}\n._tableHeadTopContent {\n    width : max-content;\n}\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}