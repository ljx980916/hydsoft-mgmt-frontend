{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ForceAtlas2Layout = void 0;\nvar base_1 = require(\"../base\");\nvar util_1 = require(\"../../util\");\nvar body_1 = __importDefault(require(\"./body\"));\nvar quad_1 = __importDefault(require(\"./quad\"));\nvar quadTree_1 = __importDefault(require(\"./quadTree\"));\nvar ForceAtlas2Layout = /** @class */function (_super) {\n  __extends(ForceAtlas2Layout, _super);\n  function ForceAtlas2Layout(options) {\n    var _this = _super.call(this) || this;\n    /** 布局中心 */\n    _this.center = [0, 0];\n    /** 宽度 */\n    _this.width = 300;\n    /** 高度 */\n    _this.height = 300;\n    _this.nodes = [];\n    _this.edges = [];\n    /**\n     * the parameter for repulsive forces,\n     * it will scale the layout but won't change the layout\n     * larger the kr, looser the layout\n     * @type  {number}\n     */\n    _this.kr = 5;\n    /**\n     * the parameter for gravity forces\n     * @type  {number}\n     */\n    _this.kg = 1;\n    /**\n     * modes:\n     * 'normal' for normal using\n     * 'linlog' for compact clusters.\n     * @type  {string}\n     */\n    _this.mode = 'normal';\n    /**\n     * whether preventing the node overlapping\n     * @type  {boolean}\n     */\n    _this.preventOverlap = false;\n    /**\n     * whether active the dissuade hub mode\n     * true: grant authorities (nodes with a high indegree)\n     * a more central position than hubs (nodes with a high outdegree)\n     * @type  {boolean}\n     */\n    _this.dissuadeHubs = false;\n    /**\n     * whether active the barnes hut optimization on computing repulsive forces\n     * @type  {boolean}\n     */\n    _this.barnesHut = undefined;\n    /**\n     * the max iteration number\n     * @type  {number}\n     */\n    _this.maxIteration = 0;\n    /**\n     * control the global velocity\n     * defualt: 0.1(gephi)\n     * @type  {number}\n     */\n    _this.ks = 0.1;\n    /**\n     * the max global velocity\n     * @type  {number}\n     */\n    _this.ksmax = 10;\n    /**\n     * the tolerance for the global swinging\n     * @type  {number}\n     */\n    _this.tao = 0.1;\n    /**\n     * the function of layout complete listener, display the legend and minimap after layout\n     * @type  {function}\n     */\n    _this.onLayoutEnd = function () {};\n    /**\n     * activate prune or not.\n     * prune the leaves during most iterations, layout the leaves in the last 50 iteraitons.\n     * if prune === '', it will be activated when the nodes number > 100\n     * note that it will reduce the quality of the layout\n     * @type  {boolean}\n     */\n    _this.prune = undefined;\n    _this.updateCfg(options);\n    return _this;\n  }\n  ForceAtlas2Layout.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  // execute the layout\n  ForceAtlas2Layout.prototype.execute = function () {\n    var self = this;\n    var nodes = self.nodes,\n      onLayoutEnd = self.onLayoutEnd,\n      prune = self.prune;\n    var maxIteration = self.maxIteration;\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n    // the whidth of each nodes\n    var sizes = [];\n    var nodeNum = nodes.length;\n    for (var i = 0; i < nodeNum; i += 1) {\n      var node = nodes[i];\n      var nodeWidth = 10;\n      var nodeHeight = 10;\n      if ((0, util_1.isNumber)(node.size)) {\n        nodeWidth = node.size;\n        nodeHeight = node.size;\n      }\n      if ((0, util_1.isArray)(node.size)) {\n        if (!isNaN(node.size[0])) nodeWidth = node.size[0];\n        if (!isNaN(node.size[1])) nodeHeight = node.size[1];\n      } else if ((0, util_1.isObject)(node.size)) {\n        nodeWidth = node.size.width;\n        nodeHeight = node.size.height;\n      }\n      if (self.getWidth && !isNaN(self.getWidth(node))) nodeHeight = self.getWidth(node);\n      if (self.getHeight && !isNaN(self.getHeight(node))) nodeWidth = self.getHeight(node);\n      var maxSize = Math.max(nodeWidth, nodeHeight);\n      sizes.push(maxSize);\n    }\n    if (self.barnesHut === undefined && nodeNum > 250) self.barnesHut = true;\n    if (self.prune === undefined && nodeNum > 100) self.prune = true;\n    if (this.maxIteration === 0 && !self.prune) {\n      maxIteration = 250;\n      if (nodeNum <= 200 && nodeNum > 100) maxIteration = 1000;else if (nodeNum > 200) maxIteration = 1200;\n      this.maxIteration = maxIteration;\n    } else if (this.maxIteration === 0 && prune) {\n      maxIteration = 100;\n      if (nodeNum <= 200 && nodeNum > 100) maxIteration = 500;else if (nodeNum > 200) maxIteration = 950;\n      this.maxIteration = maxIteration;\n    }\n    if (!self.kr) {\n      self.kr = 50;\n      if (nodeNum > 100 && nodeNum <= 500) self.kr = 20;else if (nodeNum > 500) self.kr = 1;\n    }\n    if (!self.kg) {\n      self.kg = 20;\n      if (nodeNum > 100 && nodeNum <= 500) self.kg = 10;else if (nodeNum > 500) self.kg = 1;\n    }\n    this.nodes = self.updateNodesByForces(sizes);\n    onLayoutEnd();\n  };\n  ForceAtlas2Layout.prototype.updateNodesByForces = function (sizes) {\n    var self = this;\n    var edges = self.edges,\n      maxIteration = self.maxIteration;\n    var nodes = self.nodes;\n    var nonLoopEdges = edges.filter(function (edge) {\n      var source = (0, util_1.getEdgeTerminal)(edge, 'source');\n      var target = (0, util_1.getEdgeTerminal)(edge, 'target');\n      return source !== target;\n    });\n    var size = nodes.length;\n    var esize = nonLoopEdges.length;\n    var degrees = [];\n    var idMap = {};\n    var edgeEndsIdMap = {};\n    // tslint:disable-next-line\n    var Es = [];\n    for (var i = 0; i < size; i += 1) {\n      idMap[nodes[i].id] = i;\n      degrees[i] = 0;\n      if (nodes[i].x === undefined || isNaN(nodes[i].x)) {\n        nodes[i].x = Math.random() * 1000;\n      }\n      if (nodes[i].y === undefined || isNaN(nodes[i].y)) {\n        nodes[i].y = Math.random() * 1000;\n      }\n      Es.push({\n        x: nodes[i].x,\n        y: nodes[i].y\n      });\n    }\n    for (var i = 0; i < esize; i += 1) {\n      var node1 = void 0;\n      var node2 = void 0;\n      var sIdx = 0;\n      var tIdx = 0;\n      for (var j = 0; j < size; j += 1) {\n        var source = (0, util_1.getEdgeTerminal)(nonLoopEdges[i], 'source');\n        var target = (0, util_1.getEdgeTerminal)(nonLoopEdges[i], 'target');\n        if (nodes[j].id === source) {\n          node1 = nodes[j];\n          sIdx = j;\n        } else if (nodes[j].id === target) {\n          node2 = nodes[j];\n          tIdx = j;\n        }\n        edgeEndsIdMap[i] = {\n          sourceIdx: sIdx,\n          targetIdx: tIdx\n        };\n      }\n      if (node1) degrees[idMap[node1.id]] += 1;\n      if (node2) degrees[idMap[node2.id]] += 1;\n    }\n    var iteration = maxIteration;\n    nodes = this.iterate(iteration, idMap, edgeEndsIdMap, esize, degrees, sizes);\n    // if prune, place the leaves around their parents, and then re-layout for several iterations.\n    if (self.prune) {\n      for (var j = 0; j < esize; j += 1) {\n        if (degrees[edgeEndsIdMap[j].sourceIdx] <= 1) {\n          nodes[edgeEndsIdMap[j].sourceIdx].x = nodes[edgeEndsIdMap[j].targetIdx].x;\n          nodes[edgeEndsIdMap[j].sourceIdx].y = nodes[edgeEndsIdMap[j].targetIdx].y;\n        } else if (degrees[edgeEndsIdMap[j].targetIdx] <= 1) {\n          nodes[edgeEndsIdMap[j].targetIdx].x = nodes[edgeEndsIdMap[j].sourceIdx].x;\n          nodes[edgeEndsIdMap[j].targetIdx].y = nodes[edgeEndsIdMap[j].sourceIdx].y;\n        }\n      }\n      self.prune = false;\n      self.barnesHut = false;\n      iteration = 100;\n      nodes = this.iterate(iteration, idMap, edgeEndsIdMap, esize, degrees, sizes);\n    }\n    return nodes;\n  };\n  ForceAtlas2Layout.prototype.iterate = function (iteration, idMap, edgeEndsIdMap, esize, degrees, sizes) {\n    var self = this;\n    var nodes = self.nodes;\n    var kr = self.kr,\n      preventOverlap = self.preventOverlap;\n    var barnesHut = self.barnesHut;\n    var nodeNum = nodes.length;\n    var sg = 0;\n    var krPrime = 100;\n    var iter = iteration;\n    var prevoIter = 50;\n    var forces = [];\n    var preForces = [];\n    var bodies = [];\n    for (var i = 0; i < nodeNum; i += 1) {\n      forces[2 * i] = 0;\n      forces[2 * i + 1] = 0;\n      if (barnesHut) {\n        var params = {\n          id: i,\n          rx: nodes[i].x,\n          ry: nodes[i].y,\n          mass: 1,\n          g: kr,\n          degree: degrees[i]\n        };\n        bodies[i] = new body_1.default(params);\n      }\n    }\n    while (iter > 0) {\n      for (var i = 0; i < nodeNum; i += 1) {\n        preForces[2 * i] = forces[2 * i];\n        preForces[2 * i + 1] = forces[2 * i + 1];\n        forces[2 * i] = 0;\n        forces[2 * i + 1] = 0;\n      }\n      // attractive forces, existing on every actual edge\n      forces = this.getAttrForces(iter, prevoIter, esize, idMap, edgeEndsIdMap, degrees, sizes, forces);\n      // repulsive forces and Gravity, existing on every node pair\n      // if preventOverlap, using the no-optimized method in the last prevoIter instead.\n      if (barnesHut && (preventOverlap && iter > prevoIter || !preventOverlap)) {\n        forces = this.getOptRepGraForces(forces, bodies, degrees);\n      } else {\n        forces = this.getRepGraForces(iter, prevoIter, forces, krPrime, sizes, degrees);\n      }\n      // update the positions\n      var res = this.updatePos(forces, preForces, sg, degrees);\n      nodes = res.nodes;\n      sg = res.sg;\n      iter--;\n      if (self.tick) self.tick();\n    }\n    return nodes;\n  };\n  ForceAtlas2Layout.prototype.getAttrForces = function (iter, prevoIter, esize, idMap, edgeEndsIdMap, degrees, sizes, forces) {\n    var self = this;\n    var nodes = self.nodes,\n      preventOverlap = self.preventOverlap,\n      dissuadeHubs = self.dissuadeHubs,\n      mode = self.mode,\n      prune = self.prune;\n    for (var i = 0; i < esize; i += 1) {\n      var sourceNode = nodes[edgeEndsIdMap[i].sourceIdx];\n      var sourceIdx = edgeEndsIdMap[i].sourceIdx;\n      var targetNode = nodes[edgeEndsIdMap[i].targetIdx];\n      var targetIdx = edgeEndsIdMap[i].targetIdx;\n      if (prune && (degrees[sourceIdx] <= 1 || degrees[targetIdx] <= 1)) continue;\n      var dir = [targetNode.x - sourceNode.x, targetNode.y - sourceNode.y];\n      var eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      if (preventOverlap && iter < prevoIter) eucliDis = eucliDis - sizes[sourceIdx] - sizes[targetIdx];\n      var Fa1 = eucliDis; // tslint:disable-line\n      var Fa2 = Fa1; // tslint:disable-line\n      if (mode === 'linlog') {\n        Fa1 = Math.log(1 + eucliDis);\n        Fa2 = Fa1;\n      }\n      if (dissuadeHubs) {\n        Fa1 = eucliDis / degrees[sourceIdx];\n        Fa2 = eucliDis / degrees[targetIdx];\n      }\n      if (preventOverlap && iter < prevoIter && eucliDis <= 0) {\n        Fa1 = 0;\n        Fa2 = 0;\n      } else if (preventOverlap && iter < prevoIter && eucliDis > 0) {\n        Fa1 = eucliDis;\n        Fa2 = eucliDis;\n      }\n      forces[2 * idMap[sourceNode.id]] += Fa1 * dir[0];\n      forces[2 * idMap[targetNode.id]] -= Fa2 * dir[0];\n      forces[2 * idMap[sourceNode.id] + 1] += Fa1 * dir[1];\n      forces[2 * idMap[targetNode.id] + 1] -= Fa2 * dir[1];\n    }\n    return forces;\n  };\n  ForceAtlas2Layout.prototype.getRepGraForces = function (iter, prevoIter, forces, krPrime, sizes, degrees) {\n    var self = this;\n    var nodes = self.nodes,\n      preventOverlap = self.preventOverlap,\n      kr = self.kr,\n      kg = self.kg,\n      center = self.center,\n      prune = self.prune;\n    var nodeNum = nodes.length;\n    for (var i = 0; i < nodeNum; i += 1) {\n      for (var j = i + 1; j < nodeNum; j += 1) {\n        if (prune && (degrees[i] <= 1 || degrees[j] <= 1)) continue;\n        var dir_1 = [nodes[j].x - nodes[i].x, nodes[j].y - nodes[i].y];\n        var eucliDis_1 = Math.hypot(dir_1[0], dir_1[1]);\n        eucliDis_1 = eucliDis_1 < 0.0001 ? 0.0001 : eucliDis_1;\n        dir_1[0] = dir_1[0] / eucliDis_1;\n        dir_1[1] = dir_1[1] / eucliDis_1;\n        if (preventOverlap && iter < prevoIter) eucliDis_1 = eucliDis_1 - sizes[i] - sizes[j];\n        var Fr = kr * (degrees[i] + 1) * (degrees[j] + 1) / eucliDis_1; // tslint:disable-line\n        if (preventOverlap && iter < prevoIter && eucliDis_1 < 0) {\n          Fr = krPrime * (degrees[i] + 1) * (degrees[j] + 1);\n        } else if (preventOverlap && iter < prevoIter && eucliDis_1 === 0) {\n          Fr = 0;\n        } else if (preventOverlap && iter < prevoIter && eucliDis_1 > 0) {\n          Fr = kr * (degrees[i] + 1) * (degrees[j] + 1) / eucliDis_1;\n        }\n        forces[2 * i] -= Fr * dir_1[0];\n        forces[2 * j] += Fr * dir_1[0];\n        forces[2 * i + 1] -= Fr * dir_1[1];\n        forces[2 * j + 1] += Fr * dir_1[1];\n      }\n      // gravity\n      var dir = [nodes[i].x - center[0], nodes[i].y - center[1]];\n      var eucliDis = Math.hypot(dir[0], dir[1]);\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      var Fg = kg * (degrees[i] + 1); // tslint:disable-line\n      forces[2 * i] -= Fg * dir[0];\n      forces[2 * i + 1] -= Fg * dir[1];\n    }\n    return forces;\n  };\n  ForceAtlas2Layout.prototype.getOptRepGraForces = function (forces, bodies, degrees) {\n    var self = this;\n    var nodes = self.nodes,\n      kg = self.kg,\n      center = self.center,\n      prune = self.prune;\n    var nodeNum = nodes.length;\n    var minx = 9e10;\n    var maxx = -9e10;\n    var miny = 9e10;\n    var maxy = -9e10;\n    for (var i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      bodies[i].setPos(nodes[i].x, nodes[i].y);\n      if (nodes[i].x >= maxx) maxx = nodes[i].x;\n      if (nodes[i].x <= minx) minx = nodes[i].x;\n      if (nodes[i].y >= maxy) maxy = nodes[i].y;\n      if (nodes[i].y <= miny) miny = nodes[i].y;\n    }\n    var width = Math.max(maxx - minx, maxy - miny);\n    var quadParams = {\n      xmid: (maxx + minx) / 2,\n      ymid: (maxy + miny) / 2,\n      length: width,\n      massCenter: center,\n      mass: nodeNum\n    };\n    var quad = new quad_1.default(quadParams);\n    var quadTree = new quadTree_1.default(quad);\n    // build the tree, insert the nodes(quads) into the tree\n    for (var i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      if (bodies[i].in(quad)) quadTree.insert(bodies[i]);\n    }\n    // update the repulsive forces and the gravity.\n    for (var i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      bodies[i].resetForce();\n      quadTree.updateForce(bodies[i]);\n      forces[2 * i] -= bodies[i].fx;\n      forces[2 * i + 1] -= bodies[i].fy;\n      // gravity\n      var dir = [nodes[i].x - center[0], nodes[i].y - center[1]];\n      var eucliDis = Math.hypot(dir[0], dir[1]);\n      eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n      dir[0] = dir[0] / eucliDis;\n      dir[1] = dir[1] / eucliDis;\n      var Fg = kg * (degrees[i] + 1); // tslint:disable-line\n      forces[2 * i] -= Fg * dir[0];\n      forces[2 * i + 1] -= Fg * dir[1];\n    }\n    return forces;\n  };\n  ForceAtlas2Layout.prototype.updatePos = function (forces, preForces, sg, degrees) {\n    var self = this;\n    var nodes = self.nodes,\n      ks = self.ks,\n      tao = self.tao,\n      prune = self.prune,\n      ksmax = self.ksmax;\n    var nodeNum = nodes.length;\n    var swgns = [];\n    var trans = [];\n    // swg(G) and tra(G)\n    var swgG = 0;\n    var traG = 0;\n    for (var i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      var minus = [forces[2 * i] - preForces[2 * i], forces[2 * i + 1] - preForces[2 * i + 1]];\n      var minusNorm = Math.hypot(minus[0], minus[1]);\n      var add = [forces[2 * i] + preForces[2 * i], forces[2 * i + 1] + preForces[2 * i + 1]];\n      var addNorm = Math.hypot(add[0], add[1]);\n      swgns[i] = minusNorm;\n      trans[i] = addNorm / 2;\n      swgG += (degrees[i] + 1) * swgns[i];\n      traG += (degrees[i] + 1) * trans[i];\n    }\n    var preSG = sg;\n    sg = tao * traG / swgG; // tslint:disable-line\n    if (preSG !== 0) {\n      sg = sg > 1.5 * preSG ? 1.5 * preSG : sg; // tslint:disable-line\n    }\n    // update the node positions\n    for (var i = 0; i < nodeNum; i += 1) {\n      if (prune && degrees[i] <= 1) continue;\n      if ((0, util_1.isNumber)(nodes[i].fx) && (0, util_1.isNumber)(nodes[i].fy)) continue;\n      var sn = ks * sg / (1 + sg * Math.sqrt(swgns[i]));\n      var absForce = Math.hypot(forces[2 * i], forces[2 * i + 1]);\n      absForce = absForce < 0.0001 ? 0.0001 : absForce;\n      var max = ksmax / absForce;\n      sn = sn > max ? max : sn;\n      var dnx = sn * forces[2 * i];\n      var dny = sn * forces[2 * i + 1];\n      nodes[i].x += dnx;\n      nodes[i].y += dny;\n    }\n    return {\n      nodes: nodes,\n      sg: sg\n    };\n  };\n  return ForceAtlas2Layout;\n}(base_1.Base);\nexports.ForceAtlas2Layout = ForceAtlas2Layout;","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","undefined","updateCfg","ForceAtlas2Layout","self","onLayoutEnd","prune","maxIteration","width","window","innerWidth","height","innerHeight","sizes","nodeNum","nodes","length","i","node","nodeWidth","nodeHeight","size","isNaN","getWidth","getHeight","maxSize","Math","max","push","barnesHut","kr","kg","updateNodesByForces","nonLoopEdges","edges","filter","edge","source","target","esize","degrees","idMap","edgeEndsIdMap","Es","id","x","random","y","node1","node2","sIdx","tIdx","j","sourceIdx","targetIdx","iteration","iterate","preventOverlap","sg","krPrime","iter","prevoIter","forces","preForces","bodies","params","rx","ry","mass","g","degree","body_1","getAttrForces","getOptRepGraForces","getRepGraForces","res","updatePos","tick","dissuadeHubs","mode","sourceNode","targetNode","dir","eucliDis","hypot","Fa1","Fa2","log","center","dir_1","eucliDis_1","Fr","Fg","minx","maxx","miny","maxy","setPos","quadParams","xmid","ymid","massCenter","quad","quad_1","quadTree","quadTree_1","in","insert","resetForce","updateForce","fx","fy","ks","tao","ksmax","swgns","trans","swgG","traG","minus","minusNorm","add","addNorm","preSG","sn","sqrt","absForce","dnx","dny","base_1","exports"],"sourceRoot":"","sources":["../../../src/layout/forceAtlas2/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}