{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.minBy = exports.notime = exports.time = exports.partition = exports.maxRank = exports.addBorderNode = exports.removeEmptyRanks = exports.normalizeRanks = exports.buildLayerMatrix = exports.intersectRect = exports.predecessorWeights = exports.successorWeights = exports.zipObject = exports.asNonCompoundGraph = exports.simplify = exports.addDummyNode = void 0;\nvar util_1 = require(\"../../../util\");\nvar graph_1 = require(\"../graph\");\nvar safeSort = function (valueA, valueB) {\n  return Number(valueA) - Number(valueB);\n};\n/*\n * Adds a dummy node to the graph and return v.\n */\nvar addDummyNode = function (g, type, attrs, name) {\n  var v;\n  do {\n    v = \"\".concat(name).concat(Math.random());\n  } while (g.hasNode(v));\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n};\nexports.addDummyNode = addDummyNode;\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nvar simplify = function (g) {\n  var simplified = new graph_1.Graph().setGraph(g.graph());\n  g.nodes().forEach(function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  g.edges().forEach(function (e) {\n    var simpleLabel = simplified.edgeFromArgs(e.v, e.w) || {\n      weight: 0,\n      minlen: 1\n    };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n};\nexports.simplify = simplify;\nvar asNonCompoundGraph = function (g) {\n  var simplified = new graph_1.Graph({\n    multigraph: g.isMultigraph()\n  }).setGraph(g.graph());\n  g.nodes().forEach(function (node) {\n    var _a;\n    if (!((_a = g.children(node)) === null || _a === void 0 ? void 0 : _a.length)) {\n      simplified.setNode(node, g.node(node));\n    }\n  });\n  g.edges().forEach(function (edge) {\n    simplified.setEdgeObj(edge, g.edge(edge));\n  });\n  return simplified;\n};\nexports.asNonCompoundGraph = asNonCompoundGraph;\nvar zipObject = function (keys, values) {\n  return keys === null || keys === void 0 ? void 0 : keys.reduce(function (obj, key, i) {\n    obj[key] = values[i];\n    return obj;\n  }, {});\n};\nexports.zipObject = zipObject;\nvar successorWeights = function (g) {\n  var weightsMap = {};\n  g.nodes().forEach(function (node) {\n    var _a;\n    var sucs = {};\n    (_a = g.outEdges(node)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n      var _a;\n      sucs[e.w] = (sucs[e.w] || 0) + (((_a = g.edge(e)) === null || _a === void 0 ? void 0 : _a.weight) || 0);\n    });\n    weightsMap[node] = sucs;\n  });\n  return weightsMap;\n};\nexports.successorWeights = successorWeights;\nvar predecessorWeights = function (g) {\n  var nodes = g.nodes();\n  var weightMap = nodes.map(function (v) {\n    var _a;\n    var preds = {};\n    (_a = g.inEdges(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return (0, exports.zipObject)(nodes, weightMap);\n};\nexports.predecessorWeights = predecessorWeights;\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nvar intersectRect = function (rect, point) {\n  var x = Number(rect.x);\n  var y = Number(rect.y);\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = Number(point.x) - x;\n  var dy = Number(point.y) - y;\n  var w = Number(rect.width) / 2;\n  var h = Number(rect.height) / 2;\n  if (!dx && !dy) {\n    // completely overlapped directly, then return points its self\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var sx;\n  var sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n  return {\n    x: x + sx,\n    y: y + sy\n  };\n};\nexports.intersectRect = intersectRect;\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * const will produce a matrix with the ids of each node.\n */\nvar buildLayerMatrix = function (g) {\n  var layeringNodes = [];\n  var rankMax = (0, exports.maxRank)(g) + 1;\n  for (var i = 0; i < rankMax; i++) {\n    layeringNodes.push([]);\n  }\n  // const layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n  g.nodes().forEach(function (v) {\n    var node = g.node(v);\n    if (!node) return;\n    var rank = node.rank;\n    if (rank !== undefined && layeringNodes[rank]) {\n      layeringNodes[rank].push(v);\n    }\n  });\n  for (var i = 0; i < rankMax; i++) {\n    layeringNodes[i] = layeringNodes[i].sort(function (va, vb) {\n      var _a, _b;\n      return safeSort((_a = g.node(va)) === null || _a === void 0 ? void 0 : _a.order, (_b = g.node(vb)) === null || _b === void 0 ? void 0 : _b.order);\n    });\n  }\n  return layeringNodes;\n};\nexports.buildLayerMatrix = buildLayerMatrix;\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nvar normalizeRanks = function (g) {\n  var nodeRanks = g.nodes().filter(function (v) {\n    var _a;\n    return ((_a = g.node(v)) === null || _a === void 0 ? void 0 : _a.rank) !== undefined;\n  }).map(function (v) {\n    return g.node(v).rank;\n  });\n  var min = Math.min.apply(Math, nodeRanks);\n  g.nodes().forEach(function (v) {\n    var node = g.node(v);\n    if (node.hasOwnProperty(\"rank\") && min !== Infinity) {\n      node.rank -= min;\n    }\n  });\n};\nexports.normalizeRanks = normalizeRanks;\nvar removeEmptyRanks = function (g) {\n  // Ranks may not start at 0, so we need to offset them\n  var nodes = g.nodes();\n  var nodeRanks = nodes.filter(function (v) {\n    var _a;\n    return ((_a = g.node(v)) === null || _a === void 0 ? void 0 : _a.rank) !== undefined;\n  }).map(function (v) {\n    return g.node(v).rank;\n  });\n  var offset = Math.min.apply(Math, nodeRanks);\n  var layers = [];\n  nodes.forEach(function (v) {\n    var _a;\n    var rank = (((_a = g.node(v)) === null || _a === void 0 ? void 0 : _a.rank) || 0) - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor || 0;\n  for (var i = 0; i < layers.length; i++) {\n    var vs = layers[i];\n    if (vs === undefined) {\n      if (i % nodeRankFactor !== 0) {\n        delta -= 1;\n      }\n    } else if (delta) {\n      vs === null || vs === void 0 ? void 0 : vs.forEach(function (v) {\n        var node = g.node(v);\n        if (node) {\n          node.rank = node.rank || 0;\n          node.rank += delta;\n        }\n      });\n    }\n  }\n};\nexports.removeEmptyRanks = removeEmptyRanks;\nvar addBorderNode = function (g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n  if ((0, util_1.isNumber)(rank) && (0, util_1.isNumber)(order)) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return (0, exports.addDummyNode)(g, \"border\", node, prefix);\n};\nexports.addBorderNode = addBorderNode;\nvar maxRank = function (g) {\n  var maxRank;\n  g.nodes().forEach(function (v) {\n    var _a;\n    var rank = (_a = g.node(v)) === null || _a === void 0 ? void 0 : _a.rank;\n    if (rank !== undefined) {\n      if (maxRank === undefined || rank > maxRank) {\n        maxRank = rank;\n      }\n    }\n  });\n  if (!maxRank) {\n    maxRank = 0;\n  }\n  return maxRank;\n};\nexports.maxRank = maxRank;\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * const returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nvar partition = function (collection, fn) {\n  var result = {\n    lhs: [],\n    rhs: []\n  };\n  collection === null || collection === void 0 ? void 0 : collection.forEach(function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n};\nexports.partition = partition;\n/*\n * Returns a new const that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nvar time = function (name, fn) {\n  var start = Date.now();\n  try {\n    return fn();\n  } finally {\n    console.log(\"\".concat(name, \" time: \").concat(Date.now() - start, \"ms\"));\n  }\n};\nexports.time = time;\nvar notime = function (name, fn) {\n  return fn();\n};\nexports.notime = notime;\nvar minBy = function (array, func) {\n  return array.reduce(function (a, b) {\n    var valA = func(a);\n    var valB = func(b);\n    return valA > valB ? b : a;\n  });\n};\nexports.minBy = minBy;","map":{"version":3,"mappings":"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","names":["safeSort","valueA","valueB","Number","addDummyNode","g","type","attrs","name","v","Math","random","hasNode","dummy","setNode","exports","simplify","simplified","graph_1","setGraph","graph","nodes","forEach","node","edges","e","simpleLabel","edgeFromArgs","w","weight","minlen","label","edge","setEdge","max","asNonCompoundGraph","multigraph","isMultigraph","children","length","setEdgeObj","zipObject","keys","values","reduce","obj","key","i","successorWeights","weightsMap","sucs","outEdges","predecessorWeights","weightMap","map","preds","inEdges","intersectRect","rect","point","x","y","dx","dy","width","h","height","sx","sy","abs","buildLayerMatrix","layeringNodes","rankMax","push","rank","undefined","sort","va","vb","order","normalizeRanks","nodeRanks","filter","min","hasOwnProperty","Infinity","removeEmptyRanks","offset","layers","delta","nodeRankFactor","vs","addBorderNode","prefix","maxRank","partition","collection","fn","result","lhs","rhs","value","time","start","Date","now","console","log","notime","minBy","array","func","a","b","valA","valB"],"sourceRoot":"","sources":["../../../../src/layout/dagre/src/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}