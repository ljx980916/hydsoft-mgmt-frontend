{"ast":null,"code":"import * as g from '../g/index.mjs';\nconst Directions = {\n  AUTO: 'auto',\n  LEFT: 'left',\n  RIGHT: 'right',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  ANCHOR_SIDE: 'anchor-side',\n  MAGNET_SIDE: 'magnet-side'\n};\nconst DEFINED_DIRECTIONS = [Directions.LEFT, Directions.RIGHT, Directions.TOP, Directions.BOTTOM];\nfunction getDirectionForLinkConnection(linkOrigin, connectionPoint, linkView) {\n  const tangent = linkView.getTangentAtLength(linkView.getClosestPointLength(connectionPoint));\n  const roundedAngle = Math.round(tangent.angle() / 90) * 90;\n  switch (roundedAngle) {\n    case 0:\n    case 360:\n      return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n    case 90:\n      return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n    case 180:\n      return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n    case 270:\n      return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n  }\n}\nfunction rightAngleRouter(_vertices, opt, linkView) {\n  const margin = opt.margin || 20;\n  let {\n    sourceDirection = Directions.AUTO,\n    targetDirection = Directions.AUTO\n  } = opt;\n  const sourceView = linkView.sourceView;\n  const targetView = linkView.targetView;\n  const isSourcePort = !!linkView.model.source().port;\n  const isTargetPort = !!linkView.model.target().port;\n  if (sourceDirection === Directions.AUTO) {\n    sourceDirection = isSourcePort ? Directions.MAGNET_SIDE : Directions.ANCHOR_SIDE;\n  }\n  if (targetDirection === Directions.AUTO) {\n    targetDirection = isTargetPort ? Directions.MAGNET_SIDE : Directions.ANCHOR_SIDE;\n  }\n  const sourceBBox = linkView.sourceBBox;\n  const targetBBox = linkView.targetBBox;\n  const sourcePoint = linkView.sourceAnchor;\n  const targetPoint = linkView.targetAnchor;\n  let {\n    x: sx0,\n    y: sy0,\n    width: sourceWidth = 0,\n    height: sourceHeight = 0\n  } = sourceView && sourceView.model.isElement() ? g.Rect.fromRectUnion(sourceBBox, sourceView.model.getBBox()) : linkView.sourceAnchor;\n  let {\n    x: tx0,\n    y: ty0,\n    width: targetWidth = 0,\n    height: targetHeight = 0\n  } = targetView && targetView.model.isElement() ? g.Rect.fromRectUnion(targetBBox, targetView.model.getBBox()) : linkView.targetAnchor;\n  const tx1 = tx0 + targetWidth;\n  const ty1 = ty0 + targetHeight;\n  const sx1 = sx0 + sourceWidth;\n  const sy1 = sy0 + sourceHeight;\n\n  // Key coordinates including the margin\n  const smx0 = sx0 - margin;\n  const smx1 = sx1 + margin;\n  const smy0 = sy0 - margin;\n  const smy1 = sy1 + margin;\n  const tmx0 = tx0 - margin;\n  const tmx1 = tx1 + margin;\n  const tmy0 = ty0 - margin;\n  const tmy1 = ty1 + margin;\n  const sourceOutsidePoint = sourcePoint.clone();\n  let sourceSide;\n  if (!sourceView) {\n    const sourceLinkAnchorBBox = new g.Rect(sx0, sy0, 0, 0);\n    sourceSide = DEFINED_DIRECTIONS.includes(sourceDirection) ? sourceDirection : sourceLinkAnchorBBox.sideNearestToPoint(targetPoint);\n  } else if (sourceView.model.isLink()) {\n    sourceSide = getDirectionForLinkConnection(targetPoint, sourcePoint, sourceView);\n  } else if (sourceDirection === Directions.ANCHOR_SIDE) {\n    sourceSide = sourceBBox.sideNearestToPoint(sourcePoint);\n  } else if (sourceDirection === Directions.MAGNET_SIDE) {\n    sourceSide = sourceView.model.getBBox().sideNearestToPoint(sourcePoint);\n  } else {\n    sourceSide = sourceDirection;\n  }\n  switch (sourceSide) {\n    case 'left':\n      sourceOutsidePoint.x = smx0;\n      break;\n    case 'right':\n      sourceOutsidePoint.x = smx1;\n      break;\n    case 'top':\n      sourceOutsidePoint.y = smy0;\n      break;\n    case 'bottom':\n      sourceOutsidePoint.y = smy1;\n      break;\n  }\n  const targetOutsidePoint = targetPoint.clone();\n  let targetSide;\n  if (!targetView) {\n    const targetLinkAnchorBBox = new g.Rect(tx0, ty0, 0, 0);\n    targetSide = DEFINED_DIRECTIONS.includes(targetDirection) ? targetDirection : targetLinkAnchorBBox.sideNearestToPoint(sourcePoint);\n  } else if (targetView.model.isLink()) {\n    targetSide = getDirectionForLinkConnection(sourcePoint, targetPoint, targetView);\n  } else if (targetDirection === Directions.ANCHOR_SIDE) {\n    targetSide = targetBBox.sideNearestToPoint(targetPoint);\n  } else if (targetDirection === Directions.MAGNET_SIDE) {\n    targetSide = targetView.model.getBBox().sideNearestToPoint(targetPoint);\n  } else {\n    targetSide = targetDirection;\n  }\n  switch (targetSide) {\n    case 'left':\n      targetOutsidePoint.x = tmx0;\n      break;\n    case 'right':\n      targetOutsidePoint.x = tmx1;\n      break;\n    case 'top':\n      targetOutsidePoint.y = tmy0;\n      break;\n    case 'bottom':\n      targetOutsidePoint.y = tmy1;\n      break;\n  }\n  const {\n    x: sox,\n    y: soy\n  } = sourceOutsidePoint;\n  const {\n    x: tox,\n    y: toy\n  } = targetOutsidePoint;\n  const tcx = (tx0 + tx1) / 2;\n  const tcy = (ty0 + ty1) / 2;\n  const scx = (sx0 + sx1) / 2;\n  const scy = (sy0 + sy1) / 2;\n  const middleOfVerticalSides = (scx < tcx ? sx1 + tx0 : tx1 + sx0) / 2;\n  const middleOfHorizontalSides = (scy < tcy ? sy1 + ty0 : ty1 + sy0) / 2;\n  if (sourceSide === 'left' && targetSide === 'right') {\n    if (smx0 <= tx1) {\n      let y = middleOfHorizontalSides;\n      if (sx1 <= tx0) {\n        if (ty1 >= smy0 && toy < soy) {\n          y = Math.min(tmy0, smy0);\n        } else if (ty0 <= smy1 && toy >= soy) {\n          y = Math.max(tmy1, smy1);\n        }\n      }\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    const x = (sox + tox) / 2;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'right' && targetSide === 'left') {\n    if (smx1 >= tx0) {\n      let y = middleOfHorizontalSides;\n      if (sox > tx1) {\n        if (ty1 >= smy0 && toy < soy) {\n          y = Math.min(tmy0, smy0);\n        } else if (ty0 <= smy1 && toy >= soy) {\n          y = Math.max(tmy1, smy1);\n        }\n      }\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    const x = (sox + tox) / 2;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'top' && targetSide === 'bottom') {\n    if (soy < toy) {\n      let x = middleOfVerticalSides;\n      let y = soy;\n      if (soy < ty0) {\n        if (tx1 >= smx0 && tox < sox) {\n          x = Math.min(tmx0, smx0);\n        } else if (tx0 <= smx1 && tox >= sox) {\n          x = Math.max(tmx1, smx1);\n        }\n      }\n      return [{\n        x: sox,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: toy\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    const y = (soy + toy) / 2;\n    return [{\n      x: sox,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  } else if (sourceSide === 'bottom' && targetSide === 'top') {\n    if (soy - margin > toy) {\n      let x = middleOfVerticalSides;\n      let y = soy;\n      if (soy > ty1) {\n        if (tx1 >= smx0 && tox < sox) {\n          x = Math.min(tmx0, smx0);\n        } else if (tx0 <= smx1 && tox >= sox) {\n          x = Math.max(tmx1, smx1);\n        }\n      }\n      return [{\n        x: sox,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: toy\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    const y = (soy + toy) / 2;\n    return [{\n      x: sox,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  } else if (sourceSide === 'top' && targetSide === 'top') {\n    let x;\n    let y1 = Math.min((sy1 + ty0) / 2, toy);\n    let y2 = Math.min((sy0 + ty1) / 2, soy);\n    if (toy < soy) {\n      if (sox >= tmx1 || sox <= tmx0) {\n        return [{\n          x: sox,\n          y: Math.min(soy, toy)\n        }, {\n          x: tox,\n          y: Math.min(soy, toy)\n        }];\n      } else if (tox > sox) {\n        x = Math.min(sox, tmx0);\n      } else {\n        x = Math.max(sox, tmx1);\n      }\n    } else {\n      if (tox >= smx1 || tox <= smx0) {\n        return [{\n          x: sox,\n          y: Math.min(soy, toy)\n        }, {\n          x: tox,\n          y: Math.min(soy, toy)\n        }];\n      } else if (tox >= sox) {\n        x = Math.max(tox, smx1);\n      } else {\n        x = Math.min(tox, smx0);\n      }\n    }\n    return [{\n      x: sox,\n      y: y2\n    }, {\n      x,\n      y: y2\n    }, {\n      x,\n      y: y1\n    }, {\n      x: tox,\n      y: y1\n    }];\n  } else if (sourceSide === 'bottom' && targetSide === 'bottom') {\n    if (tx0 >= sox + margin || tx1 <= sox - margin) {\n      return [{\n        x: sox,\n        y: Math.max(soy, toy)\n      }, {\n        x: tox,\n        y: Math.max(soy, toy)\n      }];\n    }\n    let x;\n    let y1;\n    let y2;\n    if (toy > soy) {\n      y1 = Math.max((sy1 + ty0) / 2, toy);\n      y2 = Math.max((sy1 + ty0) / 2, soy);\n      if (tox > sox) {\n        x = Math.min(sox, tmx0);\n      } else {\n        x = Math.max(sox, tmx1);\n      }\n    } else {\n      y1 = Math.max((sy0 + ty1) / 2, toy);\n      y2 = Math.max((sy0 + ty1) / 2, soy);\n      if (tox > sox) {\n        x = Math.min(tox, smx0);\n      } else {\n        x = Math.max(tox, smx1);\n      }\n    }\n    return [{\n      x: sox,\n      y: y2\n    }, {\n      x,\n      y: y2\n    }, {\n      x,\n      y: y1\n    }, {\n      x: tox,\n      y: y1\n    }];\n  } else if (sourceSide === 'left' && targetSide === 'left') {\n    let y;\n    let x1 = Math.min((sx1 + tx0) / 2, tox);\n    let x2 = Math.min((sx0 + tx1) / 2, sox);\n    if (tox > sox) {\n      if (toy <= soy) {\n        y = Math.min(smy0, toy);\n      } else {\n        y = Math.max(smy1, toy);\n      }\n    } else {\n      if (toy >= soy) {\n        y = Math.min(tmy0, soy);\n      } else {\n        y = Math.max(tmy1, soy);\n      }\n    }\n    return [{\n      x: x2,\n      y: soy\n    }, {\n      x: x2,\n      y\n    }, {\n      x: x1,\n      y\n    }, {\n      x: x1,\n      y: toy\n    }];\n  } else if (sourceSide === 'right' && targetSide === 'right') {\n    let y;\n    let x1 = Math.max((sx0 + tx1) / 2, tox);\n    let x2 = Math.max((sx1 + tx0) / 2, sox);\n    if (tox < sox) {\n      if (toy <= soy) {\n        y = Math.min(smy0, toy);\n      } else {\n        y = Math.max(smy1, toy);\n      }\n    } else {\n      if (toy >= soy) {\n        y = Math.min(tmy0, soy);\n      } else {\n        y = Math.max(tmy1, soy);\n      }\n    }\n    return [{\n      x: x2,\n      y: soy\n    }, {\n      x: x2,\n      y\n    }, {\n      x: x1,\n      y\n    }, {\n      x: x1,\n      y: toy\n    }];\n  } else if (sourceSide === 'top' && targetSide === 'right') {\n    if (soy > toy) {\n      if (sox < tox) {\n        let y = (sy0 + ty1) / 2;\n        if (y > tcy && y < tmy1 && sox < tmx0) {\n          y = tmy0;\n        }\n        return [{\n          x: sox,\n          y\n        }, {\n          x: tox,\n          y\n        }, {\n          x: tox,\n          y: toy\n        }];\n      }\n      return [{\n        x: sox,\n        y: toy\n      }];\n    }\n    const x = (sx0 + tx1) / 2;\n    if (sox > tox && sy1 >= toy) {\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x,\n        y: soy\n      }, {\n        x,\n        y: toy\n      }];\n    }\n    if (x > smx0 && soy < ty1) {\n      const y = Math.min(sy0, ty0) - margin;\n      const x = Math.max(sx1, tx1) + margin;\n      return [{\n        x: sox,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: toy\n      }];\n    }\n    return [{\n      x: sox,\n      y: soy\n    }, {\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'top' && targetSide === 'left') {\n    if (soy > toy) {\n      if (sox > tox) {\n        let y = (sy0 + ty1) / 2;\n        if (y > tcy && y < tmy1 && sox > tmx1) {\n          y = tmy0;\n        }\n        return [{\n          x: sox,\n          y\n        }, {\n          x: tox,\n          y\n        }, {\n          x: tox,\n          y: toy\n        }];\n      }\n      return [{\n        x: sox,\n        y: toy\n      }];\n    }\n    const x = (sx1 + tx0) / 2;\n    if (sox < tox && sy1 >= toy) {\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x,\n        y: soy\n      }, {\n        x,\n        y: toy\n      }];\n    }\n    if (x < smx1 && soy < ty1) {\n      const y = Math.min(sy0, ty0) - margin;\n      const x = Math.min(sx0, tx0) - margin;\n      return [{\n        x: sox,\n        y\n      }, {\n        x,\n        y\n      }, {\n        x,\n        y: toy\n      }];\n    }\n    return [{\n      x: sox,\n      y: soy\n    }, {\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'bottom' && targetSide === 'right') {\n    if (soy < toy) {\n      if (sox < tox) {\n        let y = (sy1 + ty0) / 2;\n        if (y < tcy && y > tmy0 && sox < tmx0) {\n          y = tmy1;\n        }\n        return [{\n          x: sox,\n          y\n        }, {\n          x: tox,\n          y\n        }, {\n          x: tox,\n          y: toy\n        }];\n      }\n      return [{\n        x: sox,\n        y: toy\n      }];\n    } else {\n      if (sx0 < tox) {\n        const y = Math.max(sy1, ty1) + margin;\n        const x = Math.max(sx1, tx1) + margin;\n        return [{\n          x: sox,\n          y\n        }, {\n          x,\n          y\n        }, {\n          x,\n          y: toy\n        }];\n      }\n    }\n    const x = middleOfVerticalSides;\n    return [{\n      x: sox,\n      y: soy\n    }, {\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'bottom' && targetSide === 'left') {\n    if (soy < toy) {\n      if (sox > tox) {\n        let y = (sy1 + ty0) / 2;\n        if (y < tcy && y > tmy0 && sox > tmx1) {\n          y = tmy1;\n        }\n        return [{\n          x: sox,\n          y\n        }, {\n          x: tox,\n          y\n        }, {\n          x: tox,\n          y: toy\n        }];\n      }\n      return [{\n        x: sox,\n        y: toy\n      }];\n    } else {\n      if (sx1 > tox) {\n        const y = Math.max(sy1, ty1) + margin;\n        const x = Math.min(sx0, tx0) - margin;\n        return [{\n          x: sox,\n          y\n        }, {\n          x,\n          y\n        }, {\n          x,\n          y: toy\n        }];\n      }\n    }\n    const x = middleOfVerticalSides;\n    return [{\n      x: sox,\n      y: soy\n    }, {\n      x,\n      y: soy\n    }, {\n      x,\n      y: toy\n    }];\n  } else if (sourceSide === 'left' && targetSide === 'bottom') {\n    if (sox > tox && soy >= tmy1) {\n      return [{\n        x: tox,\n        y: soy\n      }];\n    }\n    if (sox >= tx1 && soy < toy) {\n      const x = (sx1 + tx0) / 2;\n      return [{\n        x,\n        y: soy\n      }, {\n        x,\n        y: toy\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    if (tox < sx1 && ty1 <= sy0) {\n      const y = (sy0 + ty1) / 2;\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }];\n    }\n    const x = Math.min(tmx0, sox);\n    const y = Math.max(sy1, ty1) + margin;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  } else if (sourceSide === 'left' && targetSide === 'top') {\n    if (sox > tox && soy < tmy0) {\n      return [{\n        x: tox,\n        y: soy\n      }];\n    }\n    if (sox >= tx1) {\n      if (soy > toy) {\n        const x = (sx0 + tx1) / 2;\n        return [{\n          x,\n          y: soy\n        }, {\n          x,\n          y: toy\n        }, {\n          x: tox,\n          y: toy\n        }];\n      }\n    }\n    if (tox <= sx1 && toy > soy) {\n      const y = (ty0 + sy1) / 2;\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }];\n    }\n    const x = toy < soy ? Math.min(sx0, tx0) - margin : smx0;\n    const y = Math.min(sy0, ty0) - margin;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  } else if (sourceSide === 'right' && targetSide === 'top') {\n    if (sox < tox && soy < tmy0) {\n      return [{\n        x: tox,\n        y: soy\n      }];\n    }\n    if (sx1 < tx0 && soy > toy) {\n      let x = (sx1 + tx0) / 2;\n      return [{\n        x,\n        y: soy\n      }, {\n        x,\n        y: toy\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    if (tox < sox && ty0 > sy1) {\n      const y = (sy1 + ty0) / 2;\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }];\n    }\n    const x = Math.max(sx1, tx1) + margin;\n    const y = Math.min(sy0, ty0) - margin;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  } else if (sourceSide === 'right' && targetSide === 'bottom') {\n    if (sox < tox && soy >= tmy1) {\n      return [{\n        x: tox,\n        y: soy\n      }];\n    }\n    if (sox <= tx0 && soy < toy) {\n      const x = (sx1 + tx0) / 2;\n      return [{\n        x,\n        y: soy\n      }, {\n        x,\n        y: toy\n      }, {\n        x: tox,\n        y: toy\n      }];\n    }\n    if (tox > sx0 && ty1 < sy0) {\n      const y = (sy0 + ty1) / 2;\n      return [{\n        x: sox,\n        y: soy\n      }, {\n        x: sox,\n        y\n      }, {\n        x: tox,\n        y\n      }];\n    }\n    const x = Math.max(tmx1, sox);\n    const y = Math.max(sy1, ty1) + margin;\n    return [{\n      x,\n      y: soy\n    }, {\n      x,\n      y\n    }, {\n      x: tox,\n      y\n    }];\n  }\n}\nrightAngleRouter.Directions = Directions;\nexport const rightAngle = rightAngleRouter;","map":{"version":3,"names":["g","Directions","AUTO","LEFT","RIGHT","TOP","BOTTOM","ANCHOR_SIDE","MAGNET_SIDE","DEFINED_DIRECTIONS","getDirectionForLinkConnection","linkOrigin","connectionPoint","linkView","tangent","getTangentAtLength","getClosestPointLength","roundedAngle","Math","round","angle","y","x","rightAngleRouter","_vertices","opt","margin","sourceDirection","targetDirection","sourceView","targetView","isSourcePort","model","source","port","isTargetPort","target","sourceBBox","targetBBox","sourcePoint","sourceAnchor","targetPoint","targetAnchor","sx0","sy0","width","sourceWidth","height","sourceHeight","isElement","Rect","fromRectUnion","getBBox","tx0","ty0","targetWidth","targetHeight","tx1","ty1","sx1","sy1","smx0","smx1","smy0","smy1","tmx0","tmx1","tmy0","tmy1","sourceOutsidePoint","clone","sourceSide","sourceLinkAnchorBBox","includes","sideNearestToPoint","isLink","targetOutsidePoint","targetSide","targetLinkAnchorBBox","sox","soy","tox","toy","tcx","tcy","scx","scy","middleOfVerticalSides","middleOfHorizontalSides","min","max","y1","y2","x1","x2","rightAngle"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-mgmt-frontend/node_modules/jointjs/src/routers/rightAngle.mjs"],"sourcesContent":["import * as g from '../g/index.mjs';\n\nconst Directions = {\n    AUTO: 'auto',\n    LEFT: 'left',\n    RIGHT: 'right',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    ANCHOR_SIDE: 'anchor-side',\n    MAGNET_SIDE: 'magnet-side'\n};\n\nconst DEFINED_DIRECTIONS = [Directions.LEFT, Directions.RIGHT, Directions.TOP, Directions.BOTTOM];\n\nfunction getDirectionForLinkConnection(linkOrigin, connectionPoint, linkView) {\n    const tangent = linkView.getTangentAtLength(linkView.getClosestPointLength(connectionPoint));\n    const roundedAngle = Math.round(tangent.angle() / 90) * 90;\n\n    switch (roundedAngle) {\n        case 0:\n        case 360:\n            return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n        case 90:\n            return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n        case 180:\n            return linkOrigin.y < connectionPoint.y ? Directions.TOP : Directions.BOTTOM;\n        case 270:\n            return linkOrigin.x < connectionPoint.x ? Directions.LEFT : Directions.RIGHT;\n    }\n}\n\nfunction rightAngleRouter(_vertices, opt, linkView) {\n    const margin = opt.margin || 20;\n    let { sourceDirection = Directions.AUTO, targetDirection = Directions.AUTO } = opt;\n\n    const sourceView = linkView.sourceView;\n    const targetView = linkView.targetView;\n\n    const isSourcePort = !!linkView.model.source().port;\n    const isTargetPort = !!linkView.model.target().port;\n\n    if (sourceDirection === Directions.AUTO) {\n        sourceDirection = isSourcePort ? Directions.MAGNET_SIDE : Directions.ANCHOR_SIDE;\n    }\n\n    if (targetDirection === Directions.AUTO) {\n        targetDirection = isTargetPort ? Directions.MAGNET_SIDE : Directions.ANCHOR_SIDE;\n    }\n\n    const sourceBBox = linkView.sourceBBox;\n    const targetBBox = linkView.targetBBox;\n    const sourcePoint = linkView.sourceAnchor;\n    const targetPoint = linkView.targetAnchor;\n    let {\n        x: sx0,\n        y: sy0,\n        width: sourceWidth = 0,\n        height: sourceHeight = 0\n    } = sourceView && sourceView.model.isElement() ? g.Rect.fromRectUnion(sourceBBox, sourceView.model.getBBox()) : linkView.sourceAnchor;\n\n    let {\n        x: tx0,\n        y: ty0,\n        width: targetWidth = 0,\n        height: targetHeight = 0\n    } = targetView && targetView.model.isElement() ? g.Rect.fromRectUnion(targetBBox, targetView.model.getBBox()) : linkView.targetAnchor;\n\n    const tx1 = tx0 + targetWidth;\n    const ty1 = ty0 + targetHeight;\n    const sx1 = sx0 + sourceWidth;\n    const sy1 = sy0 + sourceHeight;\n\n    // Key coordinates including the margin\n    const smx0 = sx0 - margin;\n    const smx1 = sx1 + margin;\n    const smy0 = sy0 - margin;\n    const smy1 = sy1 + margin;\n    const tmx0 = tx0 - margin;\n    const tmx1 = tx1 + margin;\n    const tmy0 = ty0 - margin;\n    const tmy1 = ty1 + margin;\n\n    const sourceOutsidePoint = sourcePoint.clone();\n\n    let sourceSide;\n\n    if (!sourceView) {\n        const sourceLinkAnchorBBox = new g.Rect(sx0, sy0, 0, 0);\n        sourceSide = DEFINED_DIRECTIONS.includes(sourceDirection) ? sourceDirection : sourceLinkAnchorBBox.sideNearestToPoint(targetPoint);\n    } else if (sourceView.model.isLink()) {\n        sourceSide = getDirectionForLinkConnection(targetPoint, sourcePoint, sourceView);\n    } else if (sourceDirection === Directions.ANCHOR_SIDE) {\n        sourceSide = sourceBBox.sideNearestToPoint(sourcePoint);\n    } else if (sourceDirection === Directions.MAGNET_SIDE) {\n        sourceSide = sourceView.model.getBBox().sideNearestToPoint(sourcePoint);\n    } else {\n        sourceSide = sourceDirection;\n    }\n\n    switch (sourceSide) {\n        case 'left':\n            sourceOutsidePoint.x = smx0;\n            break;\n        case 'right':\n            sourceOutsidePoint.x = smx1;\n            break;\n        case 'top':\n            sourceOutsidePoint.y = smy0;\n            break;\n        case 'bottom':\n            sourceOutsidePoint.y = smy1;\n            break;\n    }\n    const targetOutsidePoint = targetPoint.clone();\n\n\n    let targetSide;\n\n\n    if (!targetView) {\n        const targetLinkAnchorBBox = new g.Rect(tx0, ty0, 0, 0);\n        targetSide = DEFINED_DIRECTIONS.includes(targetDirection) ? targetDirection : targetLinkAnchorBBox.sideNearestToPoint(sourcePoint);\n    } else if (targetView.model.isLink()) {\n        targetSide = getDirectionForLinkConnection(sourcePoint, targetPoint, targetView);\n    } else if (targetDirection === Directions.ANCHOR_SIDE) {\n        targetSide = targetBBox.sideNearestToPoint(targetPoint);\n    } else if (targetDirection === Directions.MAGNET_SIDE) {\n        targetSide = targetView.model.getBBox().sideNearestToPoint(targetPoint);\n    } else {\n        targetSide = targetDirection;\n    }\n\n    switch (targetSide) {\n        case 'left':\n            targetOutsidePoint.x = tmx0;\n            break;\n        case 'right':\n            targetOutsidePoint.x = tmx1;\n            break;\n        case 'top':\n            targetOutsidePoint.y = tmy0;\n            break;\n        case 'bottom':\n            targetOutsidePoint.y = tmy1;\n            break;\n    }\n\n    const { x: sox, y: soy } = sourceOutsidePoint;\n    const { x: tox, y: toy } = targetOutsidePoint;\n    const tcx = (tx0 + tx1) / 2;\n    const tcy = (ty0 + ty1) / 2;\n    const scx = (sx0 + sx1) / 2;\n    const scy = (sy0 + sy1) / 2;\n    const middleOfVerticalSides = (scx < tcx ? (sx1 + tx0) : (tx1 + sx0)) / 2;\n    const middleOfHorizontalSides = (scy < tcy ? (sy1 + ty0) : (ty1 + sy0)) / 2;\n\n    if (sourceSide === 'left' && targetSide === 'right') {\n        if (smx0 <= tx1) {\n            let y = middleOfHorizontalSides;\n            if (sx1 <= tx0) {\n                if (ty1 >= smy0 && toy < soy) {\n                    y = Math.min(tmy0, smy0);\n                } else if (ty0 <= smy1 && toy >= soy) {\n                    y = Math.max(tmy1, smy1);\n                }\n            }\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y },\n                { x: tox, y: toy }\n            ];\n        }\n\n        const x = (sox + tox) / 2;\n        return [\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'right' && targetSide === 'left') {\n        if (smx1 >= tx0) {\n            let y = middleOfHorizontalSides;\n            if (sox > tx1) {\n                if (ty1 >= smy0 && toy < soy) {\n                    y = Math.min(tmy0, smy0);\n                } else if (ty0 <= smy1 && toy >= soy) {\n                    y = Math.max(tmy1, smy1);\n                }\n            }\n\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y },\n                { x: tox, y: toy }\n            ];\n        }\n\n        const x = (sox + tox) / 2;\n        return [\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'top' && targetSide === 'bottom') {\n        if (soy < toy) {\n            let x = middleOfVerticalSides;\n            let y = soy;\n\n            if (soy < ty0) {\n                if (tx1 >= smx0 && tox < sox) {\n                    x = Math.min(tmx0, smx0);\n                } else if (tx0 <= smx1 && tox >= sox) {\n                    x = Math.max(tmx1, smx1);\n                }\n            }\n\n            return [\n                { x: sox, y },\n                { x, y },\n                { x, y: toy },\n                { x: tox, y: toy }\n            ];\n        }\n        const y = (soy + toy) / 2;\n        return [\n            { x: sox, y },\n            { x: tox, y }\n        ];\n    } else if (sourceSide === 'bottom' && targetSide === 'top') {\n        if (soy - margin > toy) {\n            let x = middleOfVerticalSides;\n            let y = soy;\n\n            if (soy > ty1) {\n                if (tx1 >= smx0 && tox < sox) {\n                    x = Math.min(tmx0, smx0);\n                } else if (tx0 <= smx1 && tox >= sox) {\n                    x = Math.max(tmx1, smx1);\n                }\n            }\n\n            return [\n                { x: sox, y },\n                { x, y },\n                { x, y: toy },\n                { x: tox, y: toy }\n            ];\n        }\n        const y = (soy + toy) / 2;\n        return [\n            { x: sox, y },\n            { x: tox, y }\n        ];\n    } else if (sourceSide === 'top' && targetSide === 'top') {\n        let x;\n        let y1 = Math.min((sy1 + ty0) / 2, toy);\n        let y2 = Math.min((sy0 + ty1) / 2, soy);\n\n        if (toy < soy) {\n            if (sox >= tmx1 || sox <= tmx0) {\n                return [\n                    { x: sox, y: Math.min(soy,toy) },\n                    { x: tox, y: Math.min(soy,toy) }\n                ];\n            } else if (tox > sox) {\n                x = Math.min(sox, tmx0);\n            } else {\n                x = Math.max(sox, tmx1);\n            }\n        } else {\n            if (tox >= smx1 || tox <= smx0) {\n                return [\n                    { x: sox, y: Math.min(soy,toy) },\n                    { x: tox, y: Math.min(soy,toy) }\n                ];\n            } else if (tox >= sox) {\n                x = Math.max(tox, smx1);\n            } else {\n                x = Math.min(tox, smx0);\n            }\n        }\n\n        return [\n            { x: sox, y: y2 },\n            { x, y: y2 },\n            { x, y: y1 },\n            { x: tox, y: y1 }\n        ];\n    } else if (sourceSide === 'bottom' && targetSide === 'bottom') {\n        if (tx0 >= sox + margin || tx1 <= sox - margin) {\n            return [\n                { x: sox, y: Math.max(soy, toy) },\n                { x: tox, y: Math.max(soy, toy) }\n            ];\n        }\n\n        let x;\n        let y1;\n        let y2;\n\n        if (toy > soy) {\n            y1 = Math.max((sy1 + ty0) / 2, toy);\n            y2 = Math.max((sy1 + ty0) / 2, soy);\n\n            if (tox > sox) {\n                x = Math.min(sox, tmx0);\n            } else {\n                x = Math.max(sox, tmx1);\n            }\n        } else {\n            y1 = Math.max((sy0 + ty1) / 2, toy);\n            y2 = Math.max((sy0 + ty1) / 2, soy);\n\n            if (tox > sox) {\n                x = Math.min(tox, smx0);\n            } else {\n                x = Math.max(tox, smx1);\n            }\n        }\n\n        return [\n            { x: sox, y: y2 },\n            { x, y: y2 },\n            { x, y: y1 },\n            { x: tox, y: y1 }\n        ];\n    } else if (sourceSide === 'left' && targetSide === 'left') {\n        let y;\n        let x1 = Math.min((sx1 + tx0) / 2, tox);\n        let x2 = Math.min((sx0 + tx1) / 2, sox);\n\n        if (tox > sox) {\n            if (toy <= soy) {\n                y = Math.min(smy0, toy);\n            } else {\n                y = Math.max(smy1, toy);\n            }\n        } else {\n            if (toy >= soy) {\n                y = Math.min(tmy0, soy);\n            } else {\n                y = Math.max(tmy1, soy);\n            }\n        }\n\n        return [\n            { x: x2, y: soy },\n            { x: x2, y },\n            { x: x1, y },\n            { x: x1, y: toy }\n        ];\n    } else if (sourceSide === 'right' && targetSide === 'right') {\n        let y;\n        let x1 = Math.max((sx0 + tx1) / 2, tox);\n        let x2 = Math.max((sx1 + tx0) / 2, sox);\n\n        if (tox < sox) {\n            if (toy <= soy) {\n                y = Math.min(smy0, toy);\n            } else {\n                y = Math.max(smy1, toy);\n            }\n        } else {\n            if (toy >= soy) {\n                y = Math.min(tmy0, soy);\n            } else {\n                y = Math.max(tmy1, soy);\n            }\n        }\n\n        return [\n            { x: x2, y: soy },\n            { x: x2, y },\n            { x: x1, y },\n            { x: x1, y: toy }\n        ];\n    } else if (sourceSide === 'top' && targetSide === 'right') {\n        if (soy > toy) {\n            if (sox < tox) {\n                let y = (sy0 + ty1) / 2;\n                if (y > tcy && y < tmy1 && sox < tmx0) {\n                    y = tmy0;\n                }\n                return [\n                    { x: sox, y },\n                    { x: tox, y },\n                    { x: tox, y: toy }\n                ];\n            }\n            return [{ x: sox, y: toy }];\n        }\n\n        const x = (sx0 + tx1) / 2;\n\n        if (sox > tox && sy1 >= toy) {\n            return [\n                { x: sox, y: soy },\n                { x, y: soy },\n                { x, y: toy }];\n        }\n\n        if (x > smx0 && soy < ty1) {\n            const y = Math.min(sy0, ty0) - margin;\n            const x = Math.max(sx1, tx1) + margin;\n            return [\n                { x: sox, y },\n                { x, y },\n                { x, y: toy }\n            ];\n        }\n        return [\n            { x: sox, y: soy },\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'top' && targetSide === 'left') {\n        if (soy > toy) {\n            if (sox > tox) {\n                let y = (sy0 + ty1) / 2;\n                if (y > tcy && y < tmy1 && sox > tmx1) {\n                    y = tmy0;\n                }\n                return [\n                    { x: sox, y },\n                    { x: tox, y },\n                    { x: tox, y: toy }\n                ];\n            }\n            return [{ x: sox, y: toy }];\n        }\n\n        const x = (sx1 + tx0) / 2;\n\n        if (sox < tox && sy1 >= toy) {\n            return [\n                { x: sox, y: soy },\n                { x, y: soy },\n                { x, y: toy }];\n        }\n\n        if (x < smx1 && soy < ty1) {\n            const y = Math.min(sy0, ty0) - margin;\n            const x = Math.min(sx0, tx0) - margin;\n            return [\n                { x: sox, y },\n                { x, y },\n                { x, y: toy }\n            ];\n        }\n        return [\n            { x: sox, y: soy },\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'bottom' && targetSide === 'right') {\n        if (soy < toy) {\n            if (sox < tox) {\n                let y = (sy1 + ty0) / 2;\n                if (y < tcy && y > tmy0 && sox < tmx0) {\n                    y = tmy1;\n                }\n                return [\n                    { x: sox, y },\n                    { x: tox, y },\n                    { x: tox, y: toy }\n                ];\n            }\n            return [{ x: sox, y: toy }];\n        } else {\n            if (sx0 < tox) {\n                const y = Math.max(sy1, ty1) + margin;\n                const x = Math.max(sx1, tx1) + margin;\n                return [\n                    { x: sox, y },\n                    { x, y },\n                    { x, y: toy }\n                ];\n            }\n        }\n\n        const x = middleOfVerticalSides;\n\n        return [\n            { x: sox, y: soy },\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'bottom' && targetSide === 'left') {\n        if (soy < toy) {\n            if (sox > tox) {\n                let y = (sy1 + ty0) / 2;\n                if (y < tcy && y > tmy0 && sox > tmx1) {\n                    y = tmy1;\n                }\n                return [\n                    { x: sox, y },\n                    { x: tox, y },\n                    { x: tox, y: toy }\n                ];\n            }\n            return [{ x: sox, y: toy }];\n        } else {\n            if (sx1 > tox) {\n                const y = Math.max(sy1, ty1) + margin;\n                const x = Math.min(sx0, tx0) - margin;\n                return [\n                    { x: sox, y },\n                    { x, y },\n                    { x, y: toy }\n                ];\n            }\n        }\n\n        const x = middleOfVerticalSides;\n\n        return [\n            { x: sox, y: soy },\n            { x, y: soy },\n            { x, y: toy }\n        ];\n    } else if (sourceSide === 'left' && targetSide === 'bottom') {\n        if (sox > tox && soy >= tmy1) {\n            return [{ x: tox, y: soy }];\n        }\n\n        if (sox >= tx1 && soy < toy) {\n            const x = (sx1 + tx0) / 2;\n            return [\n                { x, y: soy },\n                { x, y: toy },\n                { x: tox, y: toy }\n            ];\n        }\n\n        if (tox < sx1 && ty1 <= sy0) {\n            const y = (sy0 + ty1) / 2;\n\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y }\n            ];\n        }\n\n        const x = Math.min(tmx0, sox);\n        const y = Math.max(sy1, ty1) + margin;\n\n        return [\n            { x, y: soy },\n            { x, y },\n            { x: tox, y }\n        ];\n    } else if (sourceSide === 'left' && targetSide === 'top') {\n        if (sox > tox && soy < tmy0) {\n            return [{ x: tox, y: soy }];\n        }\n\n        if (sox >= tx1) {\n            if (soy > toy) {\n                const x = (sx0 + tx1) / 2;\n                return [\n                    { x, y: soy },\n                    { x, y: toy },\n                    { x: tox, y: toy }\n                ];\n            }\n        }\n\n        if (tox <= sx1 && toy > soy) {\n            const y = (ty0 + sy1) / 2;\n\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y },\n            ];\n        }\n\n        const x = toy < soy ? Math.min(sx0, tx0) - margin : smx0;\n        const y = Math.min(sy0, ty0) - margin;\n\n        return [\n            { x, y: soy },\n            { x, y },\n            { x: tox, y }\n        ];\n\n    } else if (sourceSide === 'right' && targetSide === 'top') {\n        if (sox < tox && soy < tmy0) {\n            return [{ x: tox, y: soy }];\n        }\n\n        if (sx1 < tx0 && soy > toy) {\n            let x = (sx1 + tx0) / 2;\n            return [\n                { x, y: soy },\n                { x, y: toy },\n                { x: tox, y: toy }\n            ];\n        }\n\n        if (tox < sox && ty0 > sy1) {\n            const y = (sy1 + ty0) / 2;\n\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y }\n            ];\n        }\n\n        const x = Math.max(sx1, tx1) + margin;\n        const y = Math.min(sy0, ty0) - margin;\n        return [\n            { x, y: soy },\n            { x, y },\n            { x: tox, y }\n        ];\n    } else if (sourceSide === 'right' && targetSide === 'bottom') {\n        if (sox < tox && soy >= tmy1) {\n            return [{ x: tox, y: soy }];\n        }\n\n        if (sox <= tx0 && soy < toy) {\n            const x = (sx1 + tx0) / 2;\n            return [\n                { x, y: soy },\n                { x, y: toy },\n                { x: tox, y: toy }\n            ];\n        }\n\n        if (tox > sx0 && ty1 < sy0) {\n            const y = (sy0 + ty1) / 2;\n\n            return [\n                { x: sox, y: soy },\n                { x: sox, y },\n                { x: tox, y }\n            ];\n        }\n\n        const x = Math.max(tmx1, sox);\n        const y = Math.max(sy1, ty1) + margin;\n\n        return [\n            { x, y: soy },\n            { x, y },\n            { x: tox, y }\n        ];\n    }\n}\n\nrightAngleRouter.Directions = Directions;\n\nexport const rightAngle = rightAngleRouter;\n"],"mappings":"AAAA,OAAO,KAAKA,CAAC,MAAM,gBAAgB;AAEnC,MAAMC,UAAU,GAAG;EACfC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE,QAAQ;EAChBC,WAAW,EAAE,aAAa;EAC1BC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,kBAAkB,GAAG,CAACR,UAAU,CAACE,IAAI,EAAEF,UAAU,CAACG,KAAK,EAAEH,UAAU,CAACI,GAAG,EAAEJ,UAAU,CAACK,MAAM,CAAC;AAEjG,SAASI,6BAA6B,CAACC,UAAU,EAAEC,eAAe,EAAEC,QAAQ,EAAE;EAC1E,MAAMC,OAAO,GAAGD,QAAQ,CAACE,kBAAkB,CAACF,QAAQ,CAACG,qBAAqB,CAACJ,eAAe,CAAC,CAAC;EAC5F,MAAMK,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAACM,KAAK,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;EAE1D,QAAQH,YAAY;IAChB,KAAK,CAAC;IACN,KAAK,GAAG;MACJ,OAAON,UAAU,CAACU,CAAC,GAAGT,eAAe,CAACS,CAAC,GAAGpB,UAAU,CAACI,GAAG,GAAGJ,UAAU,CAACK,MAAM;IAChF,KAAK,EAAE;MACH,OAAOK,UAAU,CAACW,CAAC,GAAGV,eAAe,CAACU,CAAC,GAAGrB,UAAU,CAACE,IAAI,GAAGF,UAAU,CAACG,KAAK;IAChF,KAAK,GAAG;MACJ,OAAOO,UAAU,CAACU,CAAC,GAAGT,eAAe,CAACS,CAAC,GAAGpB,UAAU,CAACI,GAAG,GAAGJ,UAAU,CAACK,MAAM;IAChF,KAAK,GAAG;MACJ,OAAOK,UAAU,CAACW,CAAC,GAAGV,eAAe,CAACU,CAAC,GAAGrB,UAAU,CAACE,IAAI,GAAGF,UAAU,CAACG,KAAK;EAAC;AAEzF;AAEA,SAASmB,gBAAgB,CAACC,SAAS,EAAEC,GAAG,EAAEZ,QAAQ,EAAE;EAChD,MAAMa,MAAM,GAAGD,GAAG,CAACC,MAAM,IAAI,EAAE;EAC/B,IAAI;IAAEC,eAAe,GAAG1B,UAAU,CAACC,IAAI;IAAE0B,eAAe,GAAG3B,UAAU,CAACC;EAAK,CAAC,GAAGuB,GAAG;EAElF,MAAMI,UAAU,GAAGhB,QAAQ,CAACgB,UAAU;EACtC,MAAMC,UAAU,GAAGjB,QAAQ,CAACiB,UAAU;EAEtC,MAAMC,YAAY,GAAG,CAAC,CAAClB,QAAQ,CAACmB,KAAK,CAACC,MAAM,EAAE,CAACC,IAAI;EACnD,MAAMC,YAAY,GAAG,CAAC,CAACtB,QAAQ,CAACmB,KAAK,CAACI,MAAM,EAAE,CAACF,IAAI;EAEnD,IAAIP,eAAe,KAAK1B,UAAU,CAACC,IAAI,EAAE;IACrCyB,eAAe,GAAGI,YAAY,GAAG9B,UAAU,CAACO,WAAW,GAAGP,UAAU,CAACM,WAAW;EACpF;EAEA,IAAIqB,eAAe,KAAK3B,UAAU,CAACC,IAAI,EAAE;IACrC0B,eAAe,GAAGO,YAAY,GAAGlC,UAAU,CAACO,WAAW,GAAGP,UAAU,CAACM,WAAW;EACpF;EAEA,MAAM8B,UAAU,GAAGxB,QAAQ,CAACwB,UAAU;EACtC,MAAMC,UAAU,GAAGzB,QAAQ,CAACyB,UAAU;EACtC,MAAMC,WAAW,GAAG1B,QAAQ,CAAC2B,YAAY;EACzC,MAAMC,WAAW,GAAG5B,QAAQ,CAAC6B,YAAY;EACzC,IAAI;IACApB,CAAC,EAAEqB,GAAG;IACNtB,CAAC,EAAEuB,GAAG;IACNC,KAAK,EAAEC,WAAW,GAAG,CAAC;IACtBC,MAAM,EAAEC,YAAY,GAAG;EAC3B,CAAC,GAAGnB,UAAU,IAAIA,UAAU,CAACG,KAAK,CAACiB,SAAS,EAAE,GAAGjD,CAAC,CAACkD,IAAI,CAACC,aAAa,CAACd,UAAU,EAAER,UAAU,CAACG,KAAK,CAACoB,OAAO,EAAE,CAAC,GAAGvC,QAAQ,CAAC2B,YAAY;EAErI,IAAI;IACAlB,CAAC,EAAE+B,GAAG;IACNhC,CAAC,EAAEiC,GAAG;IACNT,KAAK,EAAEU,WAAW,GAAG,CAAC;IACtBR,MAAM,EAAES,YAAY,GAAG;EAC3B,CAAC,GAAG1B,UAAU,IAAIA,UAAU,CAACE,KAAK,CAACiB,SAAS,EAAE,GAAGjD,CAAC,CAACkD,IAAI,CAACC,aAAa,CAACb,UAAU,EAAER,UAAU,CAACE,KAAK,CAACoB,OAAO,EAAE,CAAC,GAAGvC,QAAQ,CAAC6B,YAAY;EAErI,MAAMe,GAAG,GAAGJ,GAAG,GAAGE,WAAW;EAC7B,MAAMG,GAAG,GAAGJ,GAAG,GAAGE,YAAY;EAC9B,MAAMG,GAAG,GAAGhB,GAAG,GAAGG,WAAW;EAC7B,MAAMc,GAAG,GAAGhB,GAAG,GAAGI,YAAY;;EAE9B;EACA,MAAMa,IAAI,GAAGlB,GAAG,GAAGjB,MAAM;EACzB,MAAMoC,IAAI,GAAGH,GAAG,GAAGjC,MAAM;EACzB,MAAMqC,IAAI,GAAGnB,GAAG,GAAGlB,MAAM;EACzB,MAAMsC,IAAI,GAAGJ,GAAG,GAAGlC,MAAM;EACzB,MAAMuC,IAAI,GAAGZ,GAAG,GAAG3B,MAAM;EACzB,MAAMwC,IAAI,GAAGT,GAAG,GAAG/B,MAAM;EACzB,MAAMyC,IAAI,GAAGb,GAAG,GAAG5B,MAAM;EACzB,MAAM0C,IAAI,GAAGV,GAAG,GAAGhC,MAAM;EAEzB,MAAM2C,kBAAkB,GAAG9B,WAAW,CAAC+B,KAAK,EAAE;EAE9C,IAAIC,UAAU;EAEd,IAAI,CAAC1C,UAAU,EAAE;IACb,MAAM2C,oBAAoB,GAAG,IAAIxE,CAAC,CAACkD,IAAI,CAACP,GAAG,EAAEC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IACvD2B,UAAU,GAAG9D,kBAAkB,CAACgE,QAAQ,CAAC9C,eAAe,CAAC,GAAGA,eAAe,GAAG6C,oBAAoB,CAACE,kBAAkB,CAACjC,WAAW,CAAC;EACtI,CAAC,MAAM,IAAIZ,UAAU,CAACG,KAAK,CAAC2C,MAAM,EAAE,EAAE;IAClCJ,UAAU,GAAG7D,6BAA6B,CAAC+B,WAAW,EAAEF,WAAW,EAAEV,UAAU,CAAC;EACpF,CAAC,MAAM,IAAIF,eAAe,KAAK1B,UAAU,CAACM,WAAW,EAAE;IACnDgE,UAAU,GAAGlC,UAAU,CAACqC,kBAAkB,CAACnC,WAAW,CAAC;EAC3D,CAAC,MAAM,IAAIZ,eAAe,KAAK1B,UAAU,CAACO,WAAW,EAAE;IACnD+D,UAAU,GAAG1C,UAAU,CAACG,KAAK,CAACoB,OAAO,EAAE,CAACsB,kBAAkB,CAACnC,WAAW,CAAC;EAC3E,CAAC,MAAM;IACHgC,UAAU,GAAG5C,eAAe;EAChC;EAEA,QAAQ4C,UAAU;IACd,KAAK,MAAM;MACPF,kBAAkB,CAAC/C,CAAC,GAAGuC,IAAI;MAC3B;IACJ,KAAK,OAAO;MACRQ,kBAAkB,CAAC/C,CAAC,GAAGwC,IAAI;MAC3B;IACJ,KAAK,KAAK;MACNO,kBAAkB,CAAChD,CAAC,GAAG0C,IAAI;MAC3B;IACJ,KAAK,QAAQ;MACTM,kBAAkB,CAAChD,CAAC,GAAG2C,IAAI;MAC3B;EAAM;EAEd,MAAMY,kBAAkB,GAAGnC,WAAW,CAAC6B,KAAK,EAAE;EAG9C,IAAIO,UAAU;EAGd,IAAI,CAAC/C,UAAU,EAAE;IACb,MAAMgD,oBAAoB,GAAG,IAAI9E,CAAC,CAACkD,IAAI,CAACG,GAAG,EAAEC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IACvDuB,UAAU,GAAGpE,kBAAkB,CAACgE,QAAQ,CAAC7C,eAAe,CAAC,GAAGA,eAAe,GAAGkD,oBAAoB,CAACJ,kBAAkB,CAACnC,WAAW,CAAC;EACtI,CAAC,MAAM,IAAIT,UAAU,CAACE,KAAK,CAAC2C,MAAM,EAAE,EAAE;IAClCE,UAAU,GAAGnE,6BAA6B,CAAC6B,WAAW,EAAEE,WAAW,EAAEX,UAAU,CAAC;EACpF,CAAC,MAAM,IAAIF,eAAe,KAAK3B,UAAU,CAACM,WAAW,EAAE;IACnDsE,UAAU,GAAGvC,UAAU,CAACoC,kBAAkB,CAACjC,WAAW,CAAC;EAC3D,CAAC,MAAM,IAAIb,eAAe,KAAK3B,UAAU,CAACO,WAAW,EAAE;IACnDqE,UAAU,GAAG/C,UAAU,CAACE,KAAK,CAACoB,OAAO,EAAE,CAACsB,kBAAkB,CAACjC,WAAW,CAAC;EAC3E,CAAC,MAAM;IACHoC,UAAU,GAAGjD,eAAe;EAChC;EAEA,QAAQiD,UAAU;IACd,KAAK,MAAM;MACPD,kBAAkB,CAACtD,CAAC,GAAG2C,IAAI;MAC3B;IACJ,KAAK,OAAO;MACRW,kBAAkB,CAACtD,CAAC,GAAG4C,IAAI;MAC3B;IACJ,KAAK,KAAK;MACNU,kBAAkB,CAACvD,CAAC,GAAG8C,IAAI;MAC3B;IACJ,KAAK,QAAQ;MACTS,kBAAkB,CAACvD,CAAC,GAAG+C,IAAI;MAC3B;EAAM;EAGd,MAAM;IAAE9C,CAAC,EAAEyD,GAAG;IAAE1D,CAAC,EAAE2D;EAAI,CAAC,GAAGX,kBAAkB;EAC7C,MAAM;IAAE/C,CAAC,EAAE2D,GAAG;IAAE5D,CAAC,EAAE6D;EAAI,CAAC,GAAGN,kBAAkB;EAC7C,MAAMO,GAAG,GAAG,CAAC9B,GAAG,GAAGI,GAAG,IAAI,CAAC;EAC3B,MAAM2B,GAAG,GAAG,CAAC9B,GAAG,GAAGI,GAAG,IAAI,CAAC;EAC3B,MAAM2B,GAAG,GAAG,CAAC1C,GAAG,GAAGgB,GAAG,IAAI,CAAC;EAC3B,MAAM2B,GAAG,GAAG,CAAC1C,GAAG,GAAGgB,GAAG,IAAI,CAAC;EAC3B,MAAM2B,qBAAqB,GAAG,CAACF,GAAG,GAAGF,GAAG,GAAIxB,GAAG,GAAGN,GAAG,GAAKI,GAAG,GAAGd,GAAI,IAAI,CAAC;EACzE,MAAM6C,uBAAuB,GAAG,CAACF,GAAG,GAAGF,GAAG,GAAIxB,GAAG,GAAGN,GAAG,GAAKI,GAAG,GAAGd,GAAI,IAAI,CAAC;EAE3E,IAAI2B,UAAU,KAAK,MAAM,IAAIM,UAAU,KAAK,OAAO,EAAE;IACjD,IAAIhB,IAAI,IAAIJ,GAAG,EAAE;MACb,IAAIpC,CAAC,GAAGmE,uBAAuB;MAC/B,IAAI7B,GAAG,IAAIN,GAAG,EAAE;QACZ,IAAIK,GAAG,IAAIK,IAAI,IAAImB,GAAG,GAAGF,GAAG,EAAE;UAC1B3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAACtB,IAAI,EAAEJ,IAAI,CAAC;QAC5B,CAAC,MAAM,IAAIT,GAAG,IAAIU,IAAI,IAAIkB,GAAG,IAAIF,GAAG,EAAE;UAClC3D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAACtB,IAAI,EAAEJ,IAAI,CAAC;QAC5B;MACJ;MACA,OAAO,CACH;QAAE1C,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IAEA,MAAM5D,CAAC,GAAG,CAACyD,GAAG,GAAGE,GAAG,IAAI,CAAC;IACzB,OAAO,CACH;MAAE3D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,OAAO,IAAIM,UAAU,KAAK,MAAM,EAAE;IACxD,IAAIf,IAAI,IAAIT,GAAG,EAAE;MACb,IAAIhC,CAAC,GAAGmE,uBAAuB;MAC/B,IAAIT,GAAG,GAAGtB,GAAG,EAAE;QACX,IAAIC,GAAG,IAAIK,IAAI,IAAImB,GAAG,GAAGF,GAAG,EAAE;UAC1B3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAACtB,IAAI,EAAEJ,IAAI,CAAC;QAC5B,CAAC,MAAM,IAAIT,GAAG,IAAIU,IAAI,IAAIkB,GAAG,IAAIF,GAAG,EAAE;UAClC3D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAACtB,IAAI,EAAEJ,IAAI,CAAC;QAC5B;MACJ;MAEA,OAAO,CACH;QAAE1C,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IAEA,MAAM5D,CAAC,GAAG,CAACyD,GAAG,GAAGE,GAAG,IAAI,CAAC;IACzB,OAAO,CACH;MAAE3D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,KAAK,IAAIM,UAAU,KAAK,QAAQ,EAAE;IACxD,IAAIG,GAAG,GAAGE,GAAG,EAAE;MACX,IAAI5D,CAAC,GAAGiE,qBAAqB;MAC7B,IAAIlE,CAAC,GAAG2D,GAAG;MAEX,IAAIA,GAAG,GAAG1B,GAAG,EAAE;QACX,IAAIG,GAAG,IAAII,IAAI,IAAIoB,GAAG,GAAGF,GAAG,EAAE;UAC1BzD,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACxB,IAAI,EAAEJ,IAAI,CAAC;QAC5B,CAAC,MAAM,IAAIR,GAAG,IAAIS,IAAI,IAAImB,GAAG,IAAIF,GAAG,EAAE;UAClCzD,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACxB,IAAI,EAAEJ,IAAI,CAAC;QAC5B;MACJ;MAEA,OAAO,CACH;QAAExC,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC;QAAED;MAAE,CAAC,EACR;QAAEC,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,EACb;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IACA,MAAM7D,CAAC,GAAG,CAAC2D,GAAG,GAAGE,GAAG,IAAI,CAAC;IACzB,OAAO,CACH;MAAE5D,CAAC,EAAEyD,GAAG;MAAE1D;IAAE,CAAC,EACb;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EACL,CAAC,MAAM,IAAIkD,UAAU,KAAK,QAAQ,IAAIM,UAAU,KAAK,KAAK,EAAE;IACxD,IAAIG,GAAG,GAAGtD,MAAM,GAAGwD,GAAG,EAAE;MACpB,IAAI5D,CAAC,GAAGiE,qBAAqB;MAC7B,IAAIlE,CAAC,GAAG2D,GAAG;MAEX,IAAIA,GAAG,GAAGtB,GAAG,EAAE;QACX,IAAID,GAAG,IAAII,IAAI,IAAIoB,GAAG,GAAGF,GAAG,EAAE;UAC1BzD,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACxB,IAAI,EAAEJ,IAAI,CAAC;QAC5B,CAAC,MAAM,IAAIR,GAAG,IAAIS,IAAI,IAAImB,GAAG,IAAIF,GAAG,EAAE;UAClCzD,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACxB,IAAI,EAAEJ,IAAI,CAAC;QAC5B;MACJ;MAEA,OAAO,CACH;QAAExC,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC;QAAED;MAAE,CAAC,EACR;QAAEC,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,EACb;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IACA,MAAM7D,CAAC,GAAG,CAAC2D,GAAG,GAAGE,GAAG,IAAI,CAAC;IACzB,OAAO,CACH;MAAE5D,CAAC,EAAEyD,GAAG;MAAE1D;IAAE,CAAC,EACb;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EACL,CAAC,MAAM,IAAIkD,UAAU,KAAK,KAAK,IAAIM,UAAU,KAAK,KAAK,EAAE;IACrD,IAAIvD,CAAC;IACL,IAAIqE,EAAE,GAAGzE,IAAI,CAACuE,GAAG,CAAC,CAAC7B,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE4B,GAAG,CAAC;IACvC,IAAIU,EAAE,GAAG1E,IAAI,CAACuE,GAAG,CAAC,CAAC7C,GAAG,GAAGc,GAAG,IAAI,CAAC,EAAEsB,GAAG,CAAC;IAEvC,IAAIE,GAAG,GAAGF,GAAG,EAAE;MACX,IAAID,GAAG,IAAIb,IAAI,IAAIa,GAAG,IAAId,IAAI,EAAE;QAC5B,OAAO,CACH;UAAE3C,CAAC,EAAEyD,GAAG;UAAE1D,CAAC,EAAEH,IAAI,CAACuE,GAAG,CAACT,GAAG,EAACE,GAAG;QAAE,CAAC,EAChC;UAAE5D,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAEH,IAAI,CAACuE,GAAG,CAACT,GAAG,EAACE,GAAG;QAAE,CAAC,CACnC;MACL,CAAC,MAAM,IAAID,GAAG,GAAGF,GAAG,EAAE;QAClBzD,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACV,GAAG,EAAEd,IAAI,CAAC;MAC3B,CAAC,MAAM;QACH3C,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACX,GAAG,EAAEb,IAAI,CAAC;MAC3B;IACJ,CAAC,MAAM;MACH,IAAIe,GAAG,IAAInB,IAAI,IAAImB,GAAG,IAAIpB,IAAI,EAAE;QAC5B,OAAO,CACH;UAAEvC,CAAC,EAAEyD,GAAG;UAAE1D,CAAC,EAAEH,IAAI,CAACuE,GAAG,CAACT,GAAG,EAACE,GAAG;QAAE,CAAC,EAChC;UAAE5D,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAEH,IAAI,CAACuE,GAAG,CAACT,GAAG,EAACE,GAAG;QAAE,CAAC,CACnC;MACL,CAAC,MAAM,IAAID,GAAG,IAAIF,GAAG,EAAE;QACnBzD,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACT,GAAG,EAAEnB,IAAI,CAAC;MAC3B,CAAC,MAAM;QACHxC,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACR,GAAG,EAAEpB,IAAI,CAAC;MAC3B;IACJ;IAEA,OAAO,CACH;MAAEvC,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAEuE;IAAG,CAAC,EACjB;MAAEtE,CAAC;MAAED,CAAC,EAAEuE;IAAG,CAAC,EACZ;MAAEtE,CAAC;MAAED,CAAC,EAAEsE;IAAG,CAAC,EACZ;MAAErE,CAAC,EAAE2D,GAAG;MAAE5D,CAAC,EAAEsE;IAAG,CAAC,CACpB;EACL,CAAC,MAAM,IAAIpB,UAAU,KAAK,QAAQ,IAAIM,UAAU,KAAK,QAAQ,EAAE;IAC3D,IAAIxB,GAAG,IAAI0B,GAAG,GAAGrD,MAAM,IAAI+B,GAAG,IAAIsB,GAAG,GAAGrD,MAAM,EAAE;MAC5C,OAAO,CACH;QAAEJ,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAEH,IAAI,CAACwE,GAAG,CAACV,GAAG,EAAEE,GAAG;MAAE,CAAC,EACjC;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAEH,IAAI,CAACwE,GAAG,CAACV,GAAG,EAAEE,GAAG;MAAE,CAAC,CACpC;IACL;IAEA,IAAI5D,CAAC;IACL,IAAIqE,EAAE;IACN,IAAIC,EAAE;IAEN,IAAIV,GAAG,GAAGF,GAAG,EAAE;MACXW,EAAE,GAAGzE,IAAI,CAACwE,GAAG,CAAC,CAAC9B,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE4B,GAAG,CAAC;MACnCU,EAAE,GAAG1E,IAAI,CAACwE,GAAG,CAAC,CAAC9B,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE0B,GAAG,CAAC;MAEnC,IAAIC,GAAG,GAAGF,GAAG,EAAE;QACXzD,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACV,GAAG,EAAEd,IAAI,CAAC;MAC3B,CAAC,MAAM;QACH3C,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACX,GAAG,EAAEb,IAAI,CAAC;MAC3B;IACJ,CAAC,MAAM;MACHyB,EAAE,GAAGzE,IAAI,CAACwE,GAAG,CAAC,CAAC9C,GAAG,GAAGc,GAAG,IAAI,CAAC,EAAEwB,GAAG,CAAC;MACnCU,EAAE,GAAG1E,IAAI,CAACwE,GAAG,CAAC,CAAC9C,GAAG,GAAGc,GAAG,IAAI,CAAC,EAAEsB,GAAG,CAAC;MAEnC,IAAIC,GAAG,GAAGF,GAAG,EAAE;QACXzD,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACR,GAAG,EAAEpB,IAAI,CAAC;MAC3B,CAAC,MAAM;QACHvC,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACT,GAAG,EAAEnB,IAAI,CAAC;MAC3B;IACJ;IAEA,OAAO,CACH;MAAExC,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAEuE;IAAG,CAAC,EACjB;MAAEtE,CAAC;MAAED,CAAC,EAAEuE;IAAG,CAAC,EACZ;MAAEtE,CAAC;MAAED,CAAC,EAAEsE;IAAG,CAAC,EACZ;MAAErE,CAAC,EAAE2D,GAAG;MAAE5D,CAAC,EAAEsE;IAAG,CAAC,CACpB;EACL,CAAC,MAAM,IAAIpB,UAAU,KAAK,MAAM,IAAIM,UAAU,KAAK,MAAM,EAAE;IACvD,IAAIxD,CAAC;IACL,IAAIwE,EAAE,GAAG3E,IAAI,CAACuE,GAAG,CAAC,CAAC9B,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE4B,GAAG,CAAC;IACvC,IAAIa,EAAE,GAAG5E,IAAI,CAACuE,GAAG,CAAC,CAAC9C,GAAG,GAAGc,GAAG,IAAI,CAAC,EAAEsB,GAAG,CAAC;IAEvC,IAAIE,GAAG,GAAGF,GAAG,EAAE;MACX,IAAIG,GAAG,IAAIF,GAAG,EAAE;QACZ3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC1B,IAAI,EAAEmB,GAAG,CAAC;MAC3B,CAAC,MAAM;QACH7D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC1B,IAAI,EAAEkB,GAAG,CAAC;MAC3B;IACJ,CAAC,MAAM;MACH,IAAIA,GAAG,IAAIF,GAAG,EAAE;QACZ3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAACtB,IAAI,EAAEa,GAAG,CAAC;MAC3B,CAAC,MAAM;QACH3D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAACtB,IAAI,EAAEY,GAAG,CAAC;MAC3B;IACJ;IAEA,OAAO,CACH;MAAE1D,CAAC,EAAEwE,EAAE;MAAEzE,CAAC,EAAE2D;IAAI,CAAC,EACjB;MAAE1D,CAAC,EAAEwE,EAAE;MAAEzE;IAAE,CAAC,EACZ;MAAEC,CAAC,EAAEuE,EAAE;MAAExE;IAAE,CAAC,EACZ;MAAEC,CAAC,EAAEuE,EAAE;MAAExE,CAAC,EAAE6D;IAAI,CAAC,CACpB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,OAAO,IAAIM,UAAU,KAAK,OAAO,EAAE;IACzD,IAAIxD,CAAC;IACL,IAAIwE,EAAE,GAAG3E,IAAI,CAACwE,GAAG,CAAC,CAAC/C,GAAG,GAAGc,GAAG,IAAI,CAAC,EAAEwB,GAAG,CAAC;IACvC,IAAIa,EAAE,GAAG5E,IAAI,CAACwE,GAAG,CAAC,CAAC/B,GAAG,GAAGN,GAAG,IAAI,CAAC,EAAE0B,GAAG,CAAC;IAEvC,IAAIE,GAAG,GAAGF,GAAG,EAAE;MACX,IAAIG,GAAG,IAAIF,GAAG,EAAE;QACZ3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC1B,IAAI,EAAEmB,GAAG,CAAC;MAC3B,CAAC,MAAM;QACH7D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC1B,IAAI,EAAEkB,GAAG,CAAC;MAC3B;IACJ,CAAC,MAAM;MACH,IAAIA,GAAG,IAAIF,GAAG,EAAE;QACZ3D,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAACtB,IAAI,EAAEa,GAAG,CAAC;MAC3B,CAAC,MAAM;QACH3D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAACtB,IAAI,EAAEY,GAAG,CAAC;MAC3B;IACJ;IAEA,OAAO,CACH;MAAE1D,CAAC,EAAEwE,EAAE;MAAEzE,CAAC,EAAE2D;IAAI,CAAC,EACjB;MAAE1D,CAAC,EAAEwE,EAAE;MAAEzE;IAAE,CAAC,EACZ;MAAEC,CAAC,EAAEuE,EAAE;MAAExE;IAAE,CAAC,EACZ;MAAEC,CAAC,EAAEuE,EAAE;MAAExE,CAAC,EAAE6D;IAAI,CAAC,CACpB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,KAAK,IAAIM,UAAU,KAAK,OAAO,EAAE;IACvD,IAAIG,GAAG,GAAGE,GAAG,EAAE;MACX,IAAIH,GAAG,GAAGE,GAAG,EAAE;QACX,IAAI5D,CAAC,GAAG,CAACuB,GAAG,GAAGc,GAAG,IAAI,CAAC;QACvB,IAAIrC,CAAC,GAAG+D,GAAG,IAAI/D,CAAC,GAAG+C,IAAI,IAAIW,GAAG,GAAGd,IAAI,EAAE;UACnC5C,CAAC,GAAG8C,IAAI;QACZ;QACA,OAAO,CACH;UAAE7C,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAE6D;QAAI,CAAC,CACrB;MACL;MACA,OAAO,CAAC;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE6D;MAAI,CAAC,CAAC;IAC/B;IAEA,MAAM5D,CAAC,GAAG,CAACqB,GAAG,GAAGc,GAAG,IAAI,CAAC;IAEzB,IAAIsB,GAAG,GAAGE,GAAG,IAAIrB,GAAG,IAAIsB,GAAG,EAAE;MACzB,OAAO,CACH;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC;QAAED,CAAC,EAAE2D;MAAI,CAAC,EACb;QAAE1D,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,CAAC;IACtB;IAEA,IAAI5D,CAAC,GAAGuC,IAAI,IAAImB,GAAG,GAAGtB,GAAG,EAAE;MACvB,MAAMrC,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC7C,GAAG,EAAEU,GAAG,CAAC,GAAG5B,MAAM;MACrC,MAAMJ,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAAC/B,GAAG,EAAEF,GAAG,CAAC,GAAG/B,MAAM;MACrC,OAAO,CACH;QAAEJ,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC;QAAED;MAAE,CAAC,EACR;QAAEC,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,CAChB;IACL;IACA,OAAO,CACH;MAAE5D,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAE2D;IAAI,CAAC,EAClB;MAAE1D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,KAAK,IAAIM,UAAU,KAAK,MAAM,EAAE;IACtD,IAAIG,GAAG,GAAGE,GAAG,EAAE;MACX,IAAIH,GAAG,GAAGE,GAAG,EAAE;QACX,IAAI5D,CAAC,GAAG,CAACuB,GAAG,GAAGc,GAAG,IAAI,CAAC;QACvB,IAAIrC,CAAC,GAAG+D,GAAG,IAAI/D,CAAC,GAAG+C,IAAI,IAAIW,GAAG,GAAGb,IAAI,EAAE;UACnC7C,CAAC,GAAG8C,IAAI;QACZ;QACA,OAAO,CACH;UAAE7C,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAE6D;QAAI,CAAC,CACrB;MACL;MACA,OAAO,CAAC;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE6D;MAAI,CAAC,CAAC;IAC/B;IAEA,MAAM5D,CAAC,GAAG,CAACqC,GAAG,GAAGN,GAAG,IAAI,CAAC;IAEzB,IAAI0B,GAAG,GAAGE,GAAG,IAAIrB,GAAG,IAAIsB,GAAG,EAAE;MACzB,OAAO,CACH;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC;QAAED,CAAC,EAAE2D;MAAI,CAAC,EACb;QAAE1D,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,CAAC;IACtB;IAEA,IAAI5D,CAAC,GAAGwC,IAAI,IAAIkB,GAAG,GAAGtB,GAAG,EAAE;MACvB,MAAMrC,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC7C,GAAG,EAAEU,GAAG,CAAC,GAAG5B,MAAM;MACrC,MAAMJ,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAAC9C,GAAG,EAAEU,GAAG,CAAC,GAAG3B,MAAM;MACrC,OAAO,CACH;QAAEJ,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC;QAAED;MAAE,CAAC,EACR;QAAEC,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,CAChB;IACL;IACA,OAAO,CACH;MAAE5D,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAE2D;IAAI,CAAC,EAClB;MAAE1D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,QAAQ,IAAIM,UAAU,KAAK,OAAO,EAAE;IAC1D,IAAIG,GAAG,GAAGE,GAAG,EAAE;MACX,IAAIH,GAAG,GAAGE,GAAG,EAAE;QACX,IAAI5D,CAAC,GAAG,CAACuC,GAAG,GAAGN,GAAG,IAAI,CAAC;QACvB,IAAIjC,CAAC,GAAG+D,GAAG,IAAI/D,CAAC,GAAG8C,IAAI,IAAIY,GAAG,GAAGd,IAAI,EAAE;UACnC5C,CAAC,GAAG+C,IAAI;QACZ;QACA,OAAO,CACH;UAAE9C,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAE6D;QAAI,CAAC,CACrB;MACL;MACA,OAAO,CAAC;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE6D;MAAI,CAAC,CAAC;IAC/B,CAAC,MAAM;MACH,IAAIvC,GAAG,GAAGsC,GAAG,EAAE;QACX,MAAM5D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC9B,GAAG,EAAEF,GAAG,CAAC,GAAGhC,MAAM;QACrC,MAAMJ,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAAC/B,GAAG,EAAEF,GAAG,CAAC,GAAG/B,MAAM;QACrC,OAAO,CACH;UAAEJ,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC;UAAED;QAAE,CAAC,EACR;UAAEC,CAAC;UAAED,CAAC,EAAE6D;QAAI,CAAC,CAChB;MACL;IACJ;IAEA,MAAM5D,CAAC,GAAGiE,qBAAqB;IAE/B,OAAO,CACH;MAAEjE,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAE2D;IAAI,CAAC,EAClB;MAAE1D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,QAAQ,IAAIM,UAAU,KAAK,MAAM,EAAE;IACzD,IAAIG,GAAG,GAAGE,GAAG,EAAE;MACX,IAAIH,GAAG,GAAGE,GAAG,EAAE;QACX,IAAI5D,CAAC,GAAG,CAACuC,GAAG,GAAGN,GAAG,IAAI,CAAC;QACvB,IAAIjC,CAAC,GAAG+D,GAAG,IAAI/D,CAAC,GAAG8C,IAAI,IAAIY,GAAG,GAAGb,IAAI,EAAE;UACnC7C,CAAC,GAAG+C,IAAI;QACZ;QACA,OAAO,CACH;UAAE9C,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D;QAAE,CAAC,EACb;UAAEC,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAE6D;QAAI,CAAC,CACrB;MACL;MACA,OAAO,CAAC;QAAE5D,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE6D;MAAI,CAAC,CAAC;IAC/B,CAAC,MAAM;MACH,IAAIvB,GAAG,GAAGsB,GAAG,EAAE;QACX,MAAM5D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC9B,GAAG,EAAEF,GAAG,CAAC,GAAGhC,MAAM;QACrC,MAAMJ,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAAC9C,GAAG,EAAEU,GAAG,CAAC,GAAG3B,MAAM;QACrC,OAAO,CACH;UAAEJ,CAAC,EAAEyD,GAAG;UAAE1D;QAAE,CAAC,EACb;UAAEC,CAAC;UAAED;QAAE,CAAC,EACR;UAAEC,CAAC;UAAED,CAAC,EAAE6D;QAAI,CAAC,CAChB;MACL;IACJ;IAEA,MAAM5D,CAAC,GAAGiE,qBAAqB;IAE/B,OAAO,CACH;MAAEjE,CAAC,EAAEyD,GAAG;MAAE1D,CAAC,EAAE2D;IAAI,CAAC,EAClB;MAAE1D,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED,CAAC,EAAE6D;IAAI,CAAC,CAChB;EACL,CAAC,MAAM,IAAIX,UAAU,KAAK,MAAM,IAAIM,UAAU,KAAK,QAAQ,EAAE;IACzD,IAAIE,GAAG,GAAGE,GAAG,IAAID,GAAG,IAAIZ,IAAI,EAAE;MAC1B,OAAO,CAAC;QAAE9C,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE2D;MAAI,CAAC,CAAC;IAC/B;IAEA,IAAID,GAAG,IAAItB,GAAG,IAAIuB,GAAG,GAAGE,GAAG,EAAE;MACzB,MAAM5D,CAAC,GAAG,CAACqC,GAAG,GAAGN,GAAG,IAAI,CAAC;MACzB,OAAO,CACH;QAAE/B,CAAC;QAAED,CAAC,EAAE2D;MAAI,CAAC,EACb;QAAE1D,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,EACb;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IAEA,IAAID,GAAG,GAAGtB,GAAG,IAAID,GAAG,IAAId,GAAG,EAAE;MACzB,MAAMvB,CAAC,GAAG,CAACuB,GAAG,GAAGc,GAAG,IAAI,CAAC;MAEzB,OAAO,CACH;QAAEpC,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,CAChB;IACL;IAEA,MAAMC,CAAC,GAAGJ,IAAI,CAACuE,GAAG,CAACxB,IAAI,EAAEc,GAAG,CAAC;IAC7B,MAAM1D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC9B,GAAG,EAAEF,GAAG,CAAC,GAAGhC,MAAM;IAErC,OAAO,CACH;MAAEJ,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED;IAAE,CAAC,EACR;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EACL,CAAC,MAAM,IAAIkD,UAAU,KAAK,MAAM,IAAIM,UAAU,KAAK,KAAK,EAAE;IACtD,IAAIE,GAAG,GAAGE,GAAG,IAAID,GAAG,GAAGb,IAAI,EAAE;MACzB,OAAO,CAAC;QAAE7C,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE2D;MAAI,CAAC,CAAC;IAC/B;IAEA,IAAID,GAAG,IAAItB,GAAG,EAAE;MACZ,IAAIuB,GAAG,GAAGE,GAAG,EAAE;QACX,MAAM5D,CAAC,GAAG,CAACqB,GAAG,GAAGc,GAAG,IAAI,CAAC;QACzB,OAAO,CACH;UAAEnC,CAAC;UAAED,CAAC,EAAE2D;QAAI,CAAC,EACb;UAAE1D,CAAC;UAAED,CAAC,EAAE6D;QAAI,CAAC,EACb;UAAE5D,CAAC,EAAE2D,GAAG;UAAE5D,CAAC,EAAE6D;QAAI,CAAC,CACrB;MACL;IACJ;IAEA,IAAID,GAAG,IAAItB,GAAG,IAAIuB,GAAG,GAAGF,GAAG,EAAE;MACzB,MAAM3D,CAAC,GAAG,CAACiC,GAAG,GAAGM,GAAG,IAAI,CAAC;MAEzB,OAAO,CACH;QAAEtC,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,CAChB;IACL;IAEA,MAAMC,CAAC,GAAG4D,GAAG,GAAGF,GAAG,GAAG9D,IAAI,CAACuE,GAAG,CAAC9C,GAAG,EAAEU,GAAG,CAAC,GAAG3B,MAAM,GAAGmC,IAAI;IACxD,MAAMxC,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC7C,GAAG,EAAEU,GAAG,CAAC,GAAG5B,MAAM;IAErC,OAAO,CACH;MAAEJ,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED;IAAE,CAAC,EACR;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EAEL,CAAC,MAAM,IAAIkD,UAAU,KAAK,OAAO,IAAIM,UAAU,KAAK,KAAK,EAAE;IACvD,IAAIE,GAAG,GAAGE,GAAG,IAAID,GAAG,GAAGb,IAAI,EAAE;MACzB,OAAO,CAAC;QAAE7C,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE2D;MAAI,CAAC,CAAC;IAC/B;IAEA,IAAIrB,GAAG,GAAGN,GAAG,IAAI2B,GAAG,GAAGE,GAAG,EAAE;MACxB,IAAI5D,CAAC,GAAG,CAACqC,GAAG,GAAGN,GAAG,IAAI,CAAC;MACvB,OAAO,CACH;QAAE/B,CAAC;QAAED,CAAC,EAAE2D;MAAI,CAAC,EACb;QAAE1D,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,EACb;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IAEA,IAAID,GAAG,GAAGF,GAAG,IAAIzB,GAAG,GAAGM,GAAG,EAAE;MACxB,MAAMvC,CAAC,GAAG,CAACuC,GAAG,GAAGN,GAAG,IAAI,CAAC;MAEzB,OAAO,CACH;QAAEhC,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,CAChB;IACL;IAEA,MAAMC,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAAC/B,GAAG,EAAEF,GAAG,CAAC,GAAG/B,MAAM;IACrC,MAAML,CAAC,GAAGH,IAAI,CAACuE,GAAG,CAAC7C,GAAG,EAAEU,GAAG,CAAC,GAAG5B,MAAM;IACrC,OAAO,CACH;MAAEJ,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED;IAAE,CAAC,EACR;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EACL,CAAC,MAAM,IAAIkD,UAAU,KAAK,OAAO,IAAIM,UAAU,KAAK,QAAQ,EAAE;IAC1D,IAAIE,GAAG,GAAGE,GAAG,IAAID,GAAG,IAAIZ,IAAI,EAAE;MAC1B,OAAO,CAAC;QAAE9C,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE2D;MAAI,CAAC,CAAC;IAC/B;IAEA,IAAID,GAAG,IAAI1B,GAAG,IAAI2B,GAAG,GAAGE,GAAG,EAAE;MACzB,MAAM5D,CAAC,GAAG,CAACqC,GAAG,GAAGN,GAAG,IAAI,CAAC;MACzB,OAAO,CACH;QAAE/B,CAAC;QAAED,CAAC,EAAE2D;MAAI,CAAC,EACb;QAAE1D,CAAC;QAAED,CAAC,EAAE6D;MAAI,CAAC,EACb;QAAE5D,CAAC,EAAE2D,GAAG;QAAE5D,CAAC,EAAE6D;MAAI,CAAC,CACrB;IACL;IAEA,IAAID,GAAG,GAAGtC,GAAG,IAAIe,GAAG,GAAGd,GAAG,EAAE;MACxB,MAAMvB,CAAC,GAAG,CAACuB,GAAG,GAAGc,GAAG,IAAI,CAAC;MAEzB,OAAO,CACH;QAAEpC,CAAC,EAAEyD,GAAG;QAAE1D,CAAC,EAAE2D;MAAI,CAAC,EAClB;QAAE1D,CAAC,EAAEyD,GAAG;QAAE1D;MAAE,CAAC,EACb;QAAEC,CAAC,EAAE2D,GAAG;QAAE5D;MAAE,CAAC,CAChB;IACL;IAEA,MAAMC,CAAC,GAAGJ,IAAI,CAACwE,GAAG,CAACxB,IAAI,EAAEa,GAAG,CAAC;IAC7B,MAAM1D,CAAC,GAAGH,IAAI,CAACwE,GAAG,CAAC9B,GAAG,EAAEF,GAAG,CAAC,GAAGhC,MAAM;IAErC,OAAO,CACH;MAAEJ,CAAC;MAAED,CAAC,EAAE2D;IAAI,CAAC,EACb;MAAE1D,CAAC;MAAED;IAAE,CAAC,EACR;MAAEC,CAAC,EAAE2D,GAAG;MAAE5D;IAAE,CAAC,CAChB;EACL;AACJ;AAEAE,gBAAgB,CAACtB,UAAU,GAAGA,UAAU;AAExC,OAAO,MAAM8F,UAAU,GAAGxE,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}