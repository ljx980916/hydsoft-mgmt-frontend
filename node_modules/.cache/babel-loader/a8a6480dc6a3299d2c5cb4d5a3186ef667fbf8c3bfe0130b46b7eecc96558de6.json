{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @fileoverview 事件处理器\n * @author dxq613@gmail.com\n */\nimport GraphEvent from './graph-event';\nimport { each, isParent } from '../util/util';\nvar CLICK_OFFSET = 40;\nvar LEFT_BTN_CODE = 0;\nvar DELEGATION_SPLIT = ':';\nvar EVENTS = ['mousedown', 'mouseup', 'dblclick', 'mouseout', 'mouseover', 'mousemove', 'mouseleave', 'mouseenter', 'touchstart', 'touchmove', 'touchend', 'dragenter', 'dragover', 'dragleave', 'drop', 'contextmenu', 'mousewheel'];\n// 是否有委托事件监听\nfunction hasDelegation(events, type) {\n  for (var key in events) {\n    if (events.hasOwnProperty(key) && key.indexOf(DELEGATION_SPLIT + type) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n// 触发目标事件，目标只能是 shape 或 canvas\nfunction emitTargetEvent(target, type, eventObj) {\n  eventObj.name = type;\n  eventObj.target = target;\n  eventObj.currentTarget = target;\n  eventObj.delegateTarget = target;\n  target.emit(type, eventObj);\n}\n// 事件冒泡, enter 和 leave 需要对 fromShape 和 toShape 进行判同\nfunction bubbleEvent(container, type, eventObj) {\n  if (eventObj.bubbles) {\n    var relativeShape = void 0;\n    var isOverEvent = false;\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n      isOverEvent = true;\n    } else if (type === 'mouseleave') {\n      isOverEvent = true;\n      relativeShape = eventObj.toShape;\n    }\n    // canvas 上的 mouseenter， mouseleave 事件，仅当进入或者移出 canvas 时触发\n    if (container.isCanvas() && isOverEvent) {\n      return;\n    }\n    // 如果相关图形同当前图形在同一个容器内，不触发事件\n    if (relativeShape && isParent(container, relativeShape)) {\n      // 阻止继续向上冒泡\n      eventObj.bubbles = false;\n      return;\n    }\n    // 事件名称可能在委托过程中被修改，因此事件冒泡时需要重新设置事件名称\n    eventObj.name = type;\n    eventObj.currentTarget = container;\n    eventObj.delegateTarget = container;\n    container.emit(type, eventObj);\n  }\n}\nvar EventController = /** @class */function () {\n  function EventController(cfg) {\n    var _this = this;\n    // 正在被拖拽的图形\n    this.draggingShape = null;\n    this.dragging = false;\n    // 当前鼠标/touch所在位置的图形\n    this.currentShape = null;\n    this.mousedownShape = null;\n    this.mousedownPoint = null;\n    // 统一处理所有的回调\n    this._eventCallback = function (ev) {\n      var type = ev.type;\n      _this._triggerEvent(type, ev);\n    };\n    // 在 document 处理拖拽到画布外的事件，处理从图形上移除画布未被捕捉的问题\n    this._onDocumentMove = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging || _this.currentShape) {\n          var pointInfo = _this._getPointInfo(ev);\n          // 还在拖拽过程中\n          if (_this.dragging) {\n            _this._emitEvent('drag', ev, pointInfo, _this.draggingShape);\n          }\n          // 说明从某个图形直接移动到了画布外面，\n          // 修复了 mouseleave 的 bug 后不再出现这种情况\n          // if (this.currentShape) {\n          //   this._emitEvent('mouseleave', ev, pointInfo, this.currentShape, this.currentShape, null);\n          //   this.currentShape = null;\n          // }\n        }\n      }\n    };\n    // 在 document 上处理拖拽到外面，释放鼠标时触发 dragend\n    this._onDocumentMouseUp = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging) {\n          var pointInfo = _this._getPointInfo(ev);\n          if (_this.draggingShape) {\n            // 如果存在拖拽的图形，则也触发 drop 事件\n            _this._emitEvent('drop', ev, pointInfo, null);\n          }\n          _this._emitEvent('dragend', ev, pointInfo, _this.draggingShape);\n          _this._afterDrag(_this.draggingShape, pointInfo, ev);\n        }\n      }\n    };\n    this.canvas = cfg.canvas;\n  }\n  EventController.prototype.init = function () {\n    this._bindEvents();\n  };\n  // 注册事件\n  EventController.prototype._bindEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.addEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      // 处理移动到外面没有触发 shape mouse leave 的事件\n      // 处理拖拽到外部的问题\n      document.addEventListener('mousemove', this._onDocumentMove);\n      // 处理拖拽过程中在外部释放鼠标的问题\n      document.addEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  // 清理事件\n  EventController.prototype._clearEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.removeEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      document.removeEventListener('mousemove', this._onDocumentMove);\n      document.removeEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  EventController.prototype._getEventObj = function (type, event, point, target, fromShape, toShape) {\n    var eventObj = new GraphEvent(type, event);\n    eventObj.fromShape = fromShape;\n    eventObj.toShape = toShape;\n    eventObj.x = point.x;\n    eventObj.y = point.y;\n    eventObj.clientX = point.clientX;\n    eventObj.clientY = point.clientY;\n    eventObj.propagationPath.push(target);\n    // 事件的x,y应该是基于画布左上角的，与canvas的matrix无关\n    return eventObj;\n  };\n  // 根据点获取图形，提取成独立方法，便于后续优化\n  EventController.prototype._getShape = function (point, ev) {\n    return this.canvas.getShape(point.x, point.y, ev);\n  };\n  // 获取事件的当前点的信息\n  EventController.prototype._getPointInfo = function (ev) {\n    var canvas = this.canvas;\n    var clientPoint = canvas.getClientByEvent(ev);\n    var point = canvas.getPointByEvent(ev);\n    return {\n      x: point.x,\n      y: point.y,\n      clientX: clientPoint.x,\n      clientY: clientPoint.y\n    };\n  };\n  // 触发事件\n  EventController.prototype._triggerEvent = function (type, ev) {\n    var pointInfo = this._getPointInfo(ev);\n    // 每次都获取图形有一定成本，后期可以考虑进行缓存策略\n    var shape = this._getShape(pointInfo, ev);\n    var method = this[\"_on\" + type];\n    var leaveCanvas = false;\n    if (method) {\n      method.call(this, pointInfo, shape, ev);\n    } else {\n      var preShape = this.currentShape;\n      // 如果进入、移出画布时存在图形，则要分别触发事件\n      if (type === 'mouseenter' || type === 'dragenter' || type === 'mouseover') {\n        this._emitEvent(type, ev, pointInfo, null, null, shape); // 先进入画布\n        if (shape) {\n          this._emitEvent(type, ev, pointInfo, shape, null, shape); // 再触发图形的事件\n        }\n\n        if (type === 'mouseenter' && this.draggingShape) {\n          // 如果正在拖拽图形, 则触发 dragleave\n          this._emitEvent('dragenter', ev, pointInfo, null);\n        }\n      } else if (type === 'mouseleave' || type === 'dragleave' || type === 'mouseout') {\n        leaveCanvas = true;\n        if (preShape) {\n          this._emitEvent(type, ev, pointInfo, preShape, preShape, null); // 先触发图形的事件\n        }\n\n        this._emitEvent(type, ev, pointInfo, null, preShape, null); // 再触发离开画布事件\n        if (type === 'mouseleave' && this.draggingShape) {\n          this._emitEvent('dragleave', ev, pointInfo, null);\n        }\n      } else {\n        this._emitEvent(type, ev, pointInfo, shape, null, null); // 一般事件中不需要考虑 from, to\n      }\n    }\n\n    if (!leaveCanvas) {\n      this.currentShape = shape;\n    }\n    // 当鼠标从画布移动到 shape 或者从 preShape 移动到 shape 时，应用 shape 上的鼠标样式\n    if (shape && !shape.get('destroyed')) {\n      var canvas = this.canvas;\n      var el = canvas.get('el');\n      el.style.cursor = shape.attr('cursor') || canvas.get('cursor');\n    }\n  };\n  // 记录下点击的位置、图形，便于拖拽事件、click 事件的判定\n  EventController.prototype._onmousedown = function (pointInfo, shape, event) {\n    // 只有鼠标左键的 mousedown 事件才会设置 mousedownShape 等属性，避免鼠标右键的 mousedown 事件引起其他事件发生\n    if (event.button === LEFT_BTN_CODE) {\n      this.mousedownShape = shape;\n      this.mousedownPoint = pointInfo;\n      this.mousedownTimeStamp = event.timeStamp;\n    }\n    this._emitEvent('mousedown', event, pointInfo, shape, null, null); // mousedown 不考虑fromShape, toShape\n  };\n  // mouseleave 和 mouseenter 都是成对存在的\n  // mouseenter 和 mouseover 同时触发\n  EventController.prototype._emitMouseoverEvents = function (event, pointInfo, fromShape, toShape) {\n    var el = this.canvas.get('el');\n    if (fromShape !== toShape) {\n      if (fromShape) {\n        this._emitEvent('mouseout', event, pointInfo, fromShape, fromShape, toShape);\n        this._emitEvent('mouseleave', event, pointInfo, fromShape, fromShape, toShape);\n        // 当鼠标从 fromShape 移动到画布上时，重置鼠标样式\n        if (!toShape || toShape.get('destroyed')) {\n          el.style.cursor = this.canvas.get('cursor');\n        }\n      }\n      if (toShape) {\n        this._emitEvent('mouseover', event, pointInfo, toShape, fromShape, toShape);\n        this._emitEvent('mouseenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n    }\n  };\n  // dragover 不等同于 mouseover，而等同于 mousemove\n  EventController.prototype._emitDragoverEvents = function (event, pointInfo, fromShape, toShape, isCanvasEmit) {\n    if (toShape) {\n      if (toShape !== fromShape) {\n        if (fromShape) {\n          this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n        }\n        this._emitEvent('dragenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n      if (!isCanvasEmit) {\n        this._emitEvent('dragover', event, pointInfo, toShape);\n      }\n    } else if (fromShape) {\n      // TODO: 此处判断有问题，当 drag 图形时，也会触发一次 dragleave 事件，因为此时 toShape 为 null，这不是所期望的\n      // 经过空白区域\n      this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n    }\n    if (isCanvasEmit) {\n      this._emitEvent('dragover', event, pointInfo, toShape);\n    }\n  };\n  // drag 完成后，需要做一些清理工作\n  EventController.prototype._afterDrag = function (draggingShape, pointInfo, event) {\n    if (draggingShape) {\n      draggingShape.set('capture', true); // 恢复可以拾取\n      this.draggingShape = null;\n    }\n    this.dragging = false;\n    // drag 完成后，有可能 draggingShape 已经移动到了当前位置，所以不能直接取当前图形\n    var shape = this._getShape(pointInfo, event);\n    // 拖拽完成后，进行 enter，leave 的判定\n    if (shape !== draggingShape) {\n      this._emitMouseoverEvents(event, pointInfo, draggingShape, shape);\n    }\n    this.currentShape = shape; // 更新当前 shape，如果不处理当前图形的 mouseleave 事件可能会出问题\n  };\n  // 按键抬起时，会终止拖拽、触发点击\n  EventController.prototype._onmouseup = function (pointInfo, shape, event) {\n    // eevent.button === 0 表示鼠标左键事件，此处加上判断主要是为了避免右键鼠标会触发 mouseup 和 click 事件\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n    if (event.button === LEFT_BTN_CODE) {\n      var draggingShape = this.draggingShape;\n      if (this.dragging) {\n        // 存在可以拖拽的图形，同时拖拽到其他图形上时触发 drag 事件\n        if (draggingShape) {\n          this._emitEvent('drop', event, pointInfo, shape);\n        }\n        this._emitEvent('dragend', event, pointInfo, draggingShape);\n        this._afterDrag(draggingShape, pointInfo, event);\n      } else {\n        this._emitEvent('mouseup', event, pointInfo, shape); // 先触发 mouseup 再触发 click\n        if (shape === this.mousedownShape) {\n          this._emitEvent('click', event, pointInfo, shape);\n        }\n        this.mousedownShape = null;\n        this.mousedownPoint = null;\n      }\n    }\n  };\n  // 当触发浏览器的 dragover 事件时，不会再触发 mousemove ，所以这时候的 dragenter, dragleave 事件需要重新处理\n  EventController.prototype._ondragover = function (pointInfo, shape, event) {\n    event.preventDefault(); // 如果不对 dragover 进行 preventDefault，则不会在 canvas 上触发 drop 事件\n    var preShape = this.currentShape;\n    this._emitDragoverEvents(event, pointInfo, preShape, shape, true);\n  };\n  // 大量的图形事件，都通过 mousemove 模拟\n  EventController.prototype._onmousemove = function (pointInfo, shape, event) {\n    var canvas = this.canvas;\n    var preShape = this.currentShape;\n    var draggingShape = this.draggingShape;\n    // 正在拖拽时\n    if (this.dragging) {\n      // 正在拖拽中\n      if (draggingShape) {\n        // 如果拖拽了 shape 会触发 dragenter, dragleave, dragover 和 drag 事件\n        this._emitDragoverEvents(event, pointInfo, preShape, shape, false);\n      }\n      // 如果存在 draggingShape 则会在 draggingShape 上触发 drag 事件，冒泡到 canvas 上\n      // 否则在 canvas 上触发 drag 事件\n      this._emitEvent('drag', event, pointInfo, draggingShape);\n    } else {\n      var mousedownPoint = this.mousedownPoint;\n      if (mousedownPoint) {\n        // 当鼠标点击下去，同时移动时，进行 drag 判定\n        var mousedownShape = this.mousedownShape;\n        var now = event.timeStamp;\n        var timeWindow = now - this.mousedownTimeStamp;\n        var dx = mousedownPoint.clientX - pointInfo.clientX;\n        var dy = mousedownPoint.clientY - pointInfo.clientY;\n        var dist = dx * dx + dy * dy;\n        if (timeWindow > 120 || dist > CLICK_OFFSET) {\n          if (mousedownShape && mousedownShape.get('draggable')) {\n            // 设置了 draggable 的 shape 才能触发 drag 相关的事件\n            draggingShape = this.mousedownShape; // 拖动鼠标点下时的 shape\n            draggingShape.set('capture', false); // 禁止继续拾取，否则无法进行 dragover,dragenter,dragleave,drop的判定\n            this.draggingShape = draggingShape;\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, draggingShape);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else if (!mousedownShape && canvas.get('draggable')) {\n            // 设置了 draggable 的 canvas 才能触发 drag 相关的事件\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, null);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else {\n            this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n            this._emitEvent('mousemove', event, pointInfo, shape);\n          }\n        } else {\n          this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n          this._emitEvent('mousemove', event, pointInfo, shape);\n        }\n      } else {\n        // 没有按键按下时，则直接触发 mouse over 相关的各种事件\n        this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n        // 始终触发移动\n        this._emitEvent('mousemove', event, pointInfo, shape);\n      }\n    }\n  };\n  // 触发事件\n  EventController.prototype._emitEvent = function (type, event, pointInfo, shape, fromShape, toShape) {\n    var eventObj = this._getEventObj(type, event, pointInfo, shape, fromShape, toShape);\n    // 存在 shape 触发，则进行冒泡处理\n    if (shape) {\n      eventObj.shape = shape;\n      // 触发 shape 上的事件\n      emitTargetEvent(shape, type, eventObj);\n      var parent_1 = shape.getParent();\n      // 执行冒泡\n      while (parent_1) {\n        // 委托事件要先触发\n        parent_1.emitDelegation(type, eventObj);\n        // 事件冒泡停止，不能妨碍委托事件\n        if (!eventObj.propagationStopped) {\n          bubbleEvent(parent_1, type, eventObj);\n        }\n        eventObj.propagationPath.push(parent_1);\n        parent_1 = parent_1.getParent();\n      }\n    } else {\n      // 如果没有 shape 直接在 canvas 上触发\n      var canvas = this.canvas;\n      // 直接触发 canvas 上的事件\n      emitTargetEvent(canvas, type, eventObj);\n    }\n  };\n  EventController.prototype.destroy = function () {\n    // 清理事件\n    this._clearEvents();\n    // 清理缓存的对象\n    this.canvas = null;\n    this.currentShape = null;\n    this.draggingShape = null;\n    this.mousedownPoint = null;\n    this.mousedownShape = null;\n    this.mousedownTimeStamp = null;\n  };\n  return EventController;\n}();\nexport default EventController;","map":{"version":3,"mappings":"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","names":["GraphEvent","each","isParent","CLICK_OFFSET","LEFT_BTN_CODE","DELEGATION_SPLIT","EVENTS","hasDelegation","events","type","key","hasOwnProperty","indexOf","emitTargetEvent","target","eventObj","name","currentTarget","delegateTarget","emit","bubbleEvent","container","bubbles","relativeShape","isOverEvent","fromShape","toShape","isCanvas","cfg","ev","_this","_triggerEvent","canvas","el","get","dragging","currentShape","pointInfo","_getPointInfo","_emitEvent","draggingShape","_afterDrag","EventController","_bindEvents","eventName","addEventListener","_eventCallback","document","_onDocumentMove","_onDocumentMouseUp","removeEventListener","event","point","x","y","clientX","clientY","propagationPath","push","getShape","clientPoint","getClientByEvent","getPointByEvent","shape","_getShape","method","leaveCanvas","call","preShape","style","cursor","attr","button","mousedownShape","mousedownPoint","mousedownTimeStamp","timeStamp","isCanvasEmit","set","_emitMouseoverEvents","preventDefault","_emitDragoverEvents","now","timeWindow","dx","dy","dist","_getEventObj","parent_1","getParent","emitDelegation","propagationStopped","_clearEvents"],"sourceRoot":"","sources":["../../src/event/event-contoller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}