{"ast":null,"code":"import { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\nvar Scale = /** @class */function () {\n  function Scale(cfg) {\n    /**\n     * 度量的类型\n     */\n    this.type = 'base';\n    /**\n     * 是否分类类型的度量\n     */\n    this.isCategory = false;\n    /**\n     * 是否线性度量，有linear, time 度量\n     */\n    this.isLinear = false;\n    /**\n     * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n     */\n    this.isContinuous = false;\n    /**\n     * 是否是常量的度量，传入和传出一致\n     */\n    this.isIdentity = false;\n    this.values = [];\n    this.range = [0, 1];\n    this.ticks = [];\n    this.__cfg__ = cfg;\n    this.initCfg();\n    this.init();\n  }\n  // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n  Scale.prototype.translate = function (v) {\n    return v;\n  };\n  /** 重新初始化 */\n  Scale.prototype.change = function (cfg) {\n    // 覆盖配置项，而不替代\n    assign(this.__cfg__, cfg);\n    this.init();\n  };\n  Scale.prototype.clone = function () {\n    return this.constructor(this.__cfg__);\n  };\n  /** 获取坐标轴需要的ticks */\n  Scale.prototype.getTicks = function () {\n    var _this = this;\n    return map(this.ticks, function (tick, idx) {\n      if (isObject(tick)) {\n        // 仅当符合Tick类型时才有意义\n        return tick;\n      }\n      return {\n        text: _this.getText(tick, idx),\n        tickValue: tick,\n        value: _this.scale(tick)\n      };\n    });\n  };\n  /** 获取Tick的格式化结果 */\n  Scale.prototype.getText = function (value, key) {\n    var formatter = this.formatter;\n    var res = formatter ? formatter(value, key) : value;\n    if (isNil(res) || !isFunction(res.toString)) {\n      return '';\n    }\n    return res.toString();\n  };\n  // 获取配置项中的值，当前 scale 上的值可能会被修改\n  Scale.prototype.getConfig = function (key) {\n    return this.__cfg__[key];\n  };\n  // scale初始化\n  Scale.prototype.init = function () {\n    assign(this, this.__cfg__);\n    this.setDomain();\n    if (isEmpty(this.getConfig('ticks'))) {\n      this.ticks = this.calculateTicks();\n    }\n  };\n  // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n  Scale.prototype.initCfg = function () {};\n  Scale.prototype.setDomain = function () {};\n  Scale.prototype.calculateTicks = function () {\n    var tickMethod = this.tickMethod;\n    var ticks = [];\n    if (isString(tickMethod)) {\n      var method = getTickMethod(tickMethod);\n      if (!method) {\n        throw new Error('There is no method to to calculate ticks!');\n      }\n      ticks = method(this);\n    } else if (isFunction(tickMethod)) {\n      ticks = tickMethod(this);\n    }\n    return ticks;\n  };\n  // range 的最小值\n  Scale.prototype.rangeMin = function () {\n    return this.range[0];\n  };\n  // range 的最大值\n  Scale.prototype.rangeMax = function () {\n    return this.range[1];\n  };\n  /** 定义域转 0~1 */\n  Scale.prototype.calcPercent = function (value, min, max) {\n    if (isNumber(value)) {\n      return (value - min) / (max - min);\n    }\n    return NaN;\n  };\n  /** 0~1转定义域 */\n  Scale.prototype.calcValue = function (percent, min, max) {\n    return min + percent * (max - min);\n  };\n  return Scale;\n}();\nexport default Scale;","map":{"version":3,"mappings":"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","names":["assign","isEmpty","isFunction","isNil","isNumber","isObject","isString","map","getTickMethod","cfg","__cfg__","initCfg","init","Scale","v","constructor","ticks","tick","idx","text","_this","getText","tickValue","value","scale","key","formatter","res","toString","setDomain","getConfig","calculateTicks","tickMethod","method","Error","range","min","max","NaN","percent"],"sourceRoot":"","sources":["../src/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}