{"ast":null,"code":"import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes/index.mjs';\nimport { env } from '../env/index.mjs';\n\n// ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Circle = Element.define('standard.Circle', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refR: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'circle',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Ellipse = Element.define('standard.Ellipse', {\n  attrs: {\n    body: {\n      refCx: '50%',\n      refCy: '50%',\n      refRx: '50%',\n      refRy: '50%',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Path = Element.define('standard.Path', {\n  attrs: {\n    body: {\n      refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polygon = Element.define('standard.Polygon', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polygon',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Polyline = Element.define('standard.Polyline', {\n  attrs: {\n    body: {\n      refPoints: '0 0 10 0 10 10 0 10 0 0',\n      strokeWidth: 2,\n      stroke: '#333333',\n      fill: '#FFFFFF'\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'polyline',\n    selector: 'body'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const Image = Element.define('standard.Image', {\n  attrs: {\n    image: {\n      refWidth: '100%',\n      refHeight: '100%'\n      // xlinkHref: '[URL]'\n    },\n\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n  attrs: {\n    border: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5,\n      fill: '#FFFFFF'\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: -1,\n      refHeight: -1,\n      x: 0.5,\n      y: 0.5\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'background',\n    attributes: {\n      'stroke': 'none'\n    }\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'rect',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#FFFFFF',\n      strokeWidth: 2\n    },\n    image: {\n      // xlinkHref: '[URL]'\n      refWidth: '30%',\n      refHeight: -20,\n      x: 10,\n      y: 10,\n      preserveAspectRatio: 'xMidYMin'\n    },\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'left',\n      refX: '30%',\n      refX2: 20,\n      // 10 + 10\n      refY: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n  attrs: {\n    border: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    background: {\n      refRx: '50%',\n      refRy: '50%',\n      refCx: '50%',\n      refCy: '50%',\n      fill: '#FFFFFF'\n    },\n    image: {\n      // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n      refWidth: '68%',\n      refHeight: '68%',\n      // The image offset is calculated as (100% - 68%) / 2\n      refX: '16%',\n      refY: '16%',\n      preserveAspectRatio: 'xMidYMid'\n      // xlinkHref: '[URL]'\n    },\n\n    label: {\n      textVerticalAnchor: 'top',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 10,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'ellipse',\n    selector: 'background'\n  }, {\n    tagName: 'image',\n    selector: 'image'\n  }, {\n    tagName: 'ellipse',\n    selector: 'border',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }]\n});\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    header: {\n      refWidth: '100%',\n      height: 30,\n      strokeWidth: 2,\n      stroke: '#000000',\n      fill: '#FFFFFF'\n    },\n    headerText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: 15,\n      fontSize: 16,\n      fill: '#333333'\n    },\n    bodyText: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '50%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, {\n    tagName: 'rect',\n    selector: 'header'\n  }, {\n    tagName: 'text',\n    selector: 'headerText'\n  }, {\n    tagName: 'text',\n    selector: 'bodyText'\n  }]\n});\nvar CYLINDER_TILT = 10;\nexport const Cylinder = Element.define('standard.Cylinder', {\n  attrs: {\n    body: {\n      lateralArea: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    top: {\n      refCx: '50%',\n      cy: CYLINDER_TILT,\n      refRx: '50%',\n      ry: CYLINDER_TILT,\n      fill: '#FFFFFF',\n      stroke: '#333333',\n      strokeWidth: 2\n    },\n    label: {\n      textVerticalAnchor: 'middle',\n      textAnchor: 'middle',\n      refX: '50%',\n      refY: '100%',\n      refY2: 15,\n      fontSize: 14,\n      fill: '#333333'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'ellipse',\n    selector: 'top'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  topRy: function (t, opt) {\n    // getter\n    if (t === undefined) return this.attr('body/lateralArea');\n\n    // setter\n    var isPercentageSetter = isPercentage(t);\n    var bodyAttrs = {\n      lateralArea: t\n    };\n    var topAttrs = isPercentageSetter ? {\n      refCy: t,\n      refRy: t,\n      cy: null,\n      ry: null\n    } : {\n      refCy: null,\n      refRy: null,\n      cy: t,\n      ry: t\n    };\n    return this.attr({\n      body: bodyAttrs,\n      top: topAttrs\n    }, opt);\n  }\n}, {\n  attributes: {\n    lateralArea: {\n      set: function (t, refBBox) {\n        var isPercentageSetter = isPercentage(t);\n        if (isPercentageSetter) t = parseFloat(t) / 100;\n        var x = refBBox.x;\n        var y = refBBox.y;\n        var w = refBBox.width;\n        var h = refBBox.height;\n\n        // curve control point variables\n        var rx = w / 2;\n        var ry = isPercentageSetter ? h * t : t;\n        var kappa = V.KAPPA;\n        var cx = kappa * rx;\n        var cy = kappa * (isPercentageSetter ? h * t : t);\n\n        // shape variables\n        var xLeft = x;\n        var xCenter = x + w / 2;\n        var xRight = x + w;\n        var ySideTop = y + ry;\n        var yCurveTop = ySideTop - ry;\n        var ySideBottom = y + h - ry;\n        var yCurveBottom = y + h;\n\n        // return calculated shape\n        var data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];\n        return {\n          d: data.join(' ')\n        };\n      }\n    }\n  }\n});\nvar foLabelMarkup = {\n  tagName: 'foreignObject',\n  selector: 'foreignObject',\n  attributes: {\n    'overflow': 'hidden'\n  },\n  children: [{\n    tagName: 'div',\n    namespaceURI: 'http://www.w3.org/1999/xhtml',\n    selector: 'label',\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'static',\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      margin: 0,\n      padding: '0px 5px',\n      boxSizing: 'border-box',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }]\n};\nvar svgLabelMarkup = {\n  tagName: 'text',\n  selector: 'label',\n  attributes: {\n    'text-anchor': 'middle'\n  }\n};\nvar labelMarkup = env.test('svgforeignobject') ? foLabelMarkup : svgLabelMarkup;\nexport const TextBlock = Element.define('standard.TextBlock', {\n  attrs: {\n    body: {\n      refWidth: '100%',\n      refHeight: '100%',\n      stroke: '#333333',\n      fill: '#ffffff',\n      strokeWidth: 2\n    },\n    foreignObject: {\n      refWidth: '100%',\n      refHeight: '100%'\n    },\n    label: {\n      style: {\n        fontSize: 14\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, labelMarkup]\n}, {\n  attributes: {\n    text: {\n      set: function (text, refBBox, node, attrs) {\n        if (node instanceof HTMLElement) {\n          node.textContent = text;\n        } else {\n          // No foreign object\n          var style = attrs.style || {};\n          var wrapValue = {\n            text: text,\n            width: -5,\n            height: '100%'\n          };\n          var wrapAttrs = assign({\n            textVerticalAnchor: 'middle'\n          }, style);\n          attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n          return {\n            fill: style.color || null\n          };\n        }\n      },\n      position: function (text, refBBox, node) {\n        // No foreign object\n        if (node instanceof SVGElement) return refBBox.center();\n      }\n    }\n  }\n});\n\n// LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#333333',\n      strokeWidth: 2,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 10 -5 0 0 10 5 z'\n      }\n    },\n    wrapper: {\n      connection: true,\n      strokeWidth: 10,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'wrapper',\n    attributes: {\n      'fill': 'none',\n      'cursor': 'pointer',\n      'stroke': 'transparent',\n      'stroke-linecap': 'round'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none',\n      'pointer-events': 'none'\n    }\n  }]\n});\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#DDDDDD',\n      strokeWidth: 4,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        type: 'path',\n        stroke: '#000000',\n        d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n      }\n    },\n    outline: {\n      connection: true,\n      stroke: '#000000',\n      strokeWidth: 6,\n      strokeLinejoin: 'round'\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'outline',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n  attrs: {\n    line: {\n      connection: true,\n      stroke: '#FF0000',\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M 0 -10 -10 0 0 10 z'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    },\n    shadow: {\n      connection: true,\n      refX: 3,\n      refY: 6,\n      stroke: '#000000',\n      strokeOpacity: 0.2,\n      strokeWidth: 20,\n      strokeLinejoin: 'round',\n      targetMarker: {\n        'type': 'path',\n        'd': 'M 0 -10 -10 0 0 10 z',\n        'stroke': 'none'\n      },\n      sourceMarker: {\n        'type': 'path',\n        'stroke': 'none',\n        'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n      }\n    }\n  }\n}, {\n  markup: [{\n    tagName: 'path',\n    selector: 'shadow',\n    attributes: {\n      'fill': 'none'\n    }\n  }, {\n    tagName: 'path',\n    selector: 'line',\n    attributes: {\n      'fill': 'none'\n    }\n  }]\n});","map":{"version":3,"names":["V","Element","Link","LinkBase","isPercentage","assign","attributes","env","Rectangle","define","attrs","body","refWidth","refHeight","strokeWidth","stroke","fill","label","textVerticalAnchor","textAnchor","refX","refY","fontSize","markup","tagName","selector","Circle","refCx","refCy","refR","Ellipse","refRx","refRy","Path","refD","Polygon","refPoints","Polyline","Image","image","refY2","BorderedImage","border","background","x","y","EmbeddedImage","preserveAspectRatio","refX2","InscribedImage","HeaderedRectangle","header","height","headerText","bodyText","CYLINDER_TILT","Cylinder","lateralArea","top","cy","ry","topRy","t","opt","undefined","attr","isPercentageSetter","bodyAttrs","topAttrs","set","refBBox","parseFloat","w","width","h","rx","kappa","KAPPA","cx","xLeft","xCenter","xRight","ySideTop","yCurveTop","ySideBottom","yCurveBottom","data","d","join","foLabelMarkup","children","namespaceURI","style","position","backgroundColor","textAlign","margin","padding","boxSizing","display","alignItems","justifyContent","svgLabelMarkup","labelMarkup","test","TextBlock","foreignObject","text","node","HTMLElement","textContent","wrapValue","wrapAttrs","textWrap","call","color","SVGElement","center","line","connection","strokeLinejoin","targetMarker","wrapper","DoubleLink","type","outline","ShadowLink","sourceMarker","shadow","strokeOpacity"],"sources":["/Users/lijiaxin/Documents/workspace/hydsoft-mgmt-frontend/node_modules/jointjs/src/shapes/standard.mjs"],"sourcesContent":["import V from '../V/index.mjs';\nimport { Element } from '../dia/Element.mjs';\nimport { Link as LinkBase } from '../dia/Link.mjs';\nimport { isPercentage, assign } from '../util/index.mjs';\nimport { attributes } from '../dia/attributes/index.mjs';\nimport { env } from '../env/index.mjs';\n\n\n// ELEMENTS\n\nexport const Rectangle = Element.define('standard.Rectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body',\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Circle = Element.define('standard.Circle', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refR: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'circle',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Ellipse = Element.define('standard.Ellipse', {\n    attrs: {\n        body: {\n            refCx: '50%',\n            refCy: '50%',\n            refRx: '50%',\n            refRy: '50%',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Path = Element.define('standard.Path', {\n    attrs: {\n        body: {\n            refD: 'M 0 0 L 10 0 10 10 0 10 Z',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polygon = Element.define('standard.Polygon', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polygon',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Polyline = Element.define('standard.Polyline', {\n    attrs: {\n        body: {\n            refPoints: '0 0 10 0 10 10 0 10 0 0',\n            strokeWidth: 2,\n            stroke: '#333333',\n            fill: '#FFFFFF'\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'polyline',\n        selector: 'body'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const Image = Element.define('standard.Image', {\n    attrs: {\n        image: {\n            refWidth: '100%',\n            refHeight: '100%',\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const BorderedImage = Element.define('standard.BorderedImage', {\n    attrs: {\n        border: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5,\n            fill: '#FFFFFF'\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: -1,\n            refHeight: -1,\n            x: 0.5,\n            y: 0.5\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'background',\n        attributes: {\n            'stroke': 'none'\n        }\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'rect',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const EmbeddedImage = Element.define('standard.EmbeddedImage', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#FFFFFF',\n            strokeWidth: 2\n        },\n        image: {\n            // xlinkHref: '[URL]'\n            refWidth: '30%',\n            refHeight: -20,\n            x: 10,\n            y: 10,\n            preserveAspectRatio: 'xMidYMin'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'left',\n            refX: '30%',\n            refX2: 20, // 10 + 10\n            refY: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const InscribedImage = Element.define('standard.InscribedImage', {\n    attrs: {\n        border: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        background: {\n            refRx: '50%',\n            refRy: '50%',\n            refCx: '50%',\n            refCy: '50%',\n            fill: '#FFFFFF'\n        },\n        image: {\n            // The image corners touch the border when its size is Math.sqrt(2) / 2 = 0.707.. ~= 70%\n            refWidth: '68%',\n            refHeight: '68%',\n            // The image offset is calculated as (100% - 68%) / 2\n            refX: '16%',\n            refY: '16%',\n            preserveAspectRatio: 'xMidYMid'\n            // xlinkHref: '[URL]'\n        },\n        label: {\n            textVerticalAnchor: 'top',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 10,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'ellipse',\n        selector: 'background'\n    }, {\n        tagName: 'image',\n        selector: 'image'\n    }, {\n        tagName: 'ellipse',\n        selector: 'border',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }]\n});\n\nexport const HeaderedRectangle = Element.define('standard.HeaderedRectangle', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        header: {\n            refWidth: '100%',\n            height: 30,\n            strokeWidth: 2,\n            stroke: '#000000',\n            fill: '#FFFFFF'\n        },\n        headerText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: 15,\n            fontSize: 16,\n            fill: '#333333'\n        },\n        bodyText: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '50%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, {\n        tagName: 'rect',\n        selector: 'header'\n    }, {\n        tagName: 'text',\n        selector: 'headerText'\n    }, {\n        tagName: 'text',\n        selector: 'bodyText'\n    }]\n});\n\nvar CYLINDER_TILT = 10;\n\nexport const Cylinder = Element.define('standard.Cylinder', {\n    attrs: {\n        body: {\n            lateralArea: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        top: {\n            refCx: '50%',\n            cy: CYLINDER_TILT,\n            refRx: '50%',\n            ry: CYLINDER_TILT,\n            fill: '#FFFFFF',\n            stroke: '#333333',\n            strokeWidth: 2\n        },\n        label: {\n            textVerticalAnchor: 'middle',\n            textAnchor: 'middle',\n            refX: '50%',\n            refY: '100%',\n            refY2: 15,\n            fontSize: 14,\n            fill: '#333333'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'body'\n    }, {\n        tagName: 'ellipse',\n        selector: 'top'\n    }, {\n        tagName: 'text',\n        selector: 'label'\n    }],\n\n    topRy: function(t, opt) {\n        // getter\n        if (t === undefined) return this.attr('body/lateralArea');\n\n        // setter\n        var isPercentageSetter = isPercentage(t);\n\n        var bodyAttrs = { lateralArea: t };\n        var topAttrs = isPercentageSetter\n            ? { refCy: t, refRy: t, cy: null, ry: null }\n            : { refCy: null, refRy: null, cy: t, ry: t };\n\n        return this.attr({ body: bodyAttrs, top: topAttrs }, opt);\n    }\n\n}, {\n    attributes: {\n        lateralArea: {\n            set: function(t, refBBox) {\n                var isPercentageSetter = isPercentage(t);\n                if (isPercentageSetter) t = parseFloat(t) / 100;\n\n                var x = refBBox.x;\n                var y = refBBox.y;\n                var w = refBBox.width;\n                var h = refBBox.height;\n\n                // curve control point variables\n                var rx = w / 2;\n                var ry = isPercentageSetter ? (h * t) : t;\n\n                var kappa = V.KAPPA;\n                var cx = kappa * rx;\n                var cy = kappa * (isPercentageSetter ? (h * t) : t);\n\n                // shape variables\n                var xLeft = x;\n                var xCenter = x + (w / 2);\n                var xRight = x + w;\n\n                var ySideTop = y + ry;\n                var yCurveTop = ySideTop - ry;\n                var ySideBottom = y + h - ry;\n                var yCurveBottom = y + h;\n\n                // return calculated shape\n                var data = [\n                    'M', xLeft, ySideTop,\n                    'L', xLeft, ySideBottom,\n                    'C', x, (ySideBottom + cy), (xCenter - cx), yCurveBottom, xCenter, yCurveBottom,\n                    'C', (xCenter + cx), yCurveBottom, xRight, (ySideBottom + cy), xRight, ySideBottom,\n                    'L', xRight, ySideTop,\n                    'C', xRight, (ySideTop - cy), (xCenter + cx), yCurveTop, xCenter, yCurveTop,\n                    'C', (xCenter - cx), yCurveTop, xLeft, (ySideTop - cy), xLeft, ySideTop,\n                    'Z'\n                ];\n                return { d: data.join(' ') };\n            }\n        }\n    }\n});\n\nvar foLabelMarkup = {\n    tagName: 'foreignObject',\n    selector: 'foreignObject',\n    attributes: {\n        'overflow': 'hidden'\n    },\n    children: [{\n        tagName: 'div',\n        namespaceURI: 'http://www.w3.org/1999/xhtml',\n        selector: 'label',\n        style: {\n            width: '100%',\n            height: '100%',\n            position: 'static',\n            backgroundColor: 'transparent',\n            textAlign: 'center',\n            margin: 0,\n            padding: '0px 5px',\n            boxSizing: 'border-box',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }\n    }]\n};\n\nvar svgLabelMarkup = {\n    tagName: 'text',\n    selector: 'label',\n    attributes: {\n        'text-anchor': 'middle'\n    }\n};\n\nvar labelMarkup = (env.test('svgforeignobject')) ? foLabelMarkup : svgLabelMarkup;\n\nexport const TextBlock = Element.define('standard.TextBlock', {\n    attrs: {\n        body: {\n            refWidth: '100%',\n            refHeight: '100%',\n            stroke: '#333333',\n            fill: '#ffffff',\n            strokeWidth: 2\n        },\n        foreignObject: {\n            refWidth: '100%',\n            refHeight: '100%'\n        },\n        label: {\n            style: {\n                fontSize: 14\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'rect',\n        selector: 'body'\n    }, labelMarkup]\n}, {\n    attributes: {\n        text: {\n            set: function(text, refBBox, node, attrs) {\n                if (node instanceof HTMLElement) {\n                    node.textContent = text;\n                } else {\n                    // No foreign object\n                    var style = attrs.style || {};\n                    var wrapValue = { text: text, width: -5, height: '100%' };\n                    var wrapAttrs = assign({ textVerticalAnchor: 'middle' }, style);\n                    attributes.textWrap.set.call(this, wrapValue, refBBox, node, wrapAttrs);\n                    return { fill: style.color || null };\n                }\n            },\n            position: function(text, refBBox, node) {\n                // No foreign object\n                if (node instanceof SVGElement) return refBBox.center();\n            }\n        }\n    }\n});\n\n// LINKS\n\nexport const Link = LinkBase.define('standard.Link', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#333333',\n            strokeWidth: 2,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 10 -5 0 0 10 5 z'\n            }\n        },\n        wrapper: {\n            connection: true,\n            strokeWidth: 10,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'wrapper',\n        attributes: {\n            'fill': 'none',\n            'cursor': 'pointer',\n            'stroke': 'transparent',\n            'stroke-linecap': 'round'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none',\n            'pointer-events': 'none'\n        }\n    }]\n});\n\nexport const DoubleLink = LinkBase.define('standard.DoubleLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#DDDDDD',\n            strokeWidth: 4,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                type: 'path',\n                stroke: '#000000',\n                d: 'M 10 -3 10 -10 -2 0 10 10 10 3'\n            }\n        },\n        outline: {\n            connection: true,\n            stroke: '#000000',\n            strokeWidth: 6,\n            strokeLinejoin: 'round'\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'outline',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n\nexport const ShadowLink = LinkBase.define('standard.ShadowLink', {\n    attrs: {\n        line: {\n            connection: true,\n            stroke: '#FF0000',\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M 0 -10 -10 0 0 10 z'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        },\n        shadow: {\n            connection: true,\n            refX: 3,\n            refY: 6,\n            stroke: '#000000',\n            strokeOpacity: 0.2,\n            strokeWidth: 20,\n            strokeLinejoin: 'round',\n            targetMarker: {\n                'type': 'path',\n                'd': 'M 0 -10 -10 0 0 10 z',\n                'stroke': 'none'\n            },\n            sourceMarker: {\n                'type': 'path',\n                'stroke': 'none',\n                'd': 'M -10 -10 0 0 -10 10 0 10 0 -10 z'\n            }\n        }\n    }\n}, {\n    markup: [{\n        tagName: 'path',\n        selector: 'shadow',\n        attributes: {\n            'fill': 'none'\n        }\n    }, {\n        tagName: 'path',\n        selector: 'line',\n        attributes: {\n            'fill': 'none'\n        }\n    }]\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}